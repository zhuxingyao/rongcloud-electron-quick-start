!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@rongcloud/engine")):"function"==typeof define&&define.amd?define(["exports","@rongcloud/engine"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).RCCallEngine={},e.RCEngine)}(this,(function(e,t){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function s(e,t,s,n){return new(s||(s=Promise))((function(i,a){function r(e){try{l(n.next(e))}catch(e){a(e)}}function o(e){try{l(n.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(r,o)}l((n=n.apply(e,t||[])).next())}))}const n=()=>{let e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}));return e=e.replace(/-/g,"")+"0",e=parseInt(e,16),e=(e=>{const t="0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ+/".split(""),s=t.length+1;let n=+e;const i=[];do{const e=n%s;n=(n-e)/s,i.unshift(t[e])}while(n);return i.join("")})(e),e.length>22&&(e=e.slice(0,22)),e},i=()=>{const e=Math.floor(1e3*Math.random());let t=n();t=t.replace(/\//g,"0");return[t,Date.now(),e].join("_")},a=new t.EventEmitter,r=e=>{const t="RCCallDeviceId";let s=e.sessionStorage.getItem(t);return s||(s=n(),e.sessionStorage.setItem(t,s)),s};var o,l,_;!function(e){e[e.OUTGOING=1]="OUTGOING",e[e.INCOMING=2]="INCOMING",e[e.RINGING=3]="RINGING",e[e.CONNECTED=4]="CONNECTED",e[e.IDLE=5]="IDLE",e[e.ACCEPTED=6]="ACCEPTED"}(o||(o={})),e.RCCallErrorCode=void 0,(l=e.RCCallErrorCode||(e.RCCallErrorCode={}))[l.SUCCESS=1e4]="SUCCESS",l[l.STATE_MACHINE_EXIT=53200]="STATE_MACHINE_EXIT",l[l.SEND_MSG_ERROR=53201]="SEND_MSG_ERROR",l[l.REJECTED_BY_BLACKLIST=53202]="REJECTED_BY_BLACKLIST",l[l.NOT_IN_GROUP=53203]="NOT_IN_GROUP",l[l.GET_LOCAL_AUDIO_TRACK_ERROR=53301]="GET_LOCAL_AUDIO_TRACK_ERROR",l[l.GET_LOCAL_VIDEO_TRACK_ERROR=53302]="GET_LOCAL_VIDEO_TRACK_ERROR",l[l.GET_LOCAL_AUDIO_AND_VIDEO_TRACK_ERROR=53303]="GET_LOCAL_AUDIO_AND_VIDEO_TRACK_ERROR",l[l.JOIN_ROOM_ERROR=53304]="JOIN_ROOM_ERROR",l[l.AUDIO_PUBLISH_ERROR=53305]="AUDIO_PUBLISH_ERROR",l[l.VIDEO_PUBLISH_ERROR=53306]="VIDEO_PUBLISH_ERROR",l[l.AUDIO_AND_VIDEO_PUBLISH_ERROR=53307]="AUDIO_AND_VIDEO_PUBLISH_ERROR",l[l.QUERY_JOINED_USER_INFO_ERROR=53308]="QUERY_JOINED_USER_INFO_ERROR",l[l.MISSING_VIDEO_TRACK_ERROR=53309]="MISSING_VIDEO_TRACK_ERROR",l[l.UNPUBLISH_VIDEO_ERROR=53310]="UNPUBLISH_VIDEO_ERROR",l[l.CONVERSATION_NOT_GROUP_ERROR=53311]="CONVERSATION_NOT_GROUP_ERROR",e.RCCallEndReason=void 0,(_=e.RCCallEndReason||(e.RCCallEndReason={}))[_.CANCEL=1]="CANCEL",_[_.REJECT=2]="REJECT",_[_.HANGUP=3]="HANGUP",_[_.BUSY_LINE=4]="BUSY_LINE",_[_.NO_RESPONSE=5]="NO_RESPONSE",_[_.ENGINE_UNSUPPORTED=6]="ENGINE_UNSUPPORTED",_[_.NETWORK_ERROR=7]="NETWORK_ERROR",_[_.GET_MEDIA_RESOURCES_ERROR=8]="GET_MEDIA_RESOURCES_ERROR",_[_.PUBLISH_ERROR=9]="PUBLISH_ERROR",_[_.SUBSCRIBE_ERROR=10]="SUBSCRIBE_ERROR",_[_.REMOTE_CANCEL=11]="REMOTE_CANCEL",_[_.REMOTE_REJECT=12]="REMOTE_REJECT",_[_.REMOTE_HANGUP=13]="REMOTE_HANGUP",_[_.REMOTE_BUSY_LINE=14]="REMOTE_BUSY_LINE",_[_.REMOTE_NO_RESPONSE=15]="REMOTE_NO_RESPONSE",_[_.REMOTE_ENGINE_UNSUPPORTED=16]="REMOTE_ENGINE_UNSUPPORTED",_[_.REMOTE_NETWORK_ERROR=17]="REMOTE_NETWORK_ERROR",_[_.REMOTE_GET_MEDIA_RESOURCE_ERROR=18]="REMOTE_GET_MEDIA_RESOURCE_ERROR",_[_.REMOTE_PUBLISH_ERROR=19]="REMOTE_PUBLISH_ERROR",_[_.REMOTE_SUBSCRIBE_ERROR=20]="REMOTE_SUBSCRIBE_ERROR",_[_.OTHER_CLIENT_JOINED_CALL=21]="OTHER_CLIENT_JOINED_CALL",_[_.OTHER_CLIENT_IN_CALL=22]="OTHER_CLIENT_IN_CALL",_[_.KICKED_BY_SERVER=23]="KICKED_BY_SERVER",_[_.ACCEPT_SYSTEM_CALL=24]="ACCEPT_SYSTEM_CALL",_[_.REMOTE_OTHER_CLIENT_JOINED_CALL=31]="REMOTE_OTHER_CLIENT_JOINED_CALL",_[_.REMOTE_OTHER_CLIENT_IN_CALL=32]="REMOTE_OTHER_CLIENT_IN_CALL",_[_.REMOTE_KICKED_BY_SERVER=33]="REMOTE_KICKED_BY_SERVER",_[_.REMOTE_ACCEPT_SYSTEM_CALL=34]="REMOTE_ACCEPT_SYSTEM_CALL",_[_.ACCEPT_BY_OTHER_CLIENT=101]="ACCEPT_BY_OTHER_CLIENT",_[_.HANGUP_BY_OTHER_CLIENT=102]="HANGUP_BY_OTHER_CLIENT",_[_.ADDED_TO_BLACKLIST=103]="ADDED_TO_BLACKLIST",_[_.SERVICE_NOT_OPENED=104]="SERVICE_NOT_OPENED";const h={[e.RCCallEndReason.CANCEL]:e.RCCallEndReason.REMOTE_CANCEL,[e.RCCallEndReason.REJECT]:e.RCCallEndReason.REMOTE_REJECT,[e.RCCallEndReason.HANGUP]:e.RCCallEndReason.REMOTE_HANGUP,[e.RCCallEndReason.BUSY_LINE]:e.RCCallEndReason.REMOTE_BUSY_LINE,[e.RCCallEndReason.NO_RESPONSE]:e.RCCallEndReason.REMOTE_NO_RESPONSE,[e.RCCallEndReason.ENGINE_UNSUPPORTED]:e.RCCallEndReason.REMOTE_ENGINE_UNSUPPORTED,[e.RCCallEndReason.NETWORK_ERROR]:e.RCCallEndReason.REMOTE_NETWORK_ERROR,[e.RCCallEndReason.GET_MEDIA_RESOURCES_ERROR]:e.RCCallEndReason.REMOTE_GET_MEDIA_RESOURCE_ERROR,[e.RCCallEndReason.PUBLISH_ERROR]:e.RCCallEndReason.REMOTE_PUBLISH_ERROR,[e.RCCallEndReason.SUBSCRIBE_ERROR]:e.RCCallEndReason.REMOTE_SUBSCRIBE_ERROR,[e.RCCallEndReason.OTHER_CLIENT_JOINED_CALL]:e.RCCallEndReason.REMOTE_OTHER_CLIENT_JOINED_CALL,[e.RCCallEndReason.OTHER_CLIENT_IN_CALL]:e.RCCallEndReason.REMOTE_OTHER_CLIENT_IN_CALL,[e.RCCallEndReason.KICKED_BY_SERVER]:e.RCCallEndReason.REMOTE_KICKED_BY_SERVER,[e.RCCallEndReason.REMOTE_NO_RESPONSE]:e.RCCallEndReason.NO_RESPONSE,[e.RCCallEndReason.ACCEPT_SYSTEM_CALL]:e.RCCallEndReason.REMOTE_ACCEPT_SYSTEM_CALL};var d,C,E,R,c,g;!function(e){e.VCInvite="RC:VCInvite",e.VCRinging="RC:VCRinging",e.VCAccept="RC:VCAccept",e.VCHangup="RC:VCHangup",e.VCModifyMem="RC:VCModifyMem",e.VCModifyMedia="RC:VCModifyMedia"}(d||(d={})),e.RCCallSessionState=void 0,(C=e.RCCallSessionState||(e.RCCallSessionState={}))[C.WAITING=0]="WAITING",C[C.KEEPING=1]="KEEPING",C[C.END=2]="END",e.RCCallUserState=void 0,(E=e.RCCallUserState||(e.RCCallUserState={}))[E.NONE=0]="NONE",E[E.WAITING=1]="WAITING",E[E.KEEPING=2]="KEEPING";class I{constructor(e,t){this._timerId=0,this._startTime=0,e&&(this._timerId=((e,t)=>setTimeout(e,t))((()=>{e()}),t)),this._startTime=Date.now()}stop(){clearTimeout(this._timerId);const e=Date.now();let t=e-this._startTime;return 0===this._startTime&&(t=0),{startTime:this._startTime,endTime:e,duration:t}}reset(){this._startTime=0}}class u{constructor(e,t,s,n,i,a,r,o,l){this._context=e,this._runtime=t,this._logger=s,this._callMsgHandler=n,this._channelId=i,this._conversationType=a,this._targetId=r,this._mediaType=o,this._callId=l,this._sessionState=null,this._userInfo={},this._userTimers={},this._callTimeout=6e4,this._beginTimestamp=0,this._endTimestamp=0,this._endReason=null,this._callerId=null,this._inviterId=null,this._callMsgHandler.registerStateMachineEvent(this._callId,"onRinging",this._onRinging.bind(this)),this._callMsgHandler.registerStateMachineEvent(this._callId,"onAccept",this._onAccept.bind(this)),this._callMsgHandler.registerStateMachineEvent(this._callId,"onMediaModify",this._onMediaModify.bind(this)),this._callMsgHandler.registerStateMachineEvent(this._callId,"onHungup",this._onHungup.bind(this))}_getTimeout(e){let t=this._context.getServerTime()-e;t<0&&(t=500);const s=this._callTimeout-t;return this._logger.warn(`_getTimeout -> timeout: ${s}`),s}_clearTimerById(e){this._logger.debug(`[RCCallStateMachine] before _clearTimerById  -> userId: ${e} userTimers: ${JSON.stringify(this._userTimers)}`),this._userTimers[e]&&(this._userTimers[e].stop(),delete this._userTimers[e]),this._logger.debug(`[RCCallStateMachine] after _clearTimerById -> userTimers: ${JSON.stringify(this._userTimers)}`)}_notifyStateChange(t,s){var n;this._logger.warn("----------------------------------------------------------房间状态变更"),this._logger.warn(`[RCCallStateMachine] notifyStateChange -> info: ${JSON.stringify({state:t,reason:s})}`),this._endReason=s||null,this._sessionState!==t&&(this._sessionState=t,null===(n=this._watchers)||void 0===n||n.onStateChange({state:t,reason:s})),t===e.RCCallSessionState.END&&(a.emit("onStateMachineClose",this._callId),this._callMsgHandler.unregisterStateMachineEvent(this._callId))}_notifyUserStateChange(e,t){var s;this._logger.warn(`[RCCallStateMachine] notifyUserStateChange -> info: ${JSON.stringify({user:e,reason:t})}`),null===(s=this._watchers)||void 0===s||s.onUserStateChange({user:e,reason:t})}_otherClientHandle(t){const{senderUserId:s,content:{user:n,reason:i},messageType:a}=t;this._userInfo[s]={userId:s,state:e.RCCallUserState.NONE,isCaller:!1,isRemote:!1};for(const e in this._userTimers)this._clearTimerById(e);let r=e.RCCallEndReason.ACCEPT_BY_OTHER_CLIENT;a===d.VCHangup&&(r=i===e.RCCallEndReason.BUSY_LINE?e.RCCallEndReason.OTHER_CLIENT_IN_CALL:i===e.RCCallEndReason.NO_RESPONSE?e.RCCallEndReason.NO_RESPONSE:e.RCCallEndReason.HANGUP_BY_OTHER_CLIENT),Object.assign(this._userInfo[s],n),this._logger.warn("+++++++++++++++++++_notifyUserStateChange1++++++++++++++"),this._logger.warn("+++++++++++++++++++this._userInfo[senderUserId]++++++++++++++",this._userInfo[s]),this._notifyUserStateChange(this._userInfo[s],r),this._notifyStateChange(e.RCCallSessionState.END,r)}_isRemoteInvalidMsg(t,s){return!!this._userInfo[t]&&(!(!this._userInfo[t].deviceId||!s)&&(this._userInfo[t].state===e.RCCallUserState.KEEPING&&this._userInfo[t].deviceId!==s))}_onRinging(e){const{senderUserId:t,content:{user:s,deviceId:n}}=e;this._isRemoteInvalidMsg(t,n)?this._logger.debug("[RCCallStateMachine] onRinging -> not the remote device that is currently talking"):this._context.getCurrentId()!==t&&this._watchers.onRinging(Object.assign({userId:t},s))}_onAccept(t){const{senderUserId:s,content:{user:n,deviceId:i},sentTime:a}=t,o=this._context.getCurrentId();if(this._isRemoteInvalidMsg(s,i))return void this._logger.debug("[RCCallStateMachine] _onAccept -> not the remote device that is currently talking");if(o===s)return void this._otherClientHandle(t);this._userTimers[s]&&this._clearTimerById(s);[o,s].forEach((t=>{const a=t===o;this._userInfo[t]={userId:t,state:e.RCCallUserState.KEEPING,isCaller:a,isRemote:a,deviceId:a?r(this._runtime):i},a||(this._beginTimestamp=Date.now(),Object.assign(this._userInfo[s],n)),this._logger.warn("+++++++++++++++++++_notifyUserStateChange2++++++++++++++"),this._notifyUserStateChange(this._userInfo[t])})),this.getCallerId()===o&&this._notifyStateChange(e.RCCallSessionState.KEEPING),this._watchers.onAccept({userId:s})}_onMediaModify(e){const{senderUserId:t,content:{mediaType:s,user:n,deviceId:i}}=e;this._isRemoteInvalidMsg(t,i)?this._logger.debug("[RCCallStateMachine] _onMediaModify -> not the remote device that is currently talking"):this._context.getCurrentId()!==t&&(this._mediaType=s,this._watchers.onMediaModify({sender:Object.assign({userId:t},n),mediaType:s}))}_onHungup(t){const{senderUserId:s,content:n}=t,{reason:i,user:a,deviceId:r}=n,o=this._context.getCurrentId();if(this._logger.warn("+++++++++++++++++++_notifyUserStateChange3++++++++++++++"),this._isRemoteInvalidMsg(s,r))return void this._logger.debug("[RCCallStateMachine] _onHungup -> not the remote device that is currently talking");if(o===s)return void this._otherClientHandle(t);if(this._sessionState===e.RCCallSessionState.END)return void this._logger.info(`[RCCallStateMachine] Invalid hang up message, current room status has ended -> sessionState: ${this._sessionState}`);this._userInfo[s]&&(this._userInfo[s].state=e.RCCallUserState.NONE,this._endTimestamp=Date.now(),Object.assign(this._userInfo[s],a),this._logger.warn("+++++++++++++++++++_notifyUserStateChange3++++++++++++++"),this._notifyUserStateChange(this._userInfo[s],h[i]),delete this._userInfo[s]),h[i]===e.RCCallEndReason.REMOTE_CANCEL?this.getRemoteUserIds().length<1&&this._clearTimerById(o):this.getInviterId()===o?this._clearTimerById(s):this.getRemoteUserIds().length<1&&this._clearTimerById(o);const l=Object.keys(this._userInfo).length<2,_=this._inviterId===s,d=Object.values(this._userInfo).every((t=>t.state!==e.RCCallUserState.KEEPING));(l||_&&d)&&this._notifyStateChange(e.RCCallSessionState.END,h[i]),this._watchers.onHungup(Object.assign({userId:s},a),h[i])}registerEventListener(e){this._watchers=e}__onInvite(t){const{senderUserId:s,content:n,sentTime:i}=t,{inviteUserIds:a,user:r,deviceId:o}=n,l=this._context.getCurrentId();if(this._isRemoteInvalidMsg(s,o))return void this._logger.debug("[RCCallStateMachine] __onInvite -> not the remote device that is currently talking");if(l===s)return;this._callerId=this._inviterId=s;const _=[s,...a];this._callMsgHandler.sendRinging({conversationType:this._conversationType,targetId:this._targetId,channelId:this._channelId,callId:this._callId,userIds:_.filter((e=>e!==l))}),_.forEach((t=>{this._userInfo[t]={userId:t,state:e.RCCallUserState.WAITING,isCaller:t===s,isRemote:t!==l},t===s&&Object.assign(this._userInfo[t],r,{deviceId:o}),this._logger.warn("+++++++++++++++++++_notifyUserStateChange4++++++++++++++"),this._notifyUserStateChange(this._userInfo[t]),t!==s&&(this._userTimers[t]=new I((()=>{const s=t===l?e.RCCallEndReason.NO_RESPONSE:e.RCCallEndReason.REMOTE_NO_RESPONSE;t===l?this._hungupHandle(s):(this._userInfo[t]&&(this._userInfo[t].state=e.RCCallUserState.NONE),this._logger.warn("+++++++++++++++++++_notifyUserStateChange5++++++++++++++"),this._notifyUserStateChange(this._userInfo[t]),this._watchers.onHungup(this._userInfo[t],s),delete this._userInfo[t])}),this._getTimeout(i)))})),this._notifyStateChange(e.RCCallSessionState.WAITING)}__onMemberModify(t){this._logger.info("--------------------------__onMemberModify_33__message--------------------------------",t);const{senderUserId:s,content:n,sentTime:i}=t;this._logger.info("--------------------------content--------------------------------",n);const{user:a,existedUserPofiles:r,caller:l,deviceId:_,inviteUserIds:h,mediaType:d}=n,C=this._context.getCurrentId();if(this._logger.info("--------------------------本地deviceId--------------------------------",this._userInfo[s]),this._logger.info("--------------------------远端deviceId--------------------------------",_),this._isRemoteInvalidMsg(s,_))return void this._logger.debug("[RCCallStateMachine] __onMemberModify -> not the remote device that is currently talking");if(this._logger.warn("--------------------------正在通话中，远端多端发的消息直接过滤未生效--------------------------------"),C===s)return;this._logger.warn("--------------------------多端处理未生效--------------------------------"),this._callerId=l,this._inviterId=s,h.forEach((e=>{r.push({userId:e,mediaType:d,callStatus:o.INCOMING})}));if(h.includes(C)){const t=[];r.forEach((e=>{e.userId!==C&&t.push(e.userId)})),this._callMsgHandler.sendRinging({conversationType:this._conversationType,targetId:this._targetId,channelId:this._channelId,callId:this._callId,userIds:t}),this._notifyStateChange(e.RCCallSessionState.WAITING)}else this._watchers.onMemberModify({sender:Object.assign({userId:s},a),invitedUsers:h.map((e=>({userId:e})))});r.forEach((t=>{const{userId:n,callStatus:r}=t;r!==o.IDLE&&(this._userInfo[n]={userId:n,state:r!==o.CONNECTED?e.RCCallUserState.WAITING:e.RCCallUserState.KEEPING,isCaller:s===n,isRemote:C===n},n===s&&Object.assign(this._userInfo[n],a,{deviceId:_}),this._logger.warn("+++++++++++++++++++_notifyUserStateChange6++++++++++++++"),this._notifyUserStateChange(this._userInfo[n]),r!==o.CONNECTED&&(this._userTimers[n]=new I((()=>{this._userInfo[n]&&(this._userInfo[n].state=e.RCCallUserState.NONE);const t=n===C?e.RCCallEndReason.NO_RESPONSE:e.RCCallEndReason.REMOTE_NO_RESPONSE;this._logger.warn("+++++++++++++++++++_notifyUserStateChange7++++++++++++++"),this._notifyUserStateChange(this._userInfo[n],t);try{this._watchers.onHungup(this._userInfo[n],t)}catch(e){this._logger.warn("+++++++++++++++++++解决本地用户列表置空报错处理++++++++++++++",this._userInfo)}delete this._userInfo[n],(Object.keys(this._userInfo).length<2||n===C)&&this._notifyStateChange(e.RCCallSessionState.END,t)}),this._getTimeout(i))))}))}__handleInviteInSession(){this._logger.info("StateMachine -> __handleInviteInSession");for(const t in this._userInfo)this._userInfo[t].state&&(this._userInfo[t].state=e.RCCallUserState.NONE),this._logger.warn("+++++++++++++++++++_notifyUserStateChange8++++++++++++++"),this._notifyUserStateChange(this._userInfo[t]),this._clearTimerById(t);this._notifyStateChange(e.RCCallSessionState.END,e.RCCallEndReason.BUSY_LINE),this._callMsgHandler.sendHungup({channelId:this._channelId,conversationType:this._conversationType,targetId:this._targetId,callId:this._callId,reason:e.RCCallEndReason.BUSY_LINE,userIds:this.getRemoteUserIds()})}__call(t,n="",i="",a=""){return s(this,void 0,void 0,(function*(){this._logger.debug(`[RCCallStateMachine] invite -> userIds: ${JSON.stringify(t)}`);const s=this._callerId=this._inviterId=this._context.getCurrentId(),{code:r,message:o}=yield this._callMsgHandler.sendInvite({channelId:this._channelId,conversationType:this._conversationType,targetId:this._targetId,callId:this._callId,extra:n,pushTitle:i,pushContent:a,mediaType:this._mediaType,inviteUserIds:t.filter((e=>e!==s))});if(r===e.RCCallErrorCode.SUCCESS){const{sentTime:n}=o;[s,...t].forEach((t=>{const i=t===s;this._userInfo[t]={userId:t,state:e.RCCallUserState.WAITING,isCaller:i,isRemote:!i},this._logger.warn("+++++++++++++++++++_notifyUserStateChange9++++++++++++++"),this._notifyUserStateChange(this._userInfo[t]),i||(this._userTimers[t]=new I((()=>{this._userInfo[t]&&(this._userInfo[t].state=e.RCCallUserState.NONE),this._logger.warn("+++++++++++++++++++_notifyUserStateChange10++++++++++++++"),this._notifyUserStateChange(this._userInfo[t],e.RCCallEndReason.REMOTE_NO_RESPONSE),this._watchers.onHungup(this._userInfo[t],e.RCCallEndReason.REMOTE_NO_RESPONSE),delete this._userInfo[t],Object.keys(this._userInfo).length<2&&this._notifyStateChange(e.RCCallSessionState.END,e.RCCallEndReason.REMOTE_NO_RESPONSE);0===this.getRemoteUserIds().length&&this._userInfo[s].state!==e.RCCallUserState.KEEPING&&this._hungupHandle(e.RCCallEndReason.REMOTE_NO_RESPONSE)}),this._getTimeout(n)))})),this._notifyStateChange(e.RCCallSessionState.WAITING)}else{const t=r===e.RCCallErrorCode.REJECTED_BY_BLACKLIST?e.RCCallEndReason.ADDED_TO_BLACKLIST:e.RCCallEndReason.NETWORK_ERROR;this._notifyStateChange(e.RCCallSessionState.END,t)}return{code:r}}))}accept(){return s(this,void 0,void 0,(function*(){this._logger.debug("[RCCallStateMachine] accept"),this._logger.warn("+++++++++++++++++++=accept+++++++++++++++++++++++ -> not");const t=this._context.getCurrentId(),{code:s,message:n}=yield this._callMsgHandler.sendAccept({channelId:this._channelId,conversationType:this._conversationType,targetId:this._targetId,callId:this._callId,mediaType:this._mediaType,userIds:this.getRemoteUserIds()});if(this._clearTimerById(t),s===e.RCCallErrorCode.SUCCESS)this._userInfo[t]&&(this._userInfo[t].state=e.RCCallUserState.KEEPING),this._beginTimestamp=Date.now(),this._logger.warn("+++++++++++++++++++_notifyUserStateChange11++++++++++++++"),this._notifyUserStateChange(this._userInfo[t]),this._notifyStateChange(e.RCCallSessionState.KEEPING);else{this._userInfo[t]&&(this._userInfo[t].state=e.RCCallUserState.NONE),this._logger.warn("+++++++++++++++++++_notifyUserStateChange12++++++++++++++"),this._notifyUserStateChange(this._userInfo[t]);const n=s===e.RCCallErrorCode.REJECTED_BY_BLACKLIST?e.RCCallEndReason.ADDED_TO_BLACKLIST:e.RCCallEndReason.NETWORK_ERROR;this._notifyStateChange(e.RCCallSessionState.END,n)}return{code:s}}))}invite(n,i={}){return s(this,void 0,void 0,(function*(){if(this._logger.warn("----------------------------------------------------------群呼叫中继续邀请"),this._conversationType!==t.ConversationType.GROUP)return{code:e.RCCallErrorCode.CONVERSATION_NOT_GROUP_ERROR};this._logger.debug(`[RCCallStateMachine] invite -> userIds: ${JSON.stringify(n)}`);const s=this._context.getCurrentId(),a=Object.keys(this._userInfo),r=a.map((t=>{let s=o.CONNECTED;return(n.includes(t)||this._userInfo[t].state===e.RCCallUserState.WAITING)&&(s=o.RINGING),{userId:t,mediaType:this._mediaType,callStatus:s,mediaId:t}})),l=i.extra||"",_=i.pushTitle||"",h=i.pushContent||"",{code:d,message:C}=yield this._callMsgHandler.sendMemeberModify({channelId:this._channelId,conversationType:this._conversationType,targetId:this._targetId,callId:this._callId,extra:l,pushTitle:_,pushContent:h,mediaType:this._mediaType,inviteUserIds:n.filter((e=>e!==s)),callerId:this.getCallerId(),existedUserPofiles:r,directionalUserIdList:[...a,...n].filter((e=>e!==s))});if(d===e.RCCallErrorCode.SUCCESS){const{sentTime:t}=C;n.forEach((s=>{this._userInfo[s]={userId:s,state:e.RCCallUserState.WAITING,isCaller:!1,isRemote:!0},this._logger.warn("+++++++++++++++++++_notifyUserStateChange13++++++++++++++"),this._notifyUserStateChange(this._userInfo[s]),this._userTimers[s]=new I((()=>{this._userInfo[s]&&(this._userInfo[s].state=e.RCCallUserState.NONE),this._logger.warn("+++++++++++++++++++_notifyUserStateChange14++++++++++++++"),this._notifyUserStateChange(this._userInfo[s],e.RCCallEndReason.REMOTE_NO_RESPONSE),this._watchers.onHungup(this._userInfo[s],e.RCCallEndReason.REMOTE_NO_RESPONSE),delete this._userInfo[s],Object.keys(this._userInfo).length<2&&this._notifyStateChange(e.RCCallSessionState.END,e.RCCallEndReason.REMOTE_NO_RESPONSE)}),this._getTimeout(t))}))}else n.forEach((t=>{this._userInfo[t]={userId:t,state:e.RCCallUserState.NONE,isCaller:!1,isRemote:!0};const s=d===e.RCCallErrorCode.REJECTED_BY_BLACKLIST?e.RCCallEndReason.ADDED_TO_BLACKLIST:e.RCCallEndReason.NETWORK_ERROR;this._logger.warn("+++++++++++++++++++_notifyUserStateChange15++++++++++++++"),this._notifyUserStateChange(this._userInfo[t],s)}));return{code:d}}))}_hungupHandle(t){return s(this,void 0,void 0,(function*(){const s=this._context.getCurrentId();this._logger.warn("+++++++++++++++++++=_hungupHandle+++++++++++++++++++++++ ->",this.getRemoteUserIds());let n=e.RCCallErrorCode.SUCCESS;const i={channelId:this._channelId,conversationType:this._conversationType,targetId:this._targetId,callId:this._callId,reason:t,userIds:this.getRemoteUserIds()};if(t===e.RCCallEndReason.OTHER_CLIENT_JOINED_CALL)this._callMsgHandler.sendHungup(i);else{const{code:e}=yield this._callMsgHandler.sendHungup(i);n=e}this._endTimestamp=Date.now();for(const n in this._userInfo)this._userInfo[n].state=e.RCCallUserState.NONE,n===s?(this._logger.warn("+++++++++++++++++++_notifyUserStateChange16++++++++++++++"),this._notifyUserStateChange(this._userInfo[n],t)):(this._logger.warn("+++++++++++++++++++_notifyUserStateChange17++++++++++++++"),this._notifyUserStateChange(this._userInfo[n])),delete this._userInfo[n];return Object.keys(this._userInfo).length<2&&this._notifyStateChange(e.RCCallSessionState.END,t),{code:n}}))}hungup(){return s(this,void 0,void 0,(function*(){this._logger.debug("[RCCallStateMachine] hungup");const t=this._context.getCurrentId();let s=e.RCCallEndReason.HANGUP;Object.keys(this._userTimers).length>0&&(s=this._userInfo[t].isCaller?e.RCCallEndReason.CANCEL:e.RCCallEndReason.REJECT);for(const e in this._userTimers)this._clearTimerById(e);return this._hungupHandle(s)}))}changeMediaType(t){return s(this,void 0,void 0,(function*(){this._logger.debug(`[RCCallStateMachine] changeMediaType -> mediaType: ${t}`);const{code:s}=yield this._callMsgHandler.sendMediaModify({channelId:this._channelId,conversationType:this._conversationType,targetId:this._targetId,callId:this._callId,mediaType:t,userIds:this.getRemoteUserIds()});return s===e.RCCallErrorCode.SUCCESS&&(this._mediaType=t),{code:s}}))}userJoin(t){this._logger.debug(`[RCCallStateMachine] userJoin -> userIds: ${JSON.stringify(t)}`),setTimeout((()=>{t.forEach((t=>{const s=this._userInfo[t];s&&s.state!==e.RCCallUserState.KEEPING&&(s.state=e.RCCallUserState.KEEPING,this._logger.warn("+++++++++++++++++++_notifyUserStateChange18++++++++++++++"),this._notifyUserStateChange(s)),this._sessionState!==e.RCCallSessionState.KEEPING&&this._notifyStateChange(e.RCCallSessionState.KEEPING),this._clearTimerById(t)}))}),300)}userLeave(t){this._logger.debug(`[RCCallStateMachine] userLeave -> userIds: ${JSON.stringify(t)}`),setTimeout((()=>{t.forEach((t=>{const s=this._userInfo[t];s&&s.state!==e.RCCallUserState.NONE&&(s.state=e.RCCallUserState.NONE,this._logger.warn("+++++++++++++++++++_notifyUserStateChange19++++++++++++++"),this._notifyUserStateChange(s,e.RCCallEndReason.REMOTE_HANGUP),this._watchers.onHungup(s,e.RCCallEndReason.REMOTE_HANGUP),delete this._userInfo[t]),new I((()=>{const t=this.getRemoteUsers();1===t.length&&1===t[0].state&&this._hungupHandle(e.RCCallEndReason.REMOTE_NETWORK_ERROR)}),6e4),Object.keys(this._userInfo).length<2&&this._sessionState!==e.RCCallSessionState.END&&(this._endTimestamp=Date.now(),this._notifyStateChange(e.RCCallSessionState.END,e.RCCallEndReason.REMOTE_HANGUP))}))}),300)}close(e){this._hungupHandle(e)}getCallId(){return this._callId}getChannelId(){return this._channelId}getTargetId(){return this._targetId}getConversationType(){return this._conversationType}getRemoteUserIds(){return Object.keys(this._userInfo).filter((e=>this._context.getCurrentId()!==e))}getRemoteUsers(){const e=[],t=this._context.getCurrentId();for(const s in this._userInfo){const{userId:n}=this._userInfo[s];n!==t&&e.push(this._userInfo[s])}return e}getState(){return null===this._sessionState?e.RCCallSessionState.END:this._sessionState}getUserState(e){var t;return null===(t=this._userInfo[e])||void 0===t?void 0:t.state}getCallerId(){return this._callerId}getInviterId(){return this._inviterId}getMediaType(){return this._mediaType}getSummary(){const e=this._beginTimestamp,t=this._endTimestamp;let s=0;t>e&&0!==e&&(s=t-e);const n={conversationType:this._conversationType,channelId:this._channelId,targetId:this._targetId,mediaType:this._mediaType,beginTimestamp:e,endTimestamp:t,duration:s,endReason:this._endReason};return this._logger.debug(`[RCCallStateMachine] getSummary -> summary: ${JSON.stringify(n)}`),n}}e.RCCallMediaType=void 0,(R=e.RCCallMediaType||(e.RCCallMediaType={}))[R.AUDIO=1]="AUDIO",R[R.AUDIO_VIDEO=2]="AUDIO_VIDEO",function(e){e[e.ADD=1]="ADD",e[e.REMOVE=2]="REMOVE"}(c||(c={})),function(e){e.WEB="Web",e.IOS="iOS",e.ANDROID="Android"}(g||(g={}));class T{constructor(e,t,s){this._context=e,this._logger=t,this._onRecord=s,this._messages=[],this._beginTimestamp=0,this._endTimestamp=0}_doInvite(t){this._context.getCurrentId();const{channelId:s,conversationType:n,targetId:i,senderUserId:a,content:r}=t,{callId:o,mediaType:l}=r;this._channelId=s,this._conversationType=n,this._targetId=i,this._callId=o,this._mediaType=l;this._inviterId=a,this._endReason=e.RCCallEndReason.REMOTE_NO_RESPONSE,this._canGenRecord()}_doMemberModify(e){this._doInvite(e)}_doRinging(e){this._canGenRecord()}_doAccept(t){this._endReason=e.RCCallEndReason.HANGUP,this._beginTimestamp=t.sentTime,this._canGenRecord()}_doHungup(e){const{content:t,sentTime:s,senderUserId:n}=e,{reason:i}=t,a=n===this._context.getCurrentId();this._endReason=a?i:h[i],this._endTimestamp=s,this._canGenRecord()}_doMediaModify(e){const{content:t}=e,{mediaType:s}=t;this._mediaType=s,this._canGenRecord()}_canGenRecord(){if(0===this._messages.length){let t=0;[e.RCCallEndReason.HANGUP,e.RCCallEndReason.REMOTE_HANGUP,e.RCCallEndReason.OTHER_CLIENT_JOINED_CALL,e.RCCallEndReason.REMOTE_OTHER_CLIENT_JOINED_CALL,e.RCCallEndReason.KICKED_BY_SERVER,e.RCCallEndReason.REMOTE_KICKED_BY_SERVER,e.RCCallEndReason.ACCEPT_SYSTEM_CALL,e.RCCallEndReason.REMOTE_ACCEPT_SYSTEM_CALL].includes(this._endReason)&&(t=this._endTimestamp-this._beginTimestamp),this._onRecord({channelId:this._channelId,conversationType:this._conversationType,targetId:this._targetId,callId:this._callId,inviterId:this._inviterId,mediaType:this._mediaType,endReason:this._endReason,beginTimestamp:this._beginTimestamp,endTimestamp:this._endTimestamp,duration:t})}}onRecvOfflineMsgs(e){this._messages=e;do{const e=this._messages.shift(),{messageType:t,content:{callId:s}}=e;switch(t){case d.VCInvite:this._doInvite(e);break;case d.VCRinging:this._doRinging(e);break;case d.VCAccept:this._doAccept(e);break;case d.VCModifyMem:this._doMemberModify(e);break;case d.VCModifyMedia:this._doMediaModify(e);break;case d.VCHangup:this._doHungup(e);break;default:this._logger.debug(`[OfflineRecorder] onRecvOfflineMsgs -> unexpected message: ${JSON.stringify(e)}`)}}while(this._messages.length>0)}}const f=["RC:VCAccept","RC:VCRinging","RC:VCSummary","RC:VCHangup","RC:VCInvite","RC:VCModifyMedia","RC:VCModifyMem"],S={[t.ErrorCode.REJECTED_BY_BLACKLIST]:e.RCCallErrorCode.REJECTED_BY_BLACKLIST,[t.ErrorCode.NOT_IN_GROUP]:e.RCCallErrorCode.NOT_IN_GROUP};class O extends t.EventEmitter{constructor(e,t,s,n=6e4,i){super(),this._context=e,this._runtime=t,this._logger=s,this._offlineMsgItv=n,this._getStateMachine=i,this._watchers={},this._userInfo={},this._msgBufferList=[],this._hadHandleMsgTimer=!1,this._deviceId="",this._deviceId=r(t),this._context.onmessage=this._onMessage.bind(this),this._offlineRecorder=new T(this._context,this._logger,(e=>{this._logger.info(`[CallMessageHandler] offlineRecorder -> ${JSON.stringify(e)}`),this._watchers.onOfflineRecord&&this._watchers.onOfflineRecord(e)}))}_onMessage(e){if(f.includes(e.messageType)){this._logger.debug(`[CallMessageHandler] _onMessage -> call message: ${JSON.stringify(e)}`);try{const t=Date.now(),{sentTime:s}=e;let n=0;this._msgBufferList.forEach((({msg:{sentTime:e}},t)=>{s>=e&&(n=t+1)})),this._msgBufferList.splice(n,0,{markTime:t,msg:e}),this._logger.warn(`onMessage -> msgBufferList: ${this._msgBufferList.length}`)}catch(e){this._logger.error(`[CallMessageHandler] splice buffer msg error -> ${e.message}`)}return this._handleBufferMsgs(),!0}return!1}_onRecvOnlineCallMsg(e){this._logger.info(`onMessage -> _onRecvOnlineCallMsg: ${e.messageType}`);const{content:{callId:t}}=e;switch(e.messageType){case d.VCInvite:this._watchers.onInvite&&this._watchers.onInvite(e);break;case d.VCRinging:super.emit(t+"onRinging",e);break;case d.VCAccept:super.emit(t+"onAccept",e);break;case d.VCModifyMem:this._watchers.onInvite&&this._watchers.onInvite(e);break;case d.VCModifyMedia:super.emit(t+"onMediaModify",e);break;case d.VCHangup:super.emit(t+"onHungup",e);break;default:this._logger.warn(`[CallMessageHandler] onRecvOnlineCallMsg -> unexpected message: ${JSON.stringify(e)}`)}}_handleBufferMsgs(){0===this._msgBufferList.length||this._hadHandleMsgTimer?this._logger.warn("_handleBufferMsgs return"):(this._hadHandleMsgTimer=!0,setTimeout((()=>{const e=Date.now(),s=this._msgBufferList.filter((t=>e-t.markTime>=200));if(this._logger.debug(`[CallMessageHandler] handleBufferMsgs -> lists over 200ms : ${JSON.stringify(s.map((({msg:{messageUId:e,isOffLineMessage:t,content:{callId:s}}})=>({messageUId:e,isOffLineMessage:t,callId:s}))))}`),0===s.length)return this._hadHandleMsgTimer=!1,void this._handleBufferMsgs();if(s[0].msg.isOffLineMessage){let e=this._msgBufferList.filter((e=>e.msg.isOffLineMessage));do{const{conversationType:s,messageType:n,sentTime:i,senderUserId:a,content:{callId:r,inviteUserIds:o}}=e[0].msg,l=[d.VCInvite,d.VCModifyMem].includes(n),_=Date.now()-i<this._offlineMsgItv;if(l){const n=[];for(let t=0;t<e.length;t++){const s=e[t].msg,{content:{callId:i}}=s;if(r!==i)break;n.push(s)}if(this._logger.warn(`taskMsgList length: ${n.length}`),n.length>0){const t=this._msgBufferList.findIndex((e=>e.msg.messageUId===n[n.length-1].messageUId));this._msgBufferList=this._msgBufferList.slice(t+1);const s=e.findIndex((e=>e.msg.messageUId===n[n.length-1].messageUId));e=e.slice(s+1)}const i=(()=>{if(s!==t.ConversationType.PRIVATE)return!1;const e=1===n.length,i=n.every((e=>[d.VCInvite,d.VCModifyMedia,d.VCRinging].includes(e.messageType)));return e||i})(),l=(()=>{if(s!==t.ConversationType.GROUP)return!1;let e=!1,i=!0,r=[a,...o],l=!1;for(let e=0;e<n.length;e++){const{senderUserId:t,messageType:s}=n[e];if(s===d.VCHangup&&t===this._context.getCurrentId())break;s===d.VCHangup&&(l=a===t,r=r.filter((e=>t!==e))),s===d.VCAccept&&(i=!1)}return i&&l||!(r.length>1)||(e=!0),e})();_&&(i||l)&&n.forEach(this._onRecvOnlineCallMsg,this),this._offlineRecorder.onRecvOfflineMsgs(n)}else _&&this._getStateMachine(r)?this._onRecvOnlineCallMsg(e[0].msg):this._logger.debug(`[CallMessageHandler] unexcepted offline msg -> ${JSON.stringify(e[0].msg)}`),e.shift(),this._msgBufferList.shift()}while(e.length>0)}else{s.forEach((({msg:e})=>{this._onRecvOnlineCallMsg(e)}));const e=s.length;this._msgBufferList.splice(0,e),this._logger.debug(`timer online msg handle -> delCount: ${e} msgBufferList: ${this._msgBufferList.length}`)}this._hadHandleMsgTimer=!1,this._handleBufferMsgs()}),20))}registerEventListener(e){Object.assign(this._watchers,e)}registerStateMachineEvent(e,t,s){const n=e+t;super.on(n,s)}unregisterStateMachineEvent(e){["onRinging","onAccept","onHungup","onMediaModify"].forEach((t=>{const s=e+t;super.removeAll(s)}))}registerUserInfo(e){this._userInfo=e}_sendCallMessage(n){return s(this,void 0,void 0,(function*(){this._logger.debug(`CallMessageHandler] sendCallMesage -> message: ${JSON.stringify(n)}`);const{channelId:s,conversationType:i,targetId:a,content:r,messageType:o,directionalUserIdList:l,pushTitle:_,pushData:h,pushContent:C}=n,E={channelId:s,messageType:o,content:r,directionalUserIdList:l};let R={};[d.VCInvite,d.VCModifyMem].includes(o)&&(R={pushTitle:_||"",pushContent:C||"",pushData:h},Object.assign(E,{pushConfig:R}));const{code:c,data:g}=yield this._context.sendMessage(i,a,E);return c!==t.ErrorCode.SUCCESS?(this._logger.error(`CallMessageHandler] sendCallMesage error -> code: ${c}`),{code:S[c]||e.RCCallErrorCode.SEND_MSG_ERROR}):{code:e.RCCallErrorCode.SUCCESS,message:g}}))}sendInvite(e){return s(this,void 0,void 0,(function*(){const{channelId:s,conversationType:n,targetId:i,callId:a,mediaType:r,inviteUserIds:o,extra:l,pushTitle:_,pushContent:h}=e;this._watchers.sendAccept&&this._watchers.sendAccept({callId:a});const C={platform:g.WEB,deviceId:this._deviceId,callId:a,extra:l,engineType:4,channelInfo:{Id:a,Key:""},mediaType:r,inviteUserIds:o,observerUserIds:[],user:this._userInfo};return this._sendCallMessage({channelId:s,conversationType:n,targetId:i,content:C,messageType:d.VCInvite,directionalUserIdList:n===t.ConversationType.GROUP?o:[i],pushTitle:_,pushContent:h,pushData:JSON.stringify({mediaType:r,userIdList:o,callId:a})})}))}sendMemeberModify(e){return s(this,void 0,void 0,(function*(){const{channelId:t,conversationType:s,targetId:n,callId:i,mediaType:a,inviteUserIds:r,callerId:o,existedUserPofiles:l,directionalUserIdList:_,extra:h,pushTitle:C,pushContent:E}=e,R={platform:g.WEB,deviceId:this._deviceId,callId:i,extra:h,engineType:4,channelInfo:{Id:i,Key:""},mediaType:a,inviteUserIds:r,observerUserIds:[],user:this._userInfo,caller:o,modifyMemType:c.ADD,existedUserPofiles:l};return this._sendCallMessage({channelId:t,conversationType:s,targetId:n,content:R,messageType:d.VCModifyMem,directionalUserIdList:_,pushTitle:C,pushContent:E,pushData:JSON.stringify({mediaType:a,userIdList:r,callId:i})})}))}sendRinging(e){const{channelId:t,conversationType:s,targetId:n,callId:i,userIds:a}=e,r={platform:g.WEB,deviceId:this._deviceId,callId:i,user:this._userInfo};return this._sendCallMessage({channelId:t,conversationType:s,targetId:n,content:r,messageType:d.VCRinging,directionalUserIdList:a})}sendAccept(e){const{channelId:t,conversationType:s,targetId:n,callId:i,mediaType:a,userIds:r}=e,o={platform:g.WEB,deviceId:this._deviceId,callId:i,mediaType:a,user:this._userInfo};return this._sendCallMessage({channelId:t,conversationType:s,targetId:n,content:o,messageType:d.VCAccept,directionalUserIdList:r})}sendHungup(e){const{channelId:t,conversationType:s,targetId:n,callId:i,reason:a,userIds:r}=e,o={platform:g.WEB,deviceId:this._deviceId,callId:i,reason:a,user:this._userInfo};return this._sendCallMessage({channelId:t,conversationType:s,targetId:n,content:o,messageType:d.VCHangup,pushData:JSON.stringify({callId:i,reason:a}),directionalUserIdList:r})}sendMediaModify(e){const{channelId:t,conversationType:s,targetId:n,callId:i,mediaType:a,userIds:r}=e,o={platform:g.WEB,deviceId:this._deviceId,callId:i,mediaType:a,user:this._userInfo};return this._sendCallMessage({channelId:t,conversationType:s,targetId:n,content:o,messageType:d.VCModifyMedia,directionalUserIdList:r})}}var m;e.RCCallLanguage=void 0,(m=e.RCCallLanguage||(e.RCCallLanguage={})).ZH="zh",m.EN="en";const M={PushTitle:{AUDIO:"You have a voice call",VIDEO:"You have a video call"}},N={PushTitle:{AUDIO:"您有一条音频通话",VIDEO:"您有一条视频通话"}};class y{static set(e){this._lang=e}static get(){return this._lang===e.RCCallLanguage.EN?M:N}}y._lang=e.RCCallLanguage.ZH,t.VersionManage.add("call-engine","5.0.8"),t.VersionManage.validEngine(">=4.5.2")||console.error(`The current engine version '${t.VersionManage.getInfo().engine}' error，call-engine required engine version at least '>=4.5.2'.`);e.RCCallEngine=class{constructor(e,t,s,n,i){this._context=e,this._runtime=t,this._logger=s,this._watchers=n,this._options=i,this._stateMachine={},this._logger.warn("RCCallEngine Version: 5.0.8 CommitId: 7410f8d948e1ddc77a2eae1722b62159b9822f0d"),r(t),this._callMsgHandler=new O(this._context,this._runtime,this._logger,this._options.offlineMsgItv,this._getStateMachine.bind(this)),this._callMsgHandler.registerEventListener({onInvite:this._onInvite.bind(this),sendAccept:this._handleSendAccept.bind(this),onOfflineRecord:this._watchers.onOfflineRecord}),a.on("onStateMachineClose",(e=>{delete this._stateMachine[e]})),y.set(i.lang)}_onInvite(e){const{channelId:t,conversationType:s,targetId:n,content:i,messageType:a,senderUserId:r,pushConfig:o}=e,{mediaType:l,callId:_,extra:h}=i;if(this._context.getCurrentId()===r)return;if(this._stateMachine[_])a===d.VCModifyMem&&this._stateMachine[_].__onMemberModify(e);else{this._stateMachine[_]=new u(this._context,this._runtime,this._logger,this._callMsgHandler,t,s,n,l,_),this._logger.info(`[RCCallEngine] RCCallStateMachine successfully created -> callId: ${_}`),a===d.VCInvite?this._stateMachine[_].__onInvite(e):a===d.VCModifyMem&&this._stateMachine[_].__onMemberModify(e),this._watchers.onInvite(this._stateMachine[_],h);Object.keys(this._stateMachine).filter((e=>_!==e)).length>0&&!this._options.isAllowAcceptNewCall&&this._stateMachine[_].__handleInviteInSession()}}_handleSendAccept(e){if(this._options.isAllowAcceptNewCall){const{callId:t}=e;for(const e in this._stateMachine)t!==e&&(this._stateMachine[e].hungup(),delete this._stateMachine[e])}}_getStateMachine(e){return this._stateMachine[e]}registerUserInfo(e){this._logger.debug(`[RCCallEngine] registerUserInfo -> userInfo: ${JSON.stringify(e)}`),this._callMsgHandler.registerUserInfo(e)}call(n,a,r,o="",l="",_=""){return s(this,void 0,void 0,(function*(){this._logger.debug(`[RCCallEngine] call -> args: ${JSON.stringify({channelId:n,targetId:a,mediaType:r,extra:o,pushTitle:l,pushContent:_})}`);const s=i();if(Object.keys(this._stateMachine).length>0)return{code:e.RCCallErrorCode.STATE_MACHINE_EXIT};this._stateMachine[s]=new u(this._context,this._runtime,this._logger,this._callMsgHandler,n,t.ConversationType.PRIVATE,a,r,s);const{code:h}=yield this._stateMachine[s].__call([a],o,l,_);return h===e.RCCallErrorCode.SUCCESS?{code:e.RCCallErrorCode.SUCCESS,stateMachine:this._stateMachine[s]}:{code:h}}))}callInGroup(n,a,r,o,l="",_="",h=""){return s(this,void 0,void 0,(function*(){this._logger.debug(`[RCCallEngine] callInGroup -> args: ${JSON.stringify({channelId:n,targetId:a,mediaType:r})}`);const s=i();if(Object.keys(this._stateMachine).length>0)return{code:e.RCCallErrorCode.STATE_MACHINE_EXIT};this._stateMachine[s]=new u(this._context,this._runtime,this._logger,this._callMsgHandler,n,t.ConversationType.GROUP,a,r,s);const{code:d}=yield this._stateMachine[s].__call(o,l,_,h);return d===e.RCCallErrorCode.SUCCESS?{code:e.RCCallErrorCode.SUCCESS,stateMachine:this._stateMachine[s]}:{code:d}}))}destroy(){this._logger.debug("[RCCallEngine] destroy"),this._stateMachine={}}},e.RCCallStateMachine=u,Object.defineProperty(e,"__esModule",{value:!0})}));
!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@rongcloud/plugin-call-engine"),require("@rongcloud/engine"),require("@rongcloud/plugin-rtc")):"function"==typeof define&&define.amd?define(["exports","@rongcloud/plugin-call-engine","@rongcloud/engine","@rongcloud/plugin-rtc"],o):o((e="undefined"!=typeof globalThis?globalThis:e||self).RCCall={},e.RCCallEngine,e.RCEngine,e.RCRTC)}(this,(function(e,o,t,i){"use strict";const s=new t.Logger("RCCall");
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function r(e,o,t,i){return new(t||(t=Promise))((function(s,r){function n(e){try{a(i.next(e))}catch(e){r(e)}}function l(e){try{a(i.throw(e))}catch(e){r(e)}}function a(e){var o;e.done?s(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(n,l)}a((i=i.apply(e,o||[])).next())}))}var n;!function(e){e[e.CALLER=1]="CALLER",e[e.CALLEE=2]="CALLEE"}(n||(n={}));var l=new class{constructor(){this.list={}}on(e,o){return(this.list[e]||(this.list[e]=[])).push(o),this}once(e,o){const t=i=>{this.off(e,t),o.call(this,i)};t.fun=o,this.on(e,t)}off(e,o){const t=this.list[e];if(!t)return!1;if(o){let e;for(let i=0,s=t.length;i<s;i++)if(e=t[i],e===o||e.fun===o){t.splice(i,1);break}}else t&&(t.length=0)}emit(e,o){const t=[...this.list[e]];if(!t||0===t.length)return!1;t.forEach((e=>{e.call(this,o)}))}};const a=e=>{if(!e)return{result:!1,msg:"Initialization missing parameter -> options"};if("object"!=typeof e)return{result:!1,msg:"Initialization options must be an object"};const i=Object.keys(e),s=[];return["rtcClient","onSession","onSessionClose"].forEach((e=>{i.includes(e)||s.push(e)})),s.length?{result:!1,msg:`Initialization missing parameter -> "${s.join(",")}"`}:"object"!=typeof e.rtcClient?{result:!1,msg:"Initialization 'rtcClient' parameter must be of type 'object'"}:"function"!=typeof e.onSession?{result:!1,msg:"Initialization 'onSession' parameter must be of type 'function'"}:"function"!=typeof e.onSessionClose?{result:!1,msg:"Initialization 'onSessionClose' parameter must be of type 'function'"}:void 0!==e.isAllowSubscribeRetry&&"boolean"!=typeof e.isAllowSubscribeRetry?{result:!1,msg:"Initialization 'isAllowSubscribeRetry' parameter must be of type 'boolean'"}:void 0!==e.isAllowPublishRetry&&"boolean"!=typeof e.isAllowPublishRetry?{result:!1,msg:"Initialization 'isAllowPublishRetry' parameter must be of type 'boolean'"}:void 0!==e.isOffCameraWhenVideoDisable&&"boolean"!=typeof e.isOffCameraWhenVideoDisable?{result:!1,msg:"Initialization 'isOffCameraWhenVideoDisable' parameter must be of type 'boolean'"}:void 0===e.joinType||(r=e.joinType,Object.values(t.RTCJoinType).includes(r))?void 0!==e.isAllowDemotionGetStream&&"boolean"!=typeof e.isAllowDemotionGetStream?{result:!1,msg:"Initialization 'isAllowDemotionGetStream' parameter must be of type 'boolean'"}:void 0===e.lang||function(e){return Object.values(o.RCCallLanguage).includes(e)}(e.lang)?void 0===e.logLevel||function(e){return Object.values(t.LogLevel).includes(e)}(e.logLevel)?void 0!==e.logStdout&&"function"!=typeof e.logStdout?{result:!1,msg:"Initialization 'logStdout' parameter must be of type 'function'"}:{result:!0}:{result:!1,msg:"Initialization 'logLevel' parameter must be of type correct type"}:{result:!1,msg:"Initialization 'lang' parameter must be of type correct type"}:{result:!1,msg:"Initialization 'joinType' parameter must be of type correct type"};var r},c=e=>{if(!e)return{result:!1,msg:"missing parameter -> listener"};if("object"!=typeof e)return{result:!1,msg:"listener must be an object"};const o=Object.keys(e),t=[];return["onRinging","onAccept","onHungup","onTrackReady"].forEach((e=>{o.includes(e)||t.push(e)})),t.length?{result:!1,msg:`missing parameter -> "${t.join(",")}"`}:"function"!=typeof e.onRinging?{result:!1,msg:"'onRinging' parameter must be of type 'function'"}:"function"!=typeof e.onAccept?{result:!1,msg:"'onAccept' parameter must be of type 'function'"}:"function"!=typeof e.onHungup?{result:!1,msg:"'onHungup' parameter must be of type 'function'"}:"function"!=typeof e.onTrackReady?{result:!1,msg:"'onTrackReady' parameter must be of type 'function'"}:{result:!0}},C=e=>e&&"string"==typeof e?{result:!0}:{result:!1,msg:"'targetId' parameter is required, must be of type 'string'"},d=e=>e===o.RCCallMediaType.AUDIO||e===o.RCCallMediaType.AUDIO_VIDEO?{result:!0}:{result:!1,msg:"'mediaType' parameter is required, must be of type 'RCCallMediaType'"},u=e=>"string"==typeof e?{result:!0}:{result:!1,msg:"'extra' parameter must be of type 'string'"},R=e=>"string"==typeof e?{result:!0}:{result:!1,msg:"'pushTitle' parameter must be of type 'string'"},h=e=>"string"==typeof e?{result:!0}:{result:!1,msg:"'pushContent' parameter must be of type 'string'"},_=e=>Array.isArray(e)&&e.length?e.every((e=>"string"==typeof e&&e.length>0))?{result:!0}:{result:!1,msg:"'userIds' parameter is required"}:{result:!1,msg:"'userIds' parameter is required, must be of type 'string[]'"};class p{constructor(e,o){this._timerId=0,this._startTime=0,e&&(this._timerId=((e,o)=>setTimeout(e,o))((()=>{e()}),o)),this._startTime=Date.now()}stop(){clearTimeout(this._timerId);const e=Date.now();let o=e-this._startTime;return 0===this._startTime&&(o=0),{startTime:this._startTime,endTime:e,duration:o}}reset(){this._startTime=0}}class g{constructor(e,t,i={}){this._stateMachine=e,this._rtcClient=t,this._options=i,this._listener=null,this._RETRYCOUNT=2,this.joinRoomTimer=null,this._stateMachine.registerEventListener({onUserStateChange:({user:e,reason:o})=>{s.info(`[RCCallSession onUserStateChange] userId->${null==e?void 0:e.userId} state->${null==e?void 0:e.state} reason->${o}`)},onStateChange:e=>r(this,void 0,void 0,(function*(){const{state:t,reason:i}=e;if(s.info(`[RCCallSession onStateChange] : state->${t} reason->${i}`),t===o.RCCallSessionState.KEEPING){const e=this._stateMachine.getCallId();s.info(`[RCCallSession onStateChange] roomId: ${e}`);try{yield this._joinRoom(e)}catch(t){this._exceptionClose(o.RCCallEndReason.NETWORK_ERROR),s.error(`[RCCallSession onStateChange] joinRoom throw exception roomId -> ${e}`),console.error(t)}}else if(t===o.RCCallSessionState.END){if(!this._room){this._options.localTracks&&this._destroyTracks(this._options.localTracks);const e=this._stateMachine.getSummary();return void l.emit("sessionClose",{session:this,summaryInfo:e})}this._options.localTracks&&this._destroyTracks(this._options.localTracks),s.info("[RCCallSession onStateChange] localTracks destroyed"),this._leaveRoom(),this._room=null}})),onRinging:e=>{s.info(`[RCCallSession onRinging]sender: sender.userId -> ${e.userId}`);try{this._listener.onRinging(e,this)}catch(e){s.error("[RCCallSession onRinging] method exception -> onRinging"),console.error(e)}},onAccept:e=>{s.info(`[RCCallSession onAccept]sender: sender.userId -> ${e.userId}`);try{this._listener.onAccept(e,this)}catch(e){s.error("[RCCallSession onAccept] method exception -> onAccept"),console.error(e)}},onHungup:(e,o)=>{s.info(`[RCCallSession onHungup]sender: sender.userId -> ${e.userId} reason->${o}`);try{this._listener.onHungup(e,o,this)}catch(e){s.error("[RCCallSession onHungup] method exception -> onHungup"),console.error(e)}},onMemberModify:({sender:e,invitedUsers:o})=>{s.info(`[RCCallSession onMemberModify] sender.userId -> ${e.userId}`);try{this._listener.onMemberModify(e,o,this)}catch(e){s.error("[RCCallSession onMemberModify] method exception -> onMemberModify"),console.error(e)}},onMediaModify:({sender:e,mediaType:t})=>{s.info(`[RCCallSession onMediaModify]sender: sender.userId -> ${e.userId} mediaType: ${t}`),t===o.RCCallMediaType.AUDIO&&this._setMediaTypeToAudio();try{this._listener.onMediaModify(e,t,this)}catch(e){s.error("[RCCallSession onMediaModify] method exception -> onMediaModify"),console.error(e)}}})}_joinRoom(e){return r(this,void 0,void 0,(function*(){try{const{code:t,userIds:r,room:n}=yield this._rtcClient.joinRTCRoom(e,this._options.joinType);if(t!==i.RCRTCCode.SUCCESS)return t===i.RCRTCCode.NOT_OPEN_VIDEO_AUDIO_SERVER&&this._exceptionClose(o.RCCallEndReason.SERVICE_NOT_OPENED),t===i.RCRTCCode.SIGNAL_JOIN_RTC_ROOM_REFUSED?this._exceptionClose(o.RCCallEndReason.OTHER_CLIENT_IN_CALL):this._exceptionClose(o.RCCallEndReason.NETWORK_ERROR),s.info(`[RCCallClient _joinRoom] join room failed: roomId -> ${e} RCRTCCode -> ${t}`),{code:o.RCCallErrorCode.JOIN_ROOM_ERROR};r.length<1&&(this.joinRoomTimer=new p((()=>{this._exceptionClose(o.RCCallEndReason.REMOTE_NETWORK_ERROR)}),6e4)),this._room=n}catch(t){return this._exceptionClose(o.RCCallEndReason.NETWORK_ERROR),s.error(`[RCCallSession _joinRoom] _rtcClient.joinRTCRoom throw exception roomId -> ${e}`),console.error(t),{code:o.RCCallErrorCode.JOIN_ROOM_ERROR}}this._registerRoomEventListener(),this._registerReportListener();try{yield this._subscribeInRoomRemoteTrack()}catch(t){return this._exceptionClose(o.RCCallEndReason.SUBSCRIBE_ERROR),s.error(`[RCCallSession _joinRoom] _subscribeInRoomRemoteTrack Exception roomId -> ${e}`),console.error(t),{code:o.RCCallErrorCode.JOIN_ROOM_ERROR}}try{yield this._publish()}catch(t){return this._exceptionClose(o.RCCallEndReason.PUBLISH_ERROR),s.error(`[RCCallSession _joinRoom] _publish Exception roomId -> ${e}`),console.error(t),{code:o.RCCallErrorCode.JOIN_ROOM_ERROR}}return{code:o.RCCallErrorCode.SUCCESS}}))}_subscribeInRoomRemoteTrack(){return r(this,void 0,void 0,(function*(){const e=this._room.getRemoteTracks();if(e.length){const{code:t}=yield this._subscribeRetry(e,this._options.isAllowSubscribeRetry,this._RETRYCOUNT);t!==i.RCRTCCode.SUCCESS&&(this._exceptionClose(o.RCCallEndReason.SUBSCRIBE_ERROR),s.error(`[RCCallSession _subscribeInRoomRemoteTrack] Resource subscription failed roomId -> ${this._stateMachine.getCallId()} RTC code -> ${t}`))}}))}_subscribeRetry(e,o=!1,t=0){return r(this,void 0,void 0,(function*(){const{code:r}=yield this._room.subscribe(e);if(r!==i.RCRTCCode.SUCCESS){try{this._listener.onTrackSubscribeFail&&this._listener.onTrackSubscribeFail(r,this)}catch(e){s.error("[RCCallSession] _listener.onTrackSubscribeFail exception"),console.error(e)}if(!o)return{code:r};if(t>0)return t--,this._subscribeRetry(e,o,t)}return{code:r}}))}_publish(){return r(this,void 0,void 0,(function*(){const e=this._options.localTracks,{code:t}=yield this._publishRetry(e,this._options.isAllowPublishRetry,this._RETRYCOUNT);if(t!==i.RCRTCCode.SUCCESS)return this._exceptionClose(o.RCCallEndReason.PUBLISH_ERROR),void s.info(`[RCCallSession _publist] Resource publishing failed: roomId -> ${this._stateMachine.getCallId()} RCRTCCode -> ${t}`);this._options.produceType===n.CALLEE&&this._notifyTrackReady(e)}))}_publishRetry(e,o=!1,t=0){return r(this,void 0,void 0,(function*(){const{code:r}=yield this._room.publish(e);if(r!==i.RCRTCCode.SUCCESS){try{this._listener.onTrackPublishFail&&this._listener.onTrackPublishFail(r,this)}catch(e){s.error("[RCCallSession] _listener.onTrackPublishFail exception"),console.error(e)}if(!o)return{code:r};if(t>0)return t--,this._publishRetry(e,o,t)}return{code:r}}))}_leaveRoom(){return r(this,void 0,void 0,(function*(){try{const{code:e}=yield this._rtcClient.leaveRoom(this._room);s.info("[RCCallSession _leaveRoom] Successfully exited the room")}catch(e){s.error("[RCCallSession _leaveRoom] leaveRoom throw exception"),console.error(e)}finally{const e=this._stateMachine.getSummary();l.emit("sessionClose",{session:this,summaryInfo:e})}}))}_exceptionClose(e){this._options.localTracks&&this._destroyTracks(this._options.localTracks),this._stateMachine.close(e)}registerSessionListener(e){const o=c(e);if(!o.result)throw new Error(`[RCCallSession registerSessionListener] ${o.msg}`);this._listener=Object.assign({},e)}_getLocalTrackCore(e,t){return r(this,void 0,void 0,(function*(){if(e===o.RCCallMediaType.AUDIO){const{code:e,track:r}=yield this._rtcClient.createMicrophoneAudioTrack("RongCloudRTC",t&&t.audio&&Object.assign({},t.audio));return e!==i.RCRTCCode.SUCCESS?(s.error(`[RCCallSession _getLocalTrackCore] get Audio local tracks failed RCT code -> ${e}`),{code:o.RCCallErrorCode.GET_LOCAL_AUDIO_TRACK_ERROR}):(s.info("[RCCallSession _getLocalTrackCore] successfully get Audio local tracks"),{code:o.RCCallErrorCode.SUCCESS,tracks:[r]})}{const{code:e,tracks:r}=yield this._rtcClient.createMicrophoneAndCameraTracks("RongCloudRTC",t&&Object.assign({},t));return e!==i.RCRTCCode.SUCCESS?(s.error(`[RCCallSession _getLocalTrackCore] get Audio and Video local tracks failed RCT code -> ${e}`),{code:o.RCCallErrorCode.GET_LOCAL_AUDIO_AND_VIDEO_TRACK_ERROR}):(s.info("[RCCallSession _getLocalTrackCore] successfully get audio and video local tracks"),{code:o.RCCallErrorCode.SUCCESS,tracks:r})}}))}_getLocalTrack(e,t){return r(this,void 0,void 0,(function*(){if(this._options.isAllowDemotionGetStream&&e===o.RCCallMediaType.AUDIO_VIDEO){const{code:e,tracks:i}=yield this._getLocalTrackCore(o.RCCallMediaType.AUDIO_VIDEO,t);if(e!==o.RCCallErrorCode.SUCCESS){const{code:e,tracks:i}=yield this._getLocalTrackCore(o.RCCallMediaType.AUDIO,t);return e!==o.RCCallErrorCode.SUCCESS?(this._exceptionClose(o.RCCallEndReason.GET_MEDIA_RESOURCES_ERROR),{code:e}):{code:e,tracks:i}}return{code:e,tracks:i}}{const{code:i,tracks:s}=yield this._getLocalTrackCore(e,t);return i!==o.RCCallErrorCode.SUCCESS?(this._exceptionClose(o.RCCallEndReason.GET_MEDIA_RESOURCES_ERROR),{code:i}):{code:i,tracks:s}}}))}changeAudioDevice(e){return r(this,void 0,void 0,(function*(){const t=[],r=[],{code:n,track:l}=yield this._rtcClient.createMicrophoneAudioTrack("RongCloudRTC",e);if(n!==i.RCRTCCode.SUCCESS)return s.error(`[RCCallSession changeDevice] get local Audio tracks failed RCTLib code -> ${n}`),{code:o.RCCallErrorCode.GET_LOCAL_AUDIO_TRACK_ERROR};if(this._options.localTracks&&this._options.localTracks.forEach((e=>{e.isAudioTrack()||r.push(e)})),t.push(l),r.push(l),this._options.localTracks=r,this._notifyTrackReady(t),this._room){const{code:e}=yield this._room.publish(t);if(e!==i.RCRTCCode.SUCCESS)return{code:o.RCCallErrorCode.AUDIO_PUBLISH_ERROR}}return{code:o.RCCallErrorCode.SUCCESS}}))}invite(e,o={}){return r(this,void 0,void 0,(function*(){const{extra:t="",pushTitle:i="",pushContent:s=""}=o,r=[_(e),u(t),R(i),h(s)],n=[];if(!r.every((e=>(!e.result&&n.push(e.msg),e.result))))throw new Error(`[RCCallClient invite] ${n.join("\n")}`);const{code:l}=yield this._stateMachine.invite(e,{extra:t,pushTitle:i,pushContent:s});return{code:l}}))}accept(e){return r(this,void 0,void 0,(function*(){const t=(e=>{return e&&e.audio&&void 0!==e.audio.micphoneId&&"string"!=typeof e.audio.micphoneId?{result:!1,msg:"'constraints.audio.micphoneId' must be of type 'string'"}:e&&e.audio&&void 0!==e.audio.sampleRate&&"number"!=typeof e.audio.sampleRate?{result:!1,msg:"'constraints.audio.sampleRate' must be of type 'number'"}:e&&e.video&&void 0!==e.video.cameraId&&"string"!=typeof e.video.cameraId?{result:!1,msg:"'constraints.video.cameraId' must be of type 'string'"}:e&&e.video&&void 0!==e.video.frameRate&&"string"!=typeof e.video.frameRate?{result:!1,msg:"'constraints.video.frameRate' must be of type 'string'"}:e&&e.video&&void 0!==e.video.frameRate&&(o=e.video.frameRate,!["FPS_10","FPS_15","FPS_24","FPS_30"].includes(o))?{result:!1,msg:"'frameRate' value is out of range"}:e&&e.video&&void 0!==e.video.resolution&&"string"!=typeof e.video.resolution?{result:!1,msg:"'constraints.video.frameRate' must be of type 'string'"}:e&&e.video&&void 0!==e.video.resolution&&!function(e){return["W176_H132","W176_H144","W256_H144","W320_H180","W240_H240","W320_H240","W480_H360","W640_H360","W480_H480","W640_H480","W720_H480","W1280_H720","W1920_H1080"].includes(e)}(e.video.resolution)?{result:!1,msg:"'resolution' value is out of range"}:!e||!e.video||e.video.frameRate&&e.video.resolution?{result:!0}:{result:!1,msg:"'resolution' and 'resolution' is required"};var o})(e);if(!t.result)throw new Error(`[RCCallSession accept] ${t.msg}`);l.emit("hungupOtherSession",{session:this});const i=this._stateMachine.getMediaType(),{code:r,tracks:n}=yield this._getLocalTrack(i,e);if(r!==o.RCCallErrorCode.SUCCESS)return{code:r};this._options.localTracks=n;const{code:a}=yield this._stateMachine.accept();return a!==o.RCCallErrorCode.SUCCESS?(s.error(`[RCCallSession accept]Send accept message failed -> code: ${a}`),{code:a}):{code:a}}))}hungup(){return r(this,void 0,void 0,(function*(){return this._stateMachine.hungup()}))}_changeMediaType(e){return r(this,void 0,void 0,(function*(){const{code:t}=yield this._stateMachine.changeMediaType(e);return t!==o.RCCallErrorCode.SUCCESS&&s.error(`[RCCallSession _changeMediaType] change media type fail code-> ${t}`),{code:t}}))}_getLocalVideoTracks(){let e=[];return this._room?(this._options.localTracks&&(e=this._options.localTracks.filter((e=>e.isVideoTrack()))),e):e}_getLocalAudioTracks(){let e=[];return this._room?(this._options.localTracks&&(e=this._options.localTracks.filter((e=>e.isAudioTrack()))),e):e}_setMediaTypeToAudioAndVideo(){return r(this,void 0,void 0,(function*(){const{code:e,track:t}=yield this._rtcClient.createCameraVideoTrack();if(e!==i.RCRTCCode.SUCCESS)return{code:o.RCCallErrorCode.GET_LOCAL_AUDIO_AND_VIDEO_TRACK_ERROR};const{code:r}=yield this._room.publish([t]);r===i.RCRTCCode.SUCCESS?(this._notifyTrackReady([t]),this._changeMediaType(o.RCCallMediaType.AUDIO_VIDEO)):s.error(`[RCCallSession _enableVideo] Resource publishing failed: RCRTCCode -> ${e}`)}))}_setMediaTypeToAudio(){return r(this,void 0,void 0,(function*(){const e=this._getLocalVideoTracks();if(e.length){e.forEach((e=>{e.mute()}));const{code:o}=yield this._room.unpublish(e);o!==i.RCRTCCode.SUCCESS&&s.error(`[RCCallSession disableVideo] unpublish failed -> ${o}`),this._destroyTracks(e)}}))}descendAbility(){return r(this,void 0,void 0,(function*(){const{code:e}=yield this._changeMediaType(o.RCCallMediaType.AUDIO);return e===o.RCCallErrorCode.SUCCESS&&this._setMediaTypeToAudio(),{code:e}}))}disableVideoTrack(){return r(this,void 0,void 0,(function*(){const e=this._getLocalVideoTracks();if(!e.length)return s.error(`[RCCallSession disableVideoTrack] Room missing video track -> ${o.RCCallErrorCode.MISSING_VIDEO_TRACK_ERROR}`),{code:o.RCCallErrorCode.MISSING_VIDEO_TRACK_ERROR};if(e.forEach((e=>{e.mute()})),!this._options.isOffCameraWhenVideoDisable)return{code:o.RCCallErrorCode.SUCCESS};const{code:t}=yield this._room.unpublish(e);return t!==i.RCRTCCode.SUCCESS?(s.error(`[RCCallSession disableVideo] unpublish failed -> ${t}`),{code:o.RCCallErrorCode.UNPUBLISH_VIDEO_ERROR}):(e.forEach((e=>{e.destroy()})),{code:o.RCCallErrorCode.SUCCESS})}))}enableVideoTrack(){return r(this,void 0,void 0,(function*(){if(!this._options.isOffCameraWhenVideoDisable){const e=this._getLocalVideoTracks();return e.length?(e.forEach((e=>{e.unmute()})),{code:o.RCCallErrorCode.SUCCESS}):(s.error(`[RCCallSession EnableVideoTrack] Room missing video track -> ${o.RCCallErrorCode.MISSING_VIDEO_TRACK_ERROR}`),{code:o.RCCallErrorCode.MISSING_VIDEO_TRACK_ERROR})}const{code:e,track:t}=yield this._rtcClient.createCameraVideoTrack();if(e!==i.RCRTCCode.SUCCESS)return s.error(`[RCCallSession EnableVideoTrack] Get Resource failed: RCRTCCode -> ${e}`),{code:o.RCCallErrorCode.GET_LOCAL_VIDEO_TRACK_ERROR};const r=[];this._options.localTracks&&this._options.localTracks.forEach((e=>{e.isVideoTrack()?e.destroy():r.push(e)})),r.push(t),this._options.localTracks=r,t.mute();const{code:n}=yield this._room.publish([t]);return n!==i.RCRTCCode.SUCCESS?(s.error(`[RCCallSession EnableVideoTrack] Resource publishing failed: RCRTCCode -> ${e}`),{code:o.RCCallErrorCode.VIDEO_PUBLISH_ERROR}):(t.unmute(),this._notifyTrackReady([t]),{code:o.RCCallErrorCode.SUCCESS})}))}disableAudioTrack(){return r(this,void 0,void 0,(function*(){this._getLocalAudioTracks().forEach((e=>{e.mute()}))}))}enableAudioTrack(){return r(this,void 0,void 0,(function*(){this._getLocalAudioTracks().forEach((e=>{e.unmute()}))}))}_destroyTracks(e){e.forEach((e=>{e.destroy()}))}_notifyTrackReady(e){e.forEach((e=>{try{this._listener.onTrackReady(e,this)}catch(e){s.error("[RCCallSession _notifyTrackReady] _listener onTrackReady exception"),console.error(e)}}))}_registerRoomEventListener(){this._room.registerRoomEventListener({onKickOff:(e,t)=>{const s=this._rtcClient.getCurrentId();this._stateMachine.userLeave([s]),e?(t===i.RCKickReason.SERVER_KICK&&this._exceptionClose(o.RCCallEndReason.KICKED_BY_SERVER),t===i.RCKickReason.OTHER_KICK&&this._exceptionClose(o.RCCallEndReason.OTHER_CLIENT_JOINED_CALL)):this._exceptionClose(o.RCCallEndReason.NETWORK_ERROR)},onMessageReceive(e,o,t,i){},onRoomAttributeChange(e,o){},onAudioMuteChange:e=>{s.info(`[RCCallSession onAudioMuteChange] userId->${e.getUserId()} muted -> ${e.isOwnerMuted()}`);const o={userId:e.getUserId(),muted:e.isOwnerMuted(),kind:"audio",trackId:e.getTrackId()};try{this._listener.onAudioMuteChange(o,this)}catch(e){s.error("[RCCallSession onAudioMuteChange] Missing listening method -> onTrackMuteChange"),console.error(e)}},onVideoMuteChange:e=>{s.info(`[RCCallSession onVideoMuteChange]userId->${e.getUserId()} muted -> ${e.isOwnerMuted()}`);const o={userId:e.getUserId(),muted:e.isOwnerMuted(),kind:"video",trackId:e.getTrackId()};try{this._listener.onVideoMuteChange(o,this)}catch(e){s.error("[RCCallSession onVideoMuteChange] Missing listening method -> onVideoMuteChange"),console.error(e)}},onTrackPublish:e=>r(this,void 0,void 0,(function*(){if(this._room){const{code:o}=yield this._room.subscribe(e);o!==i.RCRTCCode.SUCCESS&&s.error(`[RCCallSession onTrackPublish] subscribe failed RTCCode ->${o}`)}})),onTrackUnpublish:e=>{},onTrackReady:e=>{this._stateMachine.getMediaType()===o.RCCallMediaType.AUDIO&&e.isVideoTrack()||this._notifyTrackReady([e])},onUserJoin:e=>{this.joinRoomTimer&&this.joinRoomTimer.stop(),this._stateMachine.userJoin(e)},onUserLeave:e=>{s.info(`[RCCallSession onUserLeave] listening onUserLeave userIds -> ${null==e?void 0:e.join(",")}`),this._stateMachine.userLeave(e)},onPing:e=>{s.info(`[RCCallSession onPing]${e}`);try{this._listener.onPing&&this._listener.onPing(e,this)}catch(e){s.error("[RCCallSession onPing] listening onPing exception"),console.error(e)}}})}_registerReportListener(){this._room.registerReportListener({onStateReport:e=>{try{this._listener.onRTCStateReport&&this._listener.onRTCStateReport(e,this)}catch(e){s.error("[RCCallSession onStateReport] listener onStateReport exception"),console.error(e)}},onICEConnectionStateChange:e=>{try{this._listener.onICEConnectionStateChange&&this._listener.onICEConnectionStateChange(e,this)}catch(e){s.error("[RCCallSession onICEConnectionStateChange] onICEConnectionStateChange exception"),console.error(e)}}})}getSessionId(){return this._stateMachine.getCallId()}getRTCSessionId(){return this._room?this._room.getSessionId():null}getTargetId(){return this._stateMachine.getTargetId()}getConversationType(){return this._stateMachine.getConversationType()}getChannelId(){return this._stateMachine.getChannelId()}getRemoteUsers(){return this._stateMachine.getRemoteUsers()}getUsers(){return this._stateMachine.getRemoteUsers()}getUserState(e){if(!e||"string"!=typeof e)throw new Error("userId is required, must be of type 'string'");return this._stateMachine.getUserState(e)}getState(){return this._stateMachine.getState()}getCallerId(){return this._stateMachine.getCallerId()}getMediaType(){return this._stateMachine.getMediaType()}}t.VersionManage.add("plugin-call","5.0.10"),t.VersionManage.validEngine("^4.5.5-enterprise.1")||s.error(`The current engine version '${t.VersionManage.getInfo().engine}' error，plugin-call required engine version at least '^4.5.5-enterprise.1'.`);class f{constructor(e,i,r){this._context=e,this._runtime=i,this._sessionList=[],this._rtcClient=r.rtcClient,this._options=Object.assign({isAllowPublishRetry:!1,isAllowSubscribeRetry:!1,isOffCameraWhenVideoDisable:!0,joinType:t.RTCJoinType.COEXIST,isAllowDemotionGetStream:!1,lang:o.RCCallLanguage.ZH},r),this._callEngine=new o.RCCallEngine(this._context,i,s,{onInvite:this._onInvite.bind(this),onOfflineRecord:this._onOfflineRecord.bind(this)},{lang:this._options.lang||o.RCCallLanguage.ZH}),l.on("sessionClose",(({session:e,summaryInfo:o})=>{this._removeSession(e);try{this._options.onSessionClose(e,o)}catch(e){s.error("[RCCCallClient] options.onSessionClose exception"),console.log(e)}})),l.on("hungupOtherSession",(({session:e})=>{const o=e.getSessionId();s.info(`[RCCallClient hungupOtherSession] sessionId ready to accept -> ${o}`),s.info(`[RCCallClient hungupOtherSession] sessionList ->${this._sessionList.map((e=>e.getSessionId())).join(",")}`);let t=0;for(;this._sessionList.length>1;)this._sessionList[t].getSessionId()!==o?(this._sessionList[t].hungup(),this._sessionList.splice(t,1)):t++;s.info(`[RCCallClient hungupOtherSession] current sessionList length ->${this._sessionList.length}`)}))}_onInvite(e,o){s.info("[RCCallClient _onInvite] Received invite message");const t=new g(e,this._rtcClient,{isAllowSubscribeRetry:this._options.isAllowSubscribeRetry,isAllowPublishRetry:this._options.isAllowPublishRetry,isOffCameraWhenVideoDisable:this._options.isOffCameraWhenVideoDisable,joinType:this._options.joinType,isAllowDemotionGetStream:this._options.isAllowDemotionGetStream,produceType:n.CALLEE});s.info("[RCCallClient _onInvite] Received invite message, successfully created session"),this._sessionList.push(t);try{this._options.onSession(t,o)}catch(e){s.error("[RCCallClient _options.onSession] onSession exception"),console.log(e)}if(!t._listener)throw s.error("[RCCallClient _options.onSession] session Must Have Listener"),new Error("[RCCallSession  _options.onSession] session Must Have Listener");{const e=c(t._listener);if(!e.result)throw new Error(e.msg)}}_onOfflineRecord(e){try{this._options.onOfflineRecord&&this._options.onOfflineRecord(e)}catch(e){s.error("[RCCallClient _options.onOfflineRecord] onOfflineRecord exception"),console.log(e)}}registerUserInfo(e={}){this._callEngine.registerUserInfo(e),s.info("[RCCallClient registerUserInfo] successfully register user info data")}call({targetId:e,mediaType:t=o.RCCallMediaType.AUDIO,listener:i,constraints:l,channelId:a="",extra:_="",pushTitle:p="",pushContent:f="",bitrate:m}){return r(this,void 0,void 0,(function*(){s.info(`[RCCallClient call] extra->${_} pushTitle->${p} pushContent->${f}`);const r=[C(e),d(t),c(i),u(_),R(p),h(f)],S=[];if(!r.every((e=>(!e.result&&S.push(e.msg),e.result))))throw new Error(`[RCCallClient call] ${S.join("\n")}`);let y=[];const{code:T,tracks:E}=yield this._getLocalTrack(t,l);if(T!==o.RCCallErrorCode.SUCCESS)return{code:T};y=E,y.forEach((e=>{var o,t,s;e.isAudioTrack()&&(null==m?void 0:m.audio)&&e.setBitrate(null==m?void 0:m.audio),e.isVideoTrack()&&(null==m?void 0:m.video)&&e.setBitrate(null===(o=null==m?void 0:m.video)||void 0===o?void 0:o.max,null===(t=null==m?void 0:m.video)||void 0===t?void 0:t.min,null===(s=null==m?void 0:m.video)||void 0===s?void 0:s.start),i.onTrackReady(e)}));const{code:v,stateMachine:b}=yield this._callEngine.call(a,e,t,_,p,f);if(v===o.RCCallErrorCode.SUCCESS&&b){s.info("[RCCallClient call] successfully created state machine");const e=new g(b,this._rtcClient,{localTracks:y,isAllowSubscribeRetry:this._options.isAllowSubscribeRetry,isAllowPublishRetry:this._options.isAllowPublishRetry,isOffCameraWhenVideoDisable:this._options.isOffCameraWhenVideoDisable,joinType:this._options.joinType,isAllowDemotionGetStream:this._options.isAllowDemotionGetStream,produceType:n.CALLER});return e.registerSessionListener(i),this._sessionList.push(e),s.info(`[RCCallClient call] successfully created session object, sessionId: ${e.getSessionId()}`),{code:v,session:e}}return s.error(`[RCCallClient call] call failed code ->: ${v}`),y.forEach((e=>{e.mute(),e.destroy()})),{code:v}}))}callInGroup({targetId:e,userIds:t,mediaType:i=o.RCCallMediaType.AUDIO,listener:l,constraints:a,channelId:p="",extra:f="",pushTitle:m="",pushContent:S="",bitrate:y}){return r(this,void 0,void 0,(function*(){const r=[C(e),_(t),d(i),c(l),u(f),R(m),h(S)],T=[];if(!r.every((e=>(!e.result&&T.push(e.msg),e.result))))throw new Error(`[RCCallClient callInGroup] ${T.join("\n")}`);let E=[];const{code:v,tracks:b}=yield this._getLocalTrack(i,a);if(v!==o.RCCallErrorCode.SUCCESS)return{code:v};E=b,E.forEach((e=>{var o,t,i;e.isAudioTrack()&&(null==y?void 0:y.audio)&&e.setBitrate(null==y?void 0:y.audio),e.isVideoTrack()&&(null==y?void 0:y.video)&&e.setBitrate(null===(o=null==y?void 0:y.video)||void 0===o?void 0:o.max,null===(t=null==y?void 0:y.video)||void 0===t?void 0:t.min,null===(i=null==y?void 0:y.video)||void 0===i?void 0:i.start),l.onTrackReady(e)}));const{code:I,stateMachine:O}=yield this._callEngine.callInGroup(p,e,i,t,f,m,S);if(I===o.RCCallErrorCode.SUCCESS&&O){s.info("[RCCallClient callInGroup] successfully created state machine");const e=new g(O,this._rtcClient,{localTracks:E,isAllowSubscribeRetry:this._options.isAllowSubscribeRetry,isAllowPublishRetry:this._options.isAllowPublishRetry,isOffCameraWhenVideoDisable:this._options.isOffCameraWhenVideoDisable,joinType:this._options.joinType,isAllowDemotionGetStream:this._options.isAllowDemotionGetStream,produceType:n.CALLER});return e.registerSessionListener(l),this._sessionList.push(e),s.info(`[RCCallClient callInGroup] successfully created session object, sessionId: ${e.getSessionId()}`),{code:I,session:e}}return s.info(`[RCCallClient callInGroup] callInGroup failed code -> ${I}`),E.forEach((e=>{e.mute(),e.destroy()})),{code:I}}))}_getLocalTrackCore(e,t){return r(this,void 0,void 0,(function*(){if(e===o.RCCallMediaType.AUDIO){const{code:e,track:r}=yield this._rtcClient.createMicrophoneAudioTrack("RongCloudRTC",t&&t.audio&&Object.assign({},t.audio));return e!==i.RCRTCCode.SUCCESS?(s.error(`[RCCallClient _getTrack] get Audio local tracks failed RCT code -> ${e}`),{code:o.RCCallErrorCode.GET_LOCAL_AUDIO_TRACK_ERROR}):(s.info("[RCCallClient _getTrack] successfully get Audio local tracks"),{code:o.RCCallErrorCode.SUCCESS,tracks:[r]})}{const{code:e,tracks:r}=yield this._rtcClient.createMicrophoneAndCameraTracks("RongCloudRTC",t&&Object.assign({},t));return e!==i.RCRTCCode.SUCCESS?(s.error(`[RCCallClient _getTrack] get Audio and Video local tracks failed RCT code -> ${e}`),{code:o.RCCallErrorCode.GET_LOCAL_AUDIO_AND_VIDEO_TRACK_ERROR}):(s.info("[RCCallClient _getTrack] successfully get audio and video local tracks"),{code:o.RCCallErrorCode.SUCCESS,tracks:r})}}))}_getLocalTrack(e,t){return r(this,void 0,void 0,(function*(){if(this._options.isAllowDemotionGetStream&&e===o.RCCallMediaType.AUDIO_VIDEO){const{code:e,tracks:i}=yield this._getLocalTrackCore(o.RCCallMediaType.AUDIO_VIDEO,t);if(e!==o.RCCallErrorCode.SUCCESS){const{code:e,tracks:i}=yield this._getLocalTrackCore(o.RCCallMediaType.AUDIO,t);return e!==o.RCCallErrorCode.SUCCESS?{code:e}:{code:e,tracks:i}}return{code:e,tracks:i}}{const{code:i,tracks:s}=yield this._getLocalTrackCore(e,t);return i!==o.RCCallErrorCode.SUCCESS?{code:i}:{code:i,tracks:s}}}))}_removeSession(e){const o=e.getSessionId();this._sessionList=this._sessionList.filter((e=>e.getSessionId()!==o))}getJoinedRoomInfo(){return r(this,void 0,void 0,(function*(){const{code:e,data:i}=yield this._context.getRTCJoinedUserInfo(this._context.getCurrentId());return e!==t.ErrorCode.SUCCESS?(s.error("getJoinedUserInfo error",e),{code:o.RCCallErrorCode.QUERY_JOINED_USER_INFO_ERROR}):{code:o.RCCallErrorCode.SUCCESS,data:i}}))}destroyStateMachine(){return r(this,void 0,void 0,(function*(){return this._callEngine.destroy()}))}}const m={tag:"RCCall",verify:e=>"browser"===e.tag,setup(e,o,t){const i=a(t);if(!i.result)throw new Error(`[RCCallLib installer steup]${i.msg}`);return s.setLogLevel(t.logLevel),s.setLogStdout(t.logStdout),s.warn("RCCall Version: 5.0.10, Commit: 010761df892b669845b52207e7c1c3829782d100"),new f(e,o,t)}};Object.defineProperty(e,"RCCallEndReason",{enumerable:!0,get:function(){return o.RCCallEndReason}}),Object.defineProperty(e,"RCCallErrorCode",{enumerable:!0,get:function(){return o.RCCallErrorCode}}),Object.defineProperty(e,"RCCallLanguage",{enumerable:!0,get:function(){return o.RCCallLanguage}}),Object.defineProperty(e,"RCCallMediaType",{enumerable:!0,get:function(){return o.RCCallMediaType}}),Object.defineProperty(e,"RCCallSessionState",{enumerable:!0,get:function(){return o.RCCallSessionState}}),Object.defineProperty(e,"RCCallUserState",{enumerable:!0,get:function(){return o.RCCallUserState}}),e.RCCallClient=f,e.RCCallSession=g,e.installer=m,Object.defineProperty(e,"__esModule",{value:!0})}));
