/*
 * RongIMLib - v5.3.2
 * CommitId - 4e94b06a2cf663996b34f6374c3b84e29b8fb5dd
 * Fri May 27 2022 14:25:54 GMT+0800 (中国标准时间)
 * ©2016 RongCloud, Inc. All rights reserved.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('core-js/modules/es.regexp.exec.js'), require('core-js/modules/es.string.match.js'), require('core-js/modules/es.array.concat.js'), require('core-js/modules/es.array.filter.js'), require('core-js/modules/es.array.join.js'), require('core-js/modules/es.array.map.js'), require('core-js/modules/es.array.slice.js'), require('core-js/modules/es.object.keys.js'), require('core-js/modules/es.string.replace.js'), require('core-js/modules/es.array.includes.js'), require('core-js/modules/es.function.name.js'), require('core-js/modules/web.timers.js'), require('core-js/modules/es.object.to-string.js'), require('core-js/modules/es.promise.js'), require('core-js/modules/es.regexp.to-string.js'), require('core-js/modules/es.string.split.js'), require('core-js/modules/web.dom-collections.for-each.js'), require('core-js/modules/es.array.splice.js'), require('core-js/modules/es.string.pad-start.js'), require('core-js/modules/es.regexp.constructor.js'), require('core-js/modules/es.array.iterator.js'), require('core-js/modules/es.array-buffer.slice.js'), require('core-js/modules/es.number.constructor.js'), require('core-js/modules/es.object.assign.js'), require('core-js/modules/es.string.includes.js'), require('core-js/modules/es.typed-array.uint8-array.js'), require('core-js/modules/es.typed-array.copy-within.js'), require('core-js/modules/es.typed-array.every.js'), require('core-js/modules/es.typed-array.fill.js'), require('core-js/modules/es.typed-array.filter.js'), require('core-js/modules/es.typed-array.find.js'), require('core-js/modules/es.typed-array.find-index.js'), require('core-js/modules/es.typed-array.for-each.js'), require('core-js/modules/es.typed-array.includes.js'), require('core-js/modules/es.typed-array.index-of.js'), require('core-js/modules/es.typed-array.iterator.js'), require('core-js/modules/es.typed-array.join.js'), require('core-js/modules/es.typed-array.last-index-of.js'), require('core-js/modules/es.typed-array.map.js'), require('core-js/modules/es.typed-array.reduce.js'), require('core-js/modules/es.typed-array.reduce-right.js'), require('core-js/modules/es.typed-array.reverse.js'), require('core-js/modules/es.typed-array.set.js'), require('core-js/modules/es.typed-array.slice.js'), require('core-js/modules/es.typed-array.some.js'), require('core-js/modules/es.typed-array.sort.js'), require('core-js/modules/es.typed-array.subarray.js'), require('core-js/modules/es.typed-array.to-locale-string.js'), require('core-js/modules/es.typed-array.to-string.js'), require('core-js/modules/web.dom-collections.iterator.js'), require('core-js/modules/es.typed-array.int8-array.js'), require('core-js/modules/es.array.fill.js'), require('core-js/modules/es.array-buffer.constructor.js'), require('core-js/modules/es.string.sub.js'), require('core-js/modules/es.array.sort.js'), require('core-js/modules/es.string.iterator.js'), require('core-js/modules/es.array.find.js'), require('core-js/modules/es.array.find-index.js'), require('core-js/modules/es.object.values.js'), require('core-js/modules/es.set.js'), require('core-js/modules/web.url.js'), require('core-js/modules/es.array.from.js'), require('core-js/modules/es.map.js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'core-js/modules/es.regexp.exec.js', 'core-js/modules/es.string.match.js', 'core-js/modules/es.array.concat.js', 'core-js/modules/es.array.filter.js', 'core-js/modules/es.array.join.js', 'core-js/modules/es.array.map.js', 'core-js/modules/es.array.slice.js', 'core-js/modules/es.object.keys.js', 'core-js/modules/es.string.replace.js', 'core-js/modules/es.array.includes.js', 'core-js/modules/es.function.name.js', 'core-js/modules/web.timers.js', 'core-js/modules/es.object.to-string.js', 'core-js/modules/es.promise.js', 'core-js/modules/es.regexp.to-string.js', 'core-js/modules/es.string.split.js', 'core-js/modules/web.dom-collections.for-each.js', 'core-js/modules/es.array.splice.js', 'core-js/modules/es.string.pad-start.js', 'core-js/modules/es.regexp.constructor.js', 'core-js/modules/es.array.iterator.js', 'core-js/modules/es.array-buffer.slice.js', 'core-js/modules/es.number.constructor.js', 'core-js/modules/es.object.assign.js', 'core-js/modules/es.string.includes.js', 'core-js/modules/es.typed-array.uint8-array.js', 'core-js/modules/es.typed-array.copy-within.js', 'core-js/modules/es.typed-array.every.js', 'core-js/modules/es.typed-array.fill.js', 'core-js/modules/es.typed-array.filter.js', 'core-js/modules/es.typed-array.find.js', 'core-js/modules/es.typed-array.find-index.js', 'core-js/modules/es.typed-array.for-each.js', 'core-js/modules/es.typed-array.includes.js', 'core-js/modules/es.typed-array.index-of.js', 'core-js/modules/es.typed-array.iterator.js', 'core-js/modules/es.typed-array.join.js', 'core-js/modules/es.typed-array.last-index-of.js', 'core-js/modules/es.typed-array.map.js', 'core-js/modules/es.typed-array.reduce.js', 'core-js/modules/es.typed-array.reduce-right.js', 'core-js/modules/es.typed-array.reverse.js', 'core-js/modules/es.typed-array.set.js', 'core-js/modules/es.typed-array.slice.js', 'core-js/modules/es.typed-array.some.js', 'core-js/modules/es.typed-array.sort.js', 'core-js/modules/es.typed-array.subarray.js', 'core-js/modules/es.typed-array.to-locale-string.js', 'core-js/modules/es.typed-array.to-string.js', 'core-js/modules/web.dom-collections.iterator.js', 'core-js/modules/es.typed-array.int8-array.js', 'core-js/modules/es.array.fill.js', 'core-js/modules/es.array-buffer.constructor.js', 'core-js/modules/es.string.sub.js', 'core-js/modules/es.array.sort.js', 'core-js/modules/es.string.iterator.js', 'core-js/modules/es.array.find.js', 'core-js/modules/es.array.find-index.js', 'core-js/modules/es.object.values.js', 'core-js/modules/es.set.js', 'core-js/modules/web.url.js', 'core-js/modules/es.array.from.js', 'core-js/modules/es.map.js'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.RongIMLib = {}));
})(this, (function (exports) { 'use strict';

    var ReceivedStatus;

    (function (ReceivedStatus) {
      ReceivedStatus[ReceivedStatus["READ"] = 1] = "READ";
      ReceivedStatus[ReceivedStatus["LISTENED"] = 2] = "LISTENED";
      ReceivedStatus[ReceivedStatus["DOWNLOADED"] = 4] = "DOWNLOADED";
      ReceivedStatus[ReceivedStatus["RETRIEVED"] = 8] = "RETRIEVED";
      ReceivedStatus[ReceivedStatus["UNREAD"] = 0] = "UNREAD";
    })(ReceivedStatus || (ReceivedStatus = {}));

    var ReceivedStatus$1 = ReceivedStatus;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    var NAVI_CACHE_DURATION = 2 * 60 * 60 * 1000;
    var NAVI_REQ_TIMEOUT = 10 * 1000;
    var PING_REQ_TIMEOUT = 5 * 1000;
    var WEB_SOCKET_TIMEOUT = 5 * 1000;
    var PUBLIC_CLOUD_NAVI_URIS = ['https://nav.cn.ronghub.com', 'https://nav2-cn.ronghub.com'];
    var MINI_SOCKET_CONNECT_URIS = ['wsproxy.cn.ronghub.com', 'wsap-cn.ronghub.com'];
    var MINI_COMET_CONNECT_URIS = ['cometproxy-cn.ronghub.com', 'mini-cn.ronghub.com'];
    var IM_SIGNAL_TIMEOUT = 30 * 1000;
    var IM_PING_INTERVAL_TIME = 15 * 1000;
    var IM_PING_TIMEOUT = 15 * 1000;
    var IM_PING_MIN_TIMEOUT = 2 * 1000;
    var MAX_MESSAGE_CONTENT_BYTES = 128 * 1024;
    var IM_COMET_PULLMSG_TIMEOUT = 45000;
    var IM_CHATROOM_PULL_INTERVAL_TIME = 3 * 60 * 1000;
    var STORAGE_ROOT_KEY = 'RCV4-';
    var MAX_MESSAGE_EXPANSION_KEY_LENGTH = 32;
    var MAX_MESSAGE_EXPANSION_VAL_LENGTH = 4 * 1024;
    var SEND_MESSAGE_TYPE_OPTION = {
      'RC:TxtMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:ImgMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:VcMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:ImgTextMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:FileMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:HQVCMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:LBSMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:PSImgTxtMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:PSMultiImgTxtMsg': {
        isCounted: true,
        isPersited: true
      },
      'RCJrmf:RpMsg': {
        isCounted: true,
        isPersited: true
      },
      'RCJrmf:RpOpendMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:CombineMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:ReferenceMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:SightMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:GIFMsg': {
        isCounted: true,
        isPersited: true
      },
      'RC:InfoNtf': {
        isCounted: false,
        isPersited: true
      },
      'RC:ContactNtf': {
        isCounted: false,
        isPersited: true
      },
      'RC:ProfileNtf': {
        isCounted: false,
        isPersited: true
      },
      'RC:CmdNtf': {
        isCounted: false,
        isPersited: true
      },
      'RC:GrpNtf': {
        isCounted: false,
        isPersited: true
      },
      'RC:RcCmd': {
        isCounted: false,
        isPersited: true
      },
      'RC:CmdMsg': {
        isCounted: false,
        isPersited: false
      },
      'RC:TypSts': {
        isCounted: false,
        isPersited: false
      },
      'RC:PSCmd': {
        isCounted: false,
        isPersited: false
      },
      'RC:SRSMsg': {
        isCounted: false,
        isPersited: false
      },
      'RC:RRReqMsg': {
        isCounted: false,
        isPersited: false
      },
      'RC:RRRspMsg': {
        isCounted: false,
        isPersited: false
      },
      'RC:CsChaR': {
        isCounted: false,
        isPersited: false
      },
      'RC:CSCha': {
        isCounted: false,
        isPersited: false
      },
      'RC:CsEva': {
        isCounted: false,
        isPersited: false
      },
      'RC:CsContact': {
        isCounted: false,
        isPersited: false
      },
      'RC:CsHs': {
        isCounted: false,
        isPersited: false
      },
      'RC:CsHsR': {
        isCounted: false,
        isPersited: false
      },
      'RC:CsSp': {
        isCounted: false,
        isPersited: false
      },
      'RC:CsEnd': {
        isCounted: false,
        isPersited: false
      },
      'RC:CsUpdate': {
        isCounted: false,
        isPersited: false
      },
      'RC:ReadNtf': {
        isCounted: false,
        isPersited: false
      },
      'RC:chrmKVNotiMsg': {
        isCounted: false,
        isPersited: false
      },
      'RC:VCAccept': {
        isCounted: false,
        isPersited: false
      },
      'RC:VCRinging': {
        isCounted: false,
        isPersited: false
      },
      'RC:VCSummary': {
        isCounted: false,
        isPersited: false
      },
      'RC:VCHangup': {
        isCounted: false,
        isPersited: false
      },
      'RC:VCInvite': {
        isCounted: false,
        isPersited: false
      },
      'RC:VCModifyMedia': {
        isCounted: false,
        isPersited: false
      },
      'RC:VCModifyMem': {
        isCounted: false,
        isPersited: false
      },
      'RC:MsgExMsg': {
        isCounted: false,
        isPersited: false
      },
      'RC:RRMsg': {
        isCounted: false,
        isPersited: false
      },
      'RC:LogCmdMsg': {
        isCounted: false,
        isPersited: false
      },
      'RC:InterceptMsg': {
        isCounted: false,
        isPersited: false
      }
    };
    var CPP_PROTOCAL_MSGTYPE_OPTION = {
      'RC:DizNtf': {
        isCounted: false,
        isPersited: false
      }
    };
    var STATUS_MESSAGE = ['RC:TypSts', 'RC:InterceptMsg'];
    var CONNECTION_TYPE;

    (function (CONNECTION_TYPE) {
      CONNECTION_TYPE["WEBSOCKET"] = "websocket";
      CONNECTION_TYPE["COMET"] = "comet";
    })(CONNECTION_TYPE || (CONNECTION_TYPE = {}));

    var rootStorage;
    var createRootStorage = function createRootStorage(runtime) {
      if (!rootStorage) {
        rootStorage = {
          set: function set(key, val) {
            runtime.localStorage.setItem(key, JSON.stringify(val));
          },
          get: function get(key) {
            var val;

            try {
              val = JSON.parse(runtime.localStorage.getItem(key));
            } catch (e) {
              val = null;
            }

            return val;
          },
          remove: function remove(key) {
            return runtime.localStorage.removeItem(key);
          },
          getKeys: function getKeys() {
            var keys = [];

            for (var key in runtime.localStorage) {
              keys.push(key);
            }

            return keys;
          }
        };
      }

      return rootStorage;
    };

    var AppCache = function () {
      function AppCache(value) {
        this._caches = {};

        if (value) {
          this._caches = value;
        }
      }

      AppCache.prototype.set = function (key, value) {
        this._caches[key] = value;
      };

      AppCache.prototype.remove = function (key) {
        var val = this.get(key);
        delete this._caches[key];
        return val;
      };

      AppCache.prototype.get = function (key) {
        return this._caches[key];
      };

      AppCache.prototype.getKeys = function () {
        var keys = [];

        for (var key in this._caches) {
          keys.push(key);
        }

        return keys;
      };

      return AppCache;
    }();

    var AppStorage = function () {
      function AppStorage(runtime, suffix) {
        var _a;

        var key = suffix ? "".concat(STORAGE_ROOT_KEY).concat(suffix) : STORAGE_ROOT_KEY;
        this._rootStorage = createRootStorage(runtime);
        var localCache = this._rootStorage.get(key) || {};
        this._cache = new AppCache((_a = {}, _a[key] = localCache, _a));
        this._storageKey = key;
      }

      AppStorage.prototype._get = function () {
        var key = this._storageKey;
        return this._cache.get(key) || {};
      };

      AppStorage.prototype._set = function (cache) {
        var key = this._storageKey;
        cache = cache || {};

        this._cache.set(key, cache);

        this._rootStorage.set(key, cache);
      };

      AppStorage.prototype.set = function (key, value) {
        var localValue = this._get();

        localValue[key] = value;

        this._set(localValue);
      };

      AppStorage.prototype.remove = function (key) {
        var localValue = this._get();

        delete localValue[key];

        this._set(localValue);
      };

      AppStorage.prototype.clear = function () {
        var key = this._storageKey;

        this._rootStorage.remove(key);

        this._cache.remove(key);
      };

      AppStorage.prototype.get = function (key) {
        var localValue = this._get();

        return localValue[key];
      };

      AppStorage.prototype.getKeys = function () {
        var localValue = this._get();

        var keyList = [];

        for (var key in localValue) {
          keyList.push(key);
        }

        return keyList;
      };

      AppStorage.prototype.getValues = function () {
        return this._get() || {};
      };

      return AppStorage;
    }();

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var Todo = function (_super) {
      __extends(Todo, _super);

      function Todo(message) {
        return _super.call(this, "TODO => ".concat(message)) || this;
      }

      return Todo;
    }(Error);

    var todo = function todo(message) {
      return new Todo(message);
    };

    var toUpperCase = function toUpperCase(str, startIndex, endIndex) {
      if (startIndex === undefined || endIndex === undefined) {
        return str.toUpperCase();
      }

      var sliceStr = str.slice(startIndex, endIndex);
      str = str.replace(sliceStr, function (text) {
        return text.toUpperCase();
      });
      return str;
    };
    var getByteLength = function getByteLength(str, charset) {
      if (charset === void 0) {
        charset = 'utf-8';
      }

      var total = 0;
      var chatCode;

      if (charset === 'utf-16') {
        for (var i = 0, max = str.length; i < max; i++) {
          chatCode = str.charCodeAt(i);

          if (chatCode <= 0xffff) {
            total += 2;
          } else {
            total += 4;
          }
        }
      } else {
        for (var i = 0, max = str.length; i < max; i++) {
          chatCode = str.charCodeAt(i);

          if (chatCode < 0x007f) {
            total += 1;
          } else if (chatCode <= 0x07ff) {
            total += 2;
          } else if (chatCode <= 0xffff) {
            total += 3;
          } else {
            total += 4;
          }
        }
      }

      return total;
    };
    var appendUrl = function appendUrl(url, query) {
      url = url.replace(/\?$/, '');

      if (!query) {
        return url;
      }

      var searchArr = Object.keys(query).map(function (key) {
        return "".concat(key, "=").concat(query[key]);
      }).filter(function (item) {
        return !!item;
      });

      if (searchArr.length) {
        return [url, searchArr.join('&')].join('?');
      }

      return url;
    };
    var matchVersion = function matchVersion(apiVersion) {
      var matches = apiVersion.match(/\d+(\.\d+){2}/);
      return matches[0];
    };
    var subStrByByte = function subStrByByte(str, len, charset) {
      if (charset === void 0) {
        charset = 'utf-8';
      }

      if (!str || !len) {
        return '';
      }

      var size = charset === 'utf-8' ? 3 : 2;
      var a = 0;
      var i = 0;
      var temp = '';

      for (i = 0; i < str.length; i++) {
        if (str.charCodeAt(i) > 255) {
          a += size;
        } else {
          a++;
        }

        if (a > len) {
          return temp;
        }

        temp += str.charAt(i);
      }

      return str;
    };

    var getBrowser$1 = function getBrowser(runtime) {
      if (runtime.tag !== 'browser') {
        return {
          type: runtime.tag,
          version: 'UnKonw'
        };
      }

      var userAgent = navigator.userAgent;
      var version;
      var type;
      var condition = {
        IE: /rv:([\d.]+)\) like Gecko|MSIE ([\d.]+)/,
        Edge: /Edge\/([\d.]+)/,
        Firefox: /Firefox\/([\d.]+)/,
        Opera: /(?:OPERA|OPR).([\d.]+)/,
        WeChat: /MicroMessenger\/([\d.]+)/,
        QQBrowser: /QQBrowser\/([\d.]+)/,
        Chrome: /Chrome\/([\d.]+)/,
        Safari: /Version\/([\d.]+).*Safari/,
        iOSChrome: /Mobile\/([\d.]+).*Safari/
      };

      for (var key in condition) {
        if (!condition.hasOwnProperty(key)) continue;
        var browserContent = userAgent.match(condition[key]);

        if (browserContent) {
          type = key;
          version = browserContent[1] || browserContent[2];
          break;
        }
      }

      return {
        type: type || 'UnKonw',
        version: version || 'UnKonw'
      };
    };

    var string10to64 = function string10to64(num) {
      var chars = '0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZa0'.split('');
      var radix = chars.length + 1;
      var qutient = +num;
      var arr = [];

      do {
        var mod = qutient % radix;
        qutient = (qutient - mod) / radix;
        arr.unshift(chars[mod]);
      } while (qutient);

      return arr.join('');
    };
    var getUUID = function getUUID() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0;
        var v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    };
    var getUUID22 = function getUUID22() {
      var uuid = getUUID();
      uuid = uuid.replace(/-/g, '') + 'a';
      uuid = parseInt(uuid, 16);
      uuid = string10to64(uuid);

      if (uuid.length > 22) {
        uuid = uuid.slice(0, 22);
      }

      if (uuid.length < 22) {
        var len = 22 - uuid.length;

        for (var i = 0; i < len; i++) {
          uuid = uuid + '0';
        }
      }

      return uuid;
    };

    var getDeviceId = function getDeviceId(runtime) {
      var key = 'RCDeviceId';
      var storage = createRootStorage(runtime);
      var deviceId = '';
      var localDeviceId = storage.get(key);

      if (localDeviceId) {
        deviceId = localDeviceId;
      } else {
        deviceId = getUUID22();
        storage.set(key, deviceId);
      }

      return deviceId;
    };

    var DB_NAME = 'RC_ENGINE_DB';
    var DB_VERSION = 2;
    var RCObjectStoreNames = {
      RC_LOGS: 'RC_Logs'
    };

    function createObjectStore(db, name, opts) {
      var objectStore;

      if (!db.objectStoreNames.contains(name)) {
        var createOptions = __assign({}, opts.objectStoreParams);

        objectStore = db.createObjectStore(name, createOptions);

        if (opts.indexs && opts.indexs.length > 0) {
          opts.indexs.forEach(function (item) {
            objectStore.createIndex(item.indexName, item.key, {
              unique: item.unique
            });
          });
        }

        return objectStore;
      }
    }

    function updateHandle(event) {
      var db = event.target.result;

      if (event.oldVersion === 1) {
        db.deleteObjectStore(RCObjectStoreNames.RC_LOGS);
      }

      createObjectStore(db, RCObjectStoreNames.RC_LOGS, {
        indexs: [{
          indexName: 'time',
          key: 'time',
          unique: false
        }],
        objectStoreParams: {
          autoIncrement: true
        }
      });
    }

    var RCIndexDB = function () {
      function RCIndexDB() {}

      RCIndexDB.init = function () {
        if (typeof window === 'undefined' || !window || !window.indexedDB) {
          console.debug('IndexDB is not currently supported in the environment!');
          return;
        }

        var request = window.indexedDB.open(DB_NAME, DB_VERSION);

        request.onerror = function (event) {
          console.warn('open indexDB request failed ' + event.target.error);
        };

        request.onsuccess = function (event) {
          RCIndexDB._db = event.target.result;

          if (RCIndexDB._db) {
            RCIndexDB._db.onclose = function (e) {
              var _a;

              console.warn("The database ".concat((_a = RCIndexDB._db) === null || _a === void 0 ? void 0 : _a.name, " has unexpectedly closed."), e);
              RCIndexDB._db = null;
              RCIndexDB._instance = null;
            };

            RCIndexDB._db.onerror = function (e) {
              var _a;

              console.warn("The database ".concat((_a = RCIndexDB._db) === null || _a === void 0 ? void 0 : _a.name, " has opening error."), e);
              RCIndexDB._db = null;
              RCIndexDB._instance = null;
            };

            RCIndexDB._db.onabort = function (e) {
              var _a;

              console.warn("The database ".concat((_a = RCIndexDB._db) === null || _a === void 0 ? void 0 : _a.name, " has opening aborted."), e);
              RCIndexDB._db = null;
              RCIndexDB._instance = null;
            };
          }

          RCIndexDB._instance = new RCIndexDB();
        };

        request.onupgradeneeded = function (event) {
          RCIndexDB._db = event.target.result;
          updateHandle(event);
        };
      };

      RCIndexDB.getInstance = function () {
        return RCIndexDB._instance;
      };

      RCIndexDB.prototype.addList = function (objectStoreName, list) {
        return new Promise(function (resolve) {
          if (!RCIndexDB._db) {
            resolve(false);
            return;
          }

          var transaction = RCIndexDB._db.transaction([objectStoreName], 'readwrite');

          var store = transaction.objectStore(objectStoreName);
          list.forEach(function (item) {
            store === null || store === void 0 ? void 0 : store.add(item);
          });

          transaction.oncomplete = function (event) {
            resolve(true);
          };

          transaction.onerror = function (event) {
            resolve(false);
          };
        });
      };

      RCIndexDB.prototype.getRangeData = function (objectStoreName, indexName, start, end) {
        return new Promise(function (resolve) {
          if (!RCIndexDB._db) {
            resolve([]);
            return;
          }

          var transaction = RCIndexDB._db.transaction([objectStoreName], 'readwrite');

          var store = transaction.objectStore(objectStoreName);
          var range = IDBKeyRange.bound(start, end);
          var index = store.index(indexName);
          var list = [];
          var cursorResult = index.openCursor(range);

          cursorResult.onsuccess = function (event) {
            var cursor = event.target.result;

            if (cursor) {
              list.push(cursor.value);
              cursor["continue"]();
            } else {
              resolve(list);
            }
          };

          cursorResult.onerror = function (event) {
            console.error(event);
            resolve([]);
          };
        });
      };

      RCIndexDB.prototype.getCount = function (objectStoreName, indexName) {
        return new Promise(function (resolve) {
          if (!RCIndexDB._db) {
            resolve(0);
            return;
          }

          var transaction = RCIndexDB._db.transaction([objectStoreName], 'readonly');

          var store = transaction.objectStore(objectStoreName);
          var countRequest = store.count();

          countRequest.onsuccess = function () {
            resolve(countRequest.result);
          };

          countRequest.onerror = function (event) {
            console.error(event);
            resolve(0);
          };
        });
      };

      RCIndexDB.prototype.removeFirstData = function (objectStoreName, indexName, count) {
        return new Promise(function (resolve) {
          if (!RCIndexDB._db) {
            resolve(false);
            return;
          }

          var transaction = RCIndexDB._db.transaction([objectStoreName], 'readwrite');

          var store = transaction.objectStore(objectStoreName);
          var getAllKeysRequest = store.getAllKeys(IDBKeyRange.lowerBound(0), count);

          getAllKeysRequest.onsuccess = function () {
            var keyList = getAllKeysRequest.result;

            if (keyList.length > 0) {
              var request = store["delete"](IDBKeyRange.bound(keyList[0], keyList[keyList.length - 1]));

              request.onsuccess = function () {
                resolve(true);
              };
            }
          };
        });
      };

      RCIndexDB._db = null;
      return RCIndexDB;
    }();

    var TextCompressor = function () {
      function TextCompressor() {}

      TextCompressor.compress = function (data) {
        var self = this;
        var map = {};

        for (var p = 0; p < data.length - 1; p++) {
          var c1 = data.charAt(p);
          var c2 = data.charAt(p + 1);
          var c = c1 + c2;

          if (!map.hasOwnProperty(c)) {
            map[c] = [p];
            continue;
          }

          map[c].push(p);
        }

        var compressedData = [];
        var normalBlockBuffer = [];

        var encodeNormalBlock = function encodeNormalBlock() {
          if (normalBlockBuffer.length > 0) {
            var normalBlock = normalBlockBuffer.join('');
            normalBlockBuffer = [];

            if (normalBlock.length > 26) {
              var normalExtBlockLength = self.numberEncode(normalBlock.length);
              var normalExtBlockHeader = String.fromCharCode(self.dataType.NormalExt | normalExtBlockLength.length);
              compressedData.push(normalExtBlockHeader + normalExtBlockLength);
            } else {
              var normalBlockHeader = String.fromCharCode(self.dataType.Normal | normalBlock.length);
              compressedData.push(normalBlockHeader);
            }

            compressedData.push(normalBlock);
          }
        };

        var i = 0;

        while (i < data.length) {
          var r = self.indexOf(map, data, i);

          if (r.length < 2) {
            normalBlockBuffer.push(data.charAt(i++));
            continue;
          }

          if (r.length < 4) {
            normalBlockBuffer.push(data.substr(i, r.length));
            i += r.length;
            continue;
          }

          var offset = self.numberEncode(i - r.offset);
          var length_1 = self.numberEncode(r.length);

          if (offset.length + length_1.length >= r.length) {
            normalBlockBuffer.push(data.substr(i, r.length));
            i += r.length;
            continue;
          }

          encodeNormalBlock();
          var compressedBlockHeader = String.fromCharCode(self.dataType.Compressed | offset.length << 2 | length_1.length);
          compressedData.push(compressedBlockHeader + offset + length_1);
          i += r.length;
        }

        encodeNormalBlock();
        var dataLengthTo62 = self.numberEncode(data.length);
        var tailBlockHeader = String.fromCharCode(self.dataType.Tail | dataLengthTo62.length);
        compressedData.push(tailBlockHeader + dataLengthTo62);
        return compressedData.join('');
      };

      TextCompressor.uncompress = function (data) {
        var self = this;
        var i = 0;
        var result = '';

        label1: do {
          var header = data.charCodeAt(i++);
          var headerType = header & self.dataType.Mark;
          var headerVal = header & 0xF;
          var num = void 0;

          switch (headerType) {
            case self.dataType.Compressed:
              var p1 = headerVal >> 2;
              var p2 = headerVal & 3;

              if (p1 === 0 || p2 === 0) {
                throw new Error('Data parsing error,at ' + i);
              }

              var offset = self.numberDecode(data.substr(i, p1));
              var len = self.numberDecode(data.substr(i += p1, p2));
              offset = result.length - offset;

              if (offset + len > result.length) {
                throw new Error('Data parsing error,at ' + i);
              }

              i += p2;
              result += result.substr(offset, len);
              break;

            case self.dataType.Tail:
              num = self.numberDecode(data.substr(i, headerVal));

              if (num !== result.length) {
                console.log(result.length);
                console.log(num);
                throw new Error('Data parsing error,at ' + i);
              }

              i += headerVal;
              break label1;

            case self.dataType.NormalExt:
              num = self.numberDecode(data.substr(i, headerVal));
              result += data.substr(i += headerVal, num);
              i += num;
              break;

            case self.dataType.Normal:
              result += data.substr(i, headerVal);
              i += headerVal;
              break;

            case self.dataType.Mark:
              if (headerVal > 10) {
                throw new Error('Data parsing error,at ' + i);
              }

              result += data.substr(i, 16 + headerVal);
              i += 16 + headerVal;
              break;

            default:
              throw new Error('Data parsing error,at ' + i + ' header:' + headerType);
          }
        } while (i < data.length);

        return result;
      };

      TextCompressor.indexOf = function (map, source, fromIndex) {
        var self = this;
        var result = {
          length: 0,
          offset: -1
        };
        source.length;

        if (fromIndex >= source.length - 1) {
          return result;
        }

        var c1 = source.charAt(fromIndex);
        var c2 = source.charAt(fromIndex + 1);
        var items = map[c1 + c2];

        if (items[0] === fromIndex) {
          return result;
        }

        var space1 = source.length - fromIndex;

        for (var i = 0, len = items.length; i < len; i++) {
          var item = items[i];
          var space2 = fromIndex - item;

          if (space2 > self.max) {
            continue;
          }

          var end = Math.min(space1, space2);

          if (end <= result.length) {
            break;
          }

          if (result.length > 2) {
            if (source.charAt(item + result.length - 1) !== source.charAt(fromIndex + result.length - 1)) {
              continue;
            }
          }

          var m = 2;

          for (var j = m; j < end; j++) {
            if (source.charAt(item + j) === source.charAt(fromIndex + j)) {
              m++;
            } else {
              break;
            }
          }

          if (m >= result.length) {
            result.length = m;
            result.offset = item;
          }
        }

        return result;
      };

      TextCompressor.numberEncode = function (num) {
        var self = this;
        var result = [];
        var remainder = 0;

        do {
          remainder = num % self.scale;
          result.push(self.chars.charAt(remainder));
          num = (num - remainder) / self.scale;
        } while (num > 0);

        return result.join('');
      };

      TextCompressor.numberDecode = function (str) {
        var self = this;
        var num = 0;
        var index = 0;

        for (var i = str.length - 1; i >= 0; i--) {
          index = self.chars.indexOf(str.charAt(i));

          if (index === -1) {
            throw new Error('decode number error, data is "' + str + '"');
          }

          num = num * self.scale + index;
        }

        return num;
      };

      TextCompressor.dataType = {
        Tail: 0x30,
        Compressed: 0x40,
        NormalExt: 0x50,
        Normal: 0x60,
        Mark: 0x70
      };
      TextCompressor.chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
      TextCompressor.scale = TextCompressor.chars.length;
      TextCompressor.max = 238327;
      return TextCompressor;
    }();

    var UploadLog = function () {
      function UploadLog(info) {
        this.info = info;
        this.logUrl = 'logcollection.ronghub.com';
        this.level = 1;
        this.itv = 30;
        this.times = 5;
        this.deviceId = '';
        this.deviceInfo = '';
        this.logSwitch = 0;
        this.logUrl = info.logPolicy.url || this.logUrl;
        this.level = info.logPolicy.level || this.level;
        this.itv = info.logPolicy.itv || this.itv;
        this.times = info.logPolicy.times || this.times;
        this.deviceId = getDeviceId(info.runtime);
        this.logSwitch = info.logSwitch;
        var browser = getBrowser$1(info.runtime);
        this.deviceInfo = "".concat(browser.type, "|").concat(browser.version, "|").concat(info === null || info === void 0 ? void 0 : info.sessionId);
      }

      UploadLog.prototype.updateUploadLogAttr = function (info) {
        var logPolicy = info.logPolicy,
            logSwitch = info.logSwitch,
            runtime = info.runtime,
            _a = info.sessionId,
            sessionId = _a === void 0 ? '' : _a,
            userId = info.userId;

        if (logPolicy) {
          var url = logPolicy.url,
              level = logPolicy.level,
              itv = logPolicy.itv,
              times = logPolicy.times;
          this.logUrl = url || this.logUrl;

          this.level = level || this.level;
          this.itv = itv || this.itv;
          this.times = times || this.times;
        }

        if (logSwitch) {
          this.logSwitch = logSwitch;
        }

        if (runtime) {
          this.deviceId = getDeviceId(runtime);
          var browser = getBrowser$1(runtime);
          this.deviceInfo = "".concat(browser.type, "|").concat(browser.version, "|").concat(sessionId);
        }

        if (userId) {
          this.info.userId = userId;
        }
      };

      UploadLog.init = function (info) {
        UploadLog.reportSwitch = true;

        if (!UploadLog._instance) {
          UploadLog._instance = new UploadLog(info);
        }

        return UploadLog._instance;
      };

      UploadLog.getInstance = function () {
        return UploadLog._instance;
      };

      UploadLog.prototype.reportRealtimeLog = function (list) {
        var _this = this;

        if (list.length === 0 || !this.logUrl) {
          return Promise.resolve();
        }

        var content = TextCompressor.compress(list.map(function (i) {
          return i.content;
        }).join(''));
        var protocol = isHttpUrl(this.logUrl) ? '' : 'https://';
        var url = "".concat(protocol).concat(this.logUrl, "?version=").concat(this.info.version, "&appkey=").concat(this.info.appkey, "&userId=").concat(this.info.userId, "&deviceId=").concat(this.deviceId, "&deviceInfo=").concat(this.deviceInfo, "&platform=Web");
        return this.info.runtime.httpReq({
          method: 'POST',
          url: url,
          body: content
        }).then(function (res) {
          var data = res.data;

          if (data) {
            data = JSON.parse(data);
            _this.itv = data.nextTime;
            _this.level = data.level;
            _this.logSwitch = data.logSwitch;
            UploadLog.currentRTTimes = 1;
          }
        });
      };

      UploadLog.prototype.reportFullLog = function (params) {
        return __awaiter(this, void 0, void 0, function () {
          var startTime, endTime, platform, logId, uri, db, list, content, itv, currentTimes, _reportFullLog2;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                startTime = params.startTime, endTime = params.endTime, platform = params.platform, logId = params.logId, uri = params.uri;
                db = RCIndexDB.getInstance();
                if (platform.toLowerCase() !== 'web' || !db) return [2];

                if (startTime > endTime) {
                  return [2];
                }

                return [4, db.getRangeData(RCObjectStoreNames.RC_LOGS, 'time', startTime, endTime)];

              case 1:
                list = _a.sent();
                list = list.filter(function (i) {
                  return !i.userId || i.userId === _this.info.userId;
                });
                content = TextCompressor.compress(list.map(function (i) {
                  return i.content;
                }).join('') || 'no data');
                itv = 5 * 1000;
                currentTimes = 1;

                _reportFullLog2 = function _reportFullLog() {
                  if (currentTimes > 3 || !UploadLog.reportSwitch) return Promise.resolve();

                  var _uri = uri || _this.logUrl;

                  var protocol = isHttpUrl(_uri) ? '' : 'https://';
                  var url = "".concat(protocol).concat(_uri, "?version=").concat(_this.info.version, "&appkey=").concat(_this.info.appkey, "&userId=").concat(_this.info.userId, "&logId=").concat(logId, "&deviceId=").concat(_this.deviceId, "&deviceInfo=").concat(_this.deviceInfo, "&platform=Web");

                  var _itv = itv * (currentTimes - 1);

                  currentTimes++;
                  return new Promise(function (resolve, reject) {
                    setTimeout(function () {
                      if (!UploadLog.reportSwitch) return;

                      _this.info.runtime.httpReq({
                        url: url,
                        method: 'POST',
                        body: content
                      }).then(function () {
                        resolve();
                      })["catch"](function (error) {
                        reject(error);

                        _reportFullLog2();
                      });
                    }, _itv);
                  });
                };

                return [2, _reportFullLog2()];
            }
          });
        });
      };

      UploadLog.prototype.distroy = function () {
        UploadLog.currentRTTimes = 1;
        UploadLog.reportSwitch = false;
      };

      UploadLog.currentRTTimes = 1;
      UploadLog.reportSwitch = false;
      return UploadLog;
    }();

    exports.LogLevel = void 0;

    (function (LogLevel) {
      LogLevel[LogLevel["LOG"] = 0] = "LOG";
      LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
      LogLevel[LogLevel["INFO"] = 1] = "INFO";
      LogLevel[LogLevel["WARN"] = 2] = "WARN";
      LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
      LogLevel[LogLevel["FATAL"] = 4] = "FATAL";
      LogLevel[LogLevel["STATISTICS"] = 6] = "STATISTICS";
      LogLevel[LogLevel["NONE"] = 1000] = "NONE";
    })(exports.LogLevel || (exports.LogLevel = {}));

    var LogType;

    (function (LogType) {
      LogType["IM"] = "IM";
      LogType["RTC"] = "RTC";
    })(LogType || (LogType = {}));

    var EnterpriseType;

    (function (EnterpriseType) {
      EnterpriseType[EnterpriseType["PRIVATE"] = 1] = "PRIVATE";
      EnterpriseType[EnterpriseType["OPEN"] = 0] = "OPEN";
    })(EnterpriseType || (EnterpriseType = {}));

    var ProtocalType;

    (function (ProtocalType) {
      ProtocalType[ProtocalType["NAVI"] = 1] = "NAVI";
      ProtocalType[ProtocalType["TCP"] = 2] = "TCP";
      ProtocalType[ProtocalType["WS"] = 3] = "WS";
    })(ProtocalType || (ProtocalType = {}));

    var ConversationType;

    (function (ConversationType) {
      ConversationType[ConversationType["NONE"] = 0] = "NONE";
      ConversationType[ConversationType["PRIVATE"] = 1] = "PRIVATE";
      ConversationType[ConversationType["DISCUSSION"] = 2] = "DISCUSSION";
      ConversationType[ConversationType["GROUP"] = 3] = "GROUP";
      ConversationType[ConversationType["CHATROOM"] = 4] = "CHATROOM";
      ConversationType[ConversationType["CUSTOMER_SERVICE"] = 5] = "CUSTOMER_SERVICE";
      ConversationType[ConversationType["SYSTEM"] = 6] = "SYSTEM";
      ConversationType[ConversationType["APP_PUBLIC_SERVICE"] = 7] = "APP_PUBLIC_SERVICE";
      ConversationType[ConversationType["PUBLIC_SERVICE"] = 8] = "PUBLIC_SERVICE";
      ConversationType[ConversationType["ULTRA_GROUP"] = 10] = "ULTRA_GROUP";
      ConversationType[ConversationType["RTC_ROOM"] = 12] = "RTC_ROOM";
    })(ConversationType || (ConversationType = {}));

    var ConversationType$1 = ConversationType;

    var FileType;

    (function (FileType) {
      FileType[FileType["IMAGE"] = 1] = "IMAGE";
      FileType[FileType["AUDIO"] = 2] = "AUDIO";
      FileType[FileType["VIDEO"] = 3] = "VIDEO";
      FileType[FileType["FILE"] = 4] = "FILE";
      FileType[FileType["SIGHT"] = 5] = "SIGHT";
      FileType[FileType["COMBINE_HTML"] = 6] = "COMBINE_HTML";
    })(FileType || (FileType = {}));

    var FileType$1 = FileType;

    var isString = function isString(value) {
      return typeof value === 'string';
    };
    var isBoolean = function isBoolean(value) {
      return typeof value === 'boolean';
    };
    var isNumber = function isNumber(value) {
      return typeof value === 'number' && !isNaN(value);
    };
    var isArray = function isArray(arr) {
      return Object.prototype.toString.call(arr).indexOf('Array') !== -1;
    };
    var isArrayBuffer = function isArrayBuffer(arr) {
      return Object.prototype.toString.call(arr) === '[object ArrayBuffer]';
    };
    var notEmptyString = function notEmptyString(str) {
      return isString(str) && str.length > 0;
    };
    var notEmptyArray = function notEmptyArray(arr) {
      return isArray(arr) && arr.length > 0;
    };
    var isObject = function isObject(val) {
      return Object.prototype.toString.call(val) === '[object Object]';
    };
    var isFunction = function isFunction(val) {
      return Object.prototype.toString.call(val) === '[object Function]';
    };
    var isUndefined = function isUndefined(val) {
      return val === undefined || Object.prototype.toString.call(val) === '[object Undefined]';
    };
    var isNull = function isNull(val) {
      return Object.prototype.toString.call(val) === '[object Null]';
    };
    var isHttpUrl = function isHttpUrl(value) {
      return isString(value) && /https?:\/\//.test(value);
    };
    var notEmptyObject = function notEmptyObject(val) {
      for (var key in val) {
        return true;
      }

      return false;
    };
    var isValidConversationType = function isValidConversationType(conversation) {
      return isNumber(conversation) && Object.prototype.hasOwnProperty.call(ConversationType$1, conversation);
    };
    var isValidFileType = function isValidFileType(fileType) {
      return isNumber(fileType) && Object.prototype.hasOwnProperty.call(FileType$1, fileType);
    };
    var isValidExpansion = function isValidExpansion(expansion) {
      var isExceedLimit = false;
      var isIllgalEx = false;
      var isExKeyOrValLengthExceedLimit = false;

      if (isObject(expansion)) {
        var exKeysLength = Object.keys(expansion).length;
        isExceedLimit = exKeysLength > 20;

        for (var key in expansion) {
          if (!isIllgalEx) {
            isIllgalEx = isString(key) && !/^[A-Za-z0-9_=+-]+$/.test(key);
          }

          if (!isExKeyOrValLengthExceedLimit) {
            var val = expansion[key];
            isExKeyOrValLengthExceedLimit = key.length > MAX_MESSAGE_EXPANSION_KEY_LENGTH || val.length > MAX_MESSAGE_EXPANSION_VAL_LENGTH;
          }
        }
      }

      return {
        isExceedLimit: isExceedLimit,
        isIllgalEx: isIllgalEx,
        isExKeyOrValLengthExceedLimit: isExKeyOrValLengthExceedLimit
      };
    };

    var _a$4;
    var methods = {};

    if (console) {
      methods = (_a$4 = {}, _a$4[exports.LogLevel.DEBUG] = console.debug.bind(console), _a$4[exports.LogLevel.INFO] = console.info.bind(console), _a$4[exports.LogLevel.WARN] = console.warn.bind(console), _a$4[exports.LogLevel.ERROR] = console.error.bind(console), _a$4[exports.LogLevel.FATAL] = console.log.bind(console), _a$4);
    }

    var transQuoteValue = function transQuoteValue(value) {
      if (isString(value) || isNumber(value) || isUndefined(value) || isBoolean(value)) {
        return value;
      }

      if (value instanceof Error) {
        return JSON.stringify({
          name: value.name,
          message: value.message,
          stack: value.stack
        });
      }

      return JSON.stringify(value);
    };

    var REAT_TIME_LOG_SIZE = 500;
    var DB_LOG_MAX_SIZE = 100000;

    var Logger = function () {
      function Logger(tag, type, initiator) {
        this.tag = tag;
        this.type = type;
        this.initiator = initiator;
        this._outLevel = exports.LogLevel.WARN;
        this.debug = this.log.bind(this, exports.LogLevel.DEBUG);
        this.info = this.log.bind(this, exports.LogLevel.INFO);
        this.warn = this.log.bind(this, exports.LogLevel.WARN);
        this.error = this.log.bind(this, exports.LogLevel.ERROR);
        this.fatal = this.log.bind(this, exports.LogLevel.FATAL);
        this.statisticsCaches = {};
        this.baseStatisData = {
          sdkPrivate: EnterpriseType.OPEN,
          serverPrivate: EnterpriseType.OPEN,
          bundleId: 'lib-next'
        };
      }

      Logger.init = function (userId) {
        Logger.userId = userId;
      };

      Logger.reset = function () {
        Logger.userId = '';
      };

      Logger.prototype._defaultStdout = function (level, msgTag) {
        var args = [];

        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }

        if (methods[level]) {
          methods[level].apply(methods, __spreadArray(["".concat(msgTag, ":")], args, false));
        }
      };

      Logger.prototype.__pushLocalLog = function (level, content, tag) {
        var type;

        if (this.type) {
          type = this.type;
        } else {
          type = ['RCRTCLog', 'RCCall', 'RCRTC', 'RTC-A'].includes(this.tag) ? LogType.RTC : LogType.IM;
        }

        var time = Date.now();

        if (getByteLength(content) >= 1000) {
          content = subStrByByte(content, 1000);
        }

        var _content = JSON.stringify({
          message: content,
          userId: Logger.userId
        }).replace(/"/g, '""');

        var logTag = /^[\w]+-[\w]+-[\w]+?/.test(tag) ? tag : "".concat(this.initiator || 'L', "-").concat(tag, "-O");
        var log = {
          sessionId: Logger.sessionId,
          time: time,
          level: 4 - level,
          content: "".concat(Logger.sessionId, ",").concat(Date.now(), ",").concat(type, ",").concat(4 - level, ",").concat(logTag, ",\"").concat(_content, "\"\n"),
          userId: Logger.userId
        };
        Logger.databaseLogList.push(log);

        if (Logger.databaseLogList.length >= 100 || level === exports.LogLevel.FATAL) {
          this.__insertLogIntoDatabase();
        }
      };

      Logger.prototype.__insertLogIntoDatabase = function () {
        return __awaiter(this, void 0, void 0, function () {
          var _list, db, result, count;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                _list = __spreadArray([], Logger.databaseLogList, true);
                Logger.databaseLogList = [];
                db = RCIndexDB.getInstance();
                if (!db) return [3, 3];
                return [4, db.addList(RCObjectStoreNames.RC_LOGS, _list)];

              case 1:
                result = _a.sent();
                return [4, db.getCount(RCObjectStoreNames.RC_LOGS, 'time')];

              case 2:
                count = _a.sent();

                if (count > DB_LOG_MAX_SIZE) {
                  db.removeFirstData(RCObjectStoreNames.RC_LOGS, 'time', 2000);
                }

                return [2, result];

              case 3:
                return [2, false];
            }
          });
        });
      };

      Logger.prototype.setLogLevel = function (logLevel) {
        this._outLevel = typeof logLevel !== 'number' ? exports.LogLevel.WARN : logLevel;
      };

      Logger.prototype.setLogStdout = function (stdout) {
        this._logStdout = stdout;
      };

      Logger.prototype.log = function (level) {
        var args = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }

        if (level > exports.LogLevel.DEBUG) {
          this.__pushLocalLog(level, args.map(transQuoteValue).join(' '), this.tag);
        }

        if (level < this._outLevel) {
          return;
        }

        var msgTag = "".concat(new Date().toISOString(), "[").concat(this.tag, "][").concat(exports.LogLevel[level], "]");
        var content = "".concat(msgTag, " - ").concat(args.map(transQuoteValue).join(' '));

        if (this._logStdout) {
          this._logStdout(level, content);

          return;
        }

        if (this._stdout) {
          this._stdout(level, content);

          return;
        }

        this._defaultStdout.apply(this, __spreadArray([level, msgTag], args, false));
      };

      Logger.prototype.reportLog = function (level, tag, content) {
        this.__pushLocalLog(4 - level, content, tag);

        var _content = JSON.stringify({
          message: content
        }).replace(/"/g, '""');

        _content = "\"".concat(_content, "\"");
        var log = {
          level: level,
          content: [Logger.sessionId, Date.now(), this.type, level, tag, _content].join() + '\n'
        };
        Logger.realTimeLogList.push(log);

        if (Logger.realTimeLogList.length >= REAT_TIME_LOG_SIZE + 100) {
          Logger.realTimeLogList = Logger.realTimeLogList.slice(-REAT_TIME_LOG_SIZE);
        }
      };

      Logger.prototype.set = function (outLevel, stdout) {
        this.warn('logger.set has being deprecated!');
      };

      Logger.prototype.setStdout = function (stdout) {
        this._stdout = stdout;
      };

      Logger.prototype.__clearRealTimeLog = function () {
        Logger.realTimeLogList = [];
      };

      Logger.prototype.initReportLog = function (info) {
        Logger._reportLog = UploadLog.init(__assign(__assign({}, info), {
          sessionId: Logger.sessionId
        }));
        this.startReport();
      };

      Logger.prototype.updateUploadLogAttr = function (info) {
        Logger._reportLog && Logger._reportLog.updateUploadLogAttr(info);
      };

      Logger.prototype.startReport = function () {
        var _this = this;

        if (!Logger._reportLog || !Logger._reportLog.logSwitch || !UploadLog.reportSwitch) {
          return;
        }

        var _itv = Logger._reportLog.itv * Math.pow(2, UploadLog.currentRTTimes - 1);

        if (UploadLog.currentRTTimes < Logger._reportLog.times) {
          UploadLog.currentRTTimes++;
        }

        setTimeout(function () {
          var list = Logger.realTimeLogList.filter(function (item) {
            return item.level <= Logger._reportLog.level;
          });

          if (list.length === 0) {
            _this.startReport();
          } else {
            Logger._reportLog.reportRealtimeLog(list).then(function () {
              _this.__clearRealTimeLog();

              _this.debug('report real-time log success');

              _this.startReport();
            })["catch"](function (error) {
              _this.debug('report real-time log error -> ' + error);

              _this.startReport();
            });
          }
        }, _itv * 1000);
      };

      Logger.prototype.reportStatisticsLog = function (tag, content) {
        return __awaiter(this, void 0, void 0, function () {
          var statisticsServerLevel, _content, type, log, list;

          var _this = this;

          return __generator(this, function (_a) {
            if (!tag || !Logger._reportLog) return [2];
            content = isObject(content) ? JSON.stringify(content) : content;
            statisticsServerLevel = 4 - exports.LogLevel.STATISTICS;

            this.__pushLocalLog(statisticsServerLevel, String(content), tag);

            _content = JSON.stringify({
              message: content
            }).replace(/"/g, '""');
            _content = "\"".concat(_content, "\"");
            type = this.type;

            if (!this.type) {
              type = ['RCRTCLog', 'RCCall', 'RCRTC', 'RTC-A'].includes(this.tag) ? LogType.RTC : LogType.IM;
            }

            log = {
              level: statisticsServerLevel,
              content: [Logger.sessionId, Date.now(), type, statisticsServerLevel, tag, _content].join() + '\n'
            };
            Logger.realTimeLogList.push(log);
            list = Logger.realTimeLogList.filter(function (item) {
              return item.level <= Logger._reportLog.level;
            });

            this.__clearRealTimeLog();

            Logger._reportLog.reportRealtimeLog(list).then(function () {
              _this.debug('report real-time log success');
            })["catch"](function (error) {
              _this.debug('report real-time log error -> ' + error);
            });

            return [2];
          });
        });
      };

      Logger.prototype.updateStatisticsBaseData = function (options) {
        this.baseStatisData.sdkPrivate = options.sdkPrivate === EnterpriseType.PRIVATE ? EnterpriseType.PRIVATE : EnterpriseType.OPEN;
        this.baseStatisData.serverPrivate = options.serverPrivate === EnterpriseType.PRIVATE ? EnterpriseType.PRIVATE : EnterpriseType.OPEN;

        if (options.bundleId) {
          this.baseStatisData.bundleId = options.bundleId;
        }
      };

      Logger.prototype.getStatisticsBaseData = function () {
        return this.baseStatisData;
      };

      Logger.prototype.setStatisticsData = function (tag, options, isReset) {
        if (options === void 0) {
          options = {};
        }

        if (isReset === void 0) {
          isReset = false;
        }

        if (!isObject(options) || !tag) return;

        if (!this.statisticsCaches[tag] || isReset) {
          this.statisticsCaches[tag] = {};
        }

        this.statisticsCaches[tag] = __assign(__assign({}, this.statisticsCaches[tag]), options);
      };

      Logger.prototype.getStatisticsData = function (tag) {
        return this.statisticsCaches[tag] || {};
      };

      Logger.databaseLogList = [];
      Logger.realTimeLogList = [];
      Logger.sessionId = getUUID22();
      Logger.userId = '';
      return Logger;
    }();
    var logger$1 = new Logger('RCLog');

    var EventEmitter = function () {
      function EventEmitter() {
        this._map = {};
      }

      EventEmitter.prototype.on = function (eventType, listener, target) {
        var arr = this._map[eventType] || (this._map[eventType] = []);

        if (arr.some(function (item) {
          return item.listener === listener && item.target === target;
        })) {
          return;
        }

        arr.push({
          listener: listener,
          target: target
        });
      };

      EventEmitter.prototype.once = function (eventType, listener, target) {
        var arr = this._map[eventType] || (this._map[eventType] = []);

        if (arr.some(function (item) {
          return item.listener === listener && item.target === target;
        })) {
          return;
        }

        arr.push({
          listener: listener,
          target: target,
          once: true
        });
      };

      EventEmitter.prototype.off = function (eventType, listener, target) {
        var arr = this._map[eventType];

        if (!arr) {
          return;
        }

        arr = arr.filter(function (item) {
          return item.listener !== listener || item.target !== target;
        });

        if (arr.length) {
          this._map[eventType] = arr;
        } else {
          delete this._map[eventType];
        }
      };

      EventEmitter.prototype.emit = function (eventType) {
        var attrs = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          attrs[_i - 1] = arguments[_i];
        }

        var arr = this._map[eventType];

        if (!arr) {
          return;
        }

        for (var i = arr.length - 1; i >= 0; i -= 1) {
          var _a = arr[i],
              target = _a.target,
              once = _a.once,
              listener = _a.listener;
          once && arr.splice(i, 1);

          try {
            listener.call.apply(listener, __spreadArray([target], attrs, false));
          } catch (error) {
            logger$1.error(error);
          }
        }
      };

      EventEmitter.prototype.removeAll = function (eventType) {
        delete this._map[eventType];
      };

      EventEmitter.prototype.clear = function () {
        Object.keys(this._map).forEach(this.removeAll, this);
      };

      return EventEmitter;
    }();

    var MessageDirection;

    (function (MessageDirection) {
      MessageDirection[MessageDirection["SEND"] = 1] = "SEND";
      MessageDirection[MessageDirection["RECEIVE"] = 2] = "RECEIVE";
    })(MessageDirection || (MessageDirection = {}));

    var MessageDirection$1 = MessageDirection;

    var ErrorCode;

    (function (ErrorCode) {
      ErrorCode[ErrorCode["TIMEOUT"] = -1] = "TIMEOUT";
      ErrorCode[ErrorCode["UNKNOWN"] = -2] = "UNKNOWN";
      ErrorCode[ErrorCode["PARAMETER_ERROR"] = -3] = "PARAMETER_ERROR";
      ErrorCode[ErrorCode["EXTRA_METHOD_UNDEFINED"] = -4] = "EXTRA_METHOD_UNDEFINED";
      ErrorCode[ErrorCode["MAIN_PROCESS_ERROR"] = -5] = "MAIN_PROCESS_ERROR";
      ErrorCode[ErrorCode["PARAMETER_CHANGED"] = -6] = "PARAMETER_CHANGED";
      ErrorCode[ErrorCode["SUCCESS"] = 0] = "SUCCESS";
      ErrorCode[ErrorCode["RC_MSG_UNAUTHORIZED"] = 20406] = "RC_MSG_UNAUTHORIZED";
      ErrorCode[ErrorCode["RC_DISCUSSION_GROUP_ID_INVALID"] = 20407] = "RC_DISCUSSION_GROUP_ID_INVALID";
      ErrorCode[ErrorCode["SEND_FREQUENCY_TOO_FAST"] = 20604] = "SEND_FREQUENCY_TOO_FAST";
      ErrorCode[ErrorCode["NOT_IN_DISCUSSION"] = 21406] = "NOT_IN_DISCUSSION";
      ErrorCode[ErrorCode["FORBIDDEN_IN_GROUP"] = 22408] = "FORBIDDEN_IN_GROUP";
      ErrorCode[ErrorCode["RECALL_MESSAGE"] = 25101] = "RECALL_MESSAGE";
      ErrorCode[ErrorCode["NOT_IN_GROUP"] = 22406] = "NOT_IN_GROUP";
      ErrorCode[ErrorCode["NOT_IN_CHATROOM"] = 23406] = "NOT_IN_CHATROOM";
      ErrorCode[ErrorCode["FORBIDDEN_IN_CHATROOM"] = 23408] = "FORBIDDEN_IN_CHATROOM";
      ErrorCode[ErrorCode["RC_CHATROOM_USER_KICKED"] = 23409] = "RC_CHATROOM_USER_KICKED";
      ErrorCode[ErrorCode["RC_CHATROOM_NOT_EXIST"] = 23410] = "RC_CHATROOM_NOT_EXIST";
      ErrorCode[ErrorCode["RC_CHATROOM_IS_FULL"] = 23411] = "RC_CHATROOM_IS_FULL";
      ErrorCode[ErrorCode["RC_CHATROOM_PATAMETER_INVALID"] = 23412] = "RC_CHATROOM_PATAMETER_INVALID";
      ErrorCode[ErrorCode["CHATROOM_GET_HISTORYMSG_ERROR"] = 23413] = "CHATROOM_GET_HISTORYMSG_ERROR";
      ErrorCode[ErrorCode["CHATROOM_NOT_OPEN_HISTORYMSG_STORE"] = 23414] = "CHATROOM_NOT_OPEN_HISTORYMSG_STORE";
      ErrorCode[ErrorCode["CHATROOM_KV_EXCEED"] = 23423] = "CHATROOM_KV_EXCEED";
      ErrorCode[ErrorCode["CHATROOM_KV_OVERWRITE_INVALID"] = 23424] = "CHATROOM_KV_OVERWRITE_INVALID";
      ErrorCode[ErrorCode["CHATROOM_KV_STORE_NOT_OPEN"] = 23426] = "CHATROOM_KV_STORE_NOT_OPEN";
      ErrorCode[ErrorCode["CHATROOM_KEY_NOT_EXIST"] = 23427] = "CHATROOM_KEY_NOT_EXIST";
      ErrorCode[ErrorCode["CHATROOM_KV_SET_ERROR"] = 23431] = "CHATROOM_KV_SET_ERROR";
      ErrorCode[ErrorCode["SENSITIVE_SHIELD"] = 21501] = "SENSITIVE_SHIELD";
      ErrorCode[ErrorCode["SENSITIVE_REPLACE"] = 21502] = "SENSITIVE_REPLACE";
      ErrorCode[ErrorCode["JOIN_IN_DISCUSSION"] = 21407] = "JOIN_IN_DISCUSSION";
      ErrorCode[ErrorCode["CREATE_DISCUSSION"] = 21408] = "CREATE_DISCUSSION";
      ErrorCode[ErrorCode["INVITE_DICUSSION"] = 21409] = "INVITE_DICUSSION";
      ErrorCode[ErrorCode["GET_USERINFO_ERROR"] = 23407] = "GET_USERINFO_ERROR";
      ErrorCode[ErrorCode["REJECTED_BY_BLACKLIST"] = 405] = "REJECTED_BY_BLACKLIST";
      ErrorCode[ErrorCode["RC_NET_CHANNEL_INVALID"] = 30001] = "RC_NET_CHANNEL_INVALID";
      ErrorCode[ErrorCode["RC_NET_UNAVAILABLE"] = 30002] = "RC_NET_UNAVAILABLE";
      ErrorCode[ErrorCode["RC_MSG_RESP_TIMEOUT"] = 30003] = "RC_MSG_RESP_TIMEOUT";
      ErrorCode[ErrorCode["RC_HTTP_SEND_FAIL"] = 30004] = "RC_HTTP_SEND_FAIL";
      ErrorCode[ErrorCode["RC_HTTP_REQ_TIMEOUT"] = 30005] = "RC_HTTP_REQ_TIMEOUT";
      ErrorCode[ErrorCode["RC_HTTP_RECV_FAIL"] = 30006] = "RC_HTTP_RECV_FAIL";
      ErrorCode[ErrorCode["RC_NAVI_RESOURCE_ERROR"] = 30007] = "RC_NAVI_RESOURCE_ERROR";
      ErrorCode[ErrorCode["RC_NODE_NOT_FOUND"] = 30008] = "RC_NODE_NOT_FOUND";
      ErrorCode[ErrorCode["RC_DOMAIN_NOT_RESOLVE"] = 30009] = "RC_DOMAIN_NOT_RESOLVE";
      ErrorCode[ErrorCode["RC_SOCKET_NOT_CREATED"] = 30010] = "RC_SOCKET_NOT_CREATED";
      ErrorCode[ErrorCode["RC_SOCKET_DISCONNECTED"] = 30011] = "RC_SOCKET_DISCONNECTED";
      ErrorCode[ErrorCode["RC_PING_SEND_FAIL"] = 30012] = "RC_PING_SEND_FAIL";
      ErrorCode[ErrorCode["RC_PONG_RECV_FAIL"] = 30013] = "RC_PONG_RECV_FAIL";
      ErrorCode[ErrorCode["RC_MSG_SEND_FAIL"] = 30014] = "RC_MSG_SEND_FAIL";
      ErrorCode[ErrorCode["RC_MSG_CONTENT_EXCEED_LIMIT"] = 30016] = "RC_MSG_CONTENT_EXCEED_LIMIT";
      ErrorCode[ErrorCode["RC_CONN_ACK_TIMEOUT"] = 31000] = "RC_CONN_ACK_TIMEOUT";
      ErrorCode[ErrorCode["RC_CONN_PROTO_VERSION_ERROR"] = 31001] = "RC_CONN_PROTO_VERSION_ERROR";
      ErrorCode[ErrorCode["RC_CONN_ID_REJECT"] = 31002] = "RC_CONN_ID_REJECT";
      ErrorCode[ErrorCode["RC_CONN_SERVER_UNAVAILABLE"] = 31003] = "RC_CONN_SERVER_UNAVAILABLE";
      ErrorCode[ErrorCode["RC_CONN_USER_OR_PASSWD_ERROR"] = 31004] = "RC_CONN_USER_OR_PASSWD_ERROR";
      ErrorCode[ErrorCode["RC_CONN_NOT_AUTHRORIZED"] = 31005] = "RC_CONN_NOT_AUTHRORIZED";
      ErrorCode[ErrorCode["RC_CONN_REDIRECTED"] = 31006] = "RC_CONN_REDIRECTED";
      ErrorCode[ErrorCode["RC_CONN_PACKAGE_NAME_INVALID"] = 31007] = "RC_CONN_PACKAGE_NAME_INVALID";
      ErrorCode[ErrorCode["RC_CONN_APP_BLOCKED_OR_DELETED"] = 31008] = "RC_CONN_APP_BLOCKED_OR_DELETED";
      ErrorCode[ErrorCode["RC_CONN_USER_BLOCKED"] = 31009] = "RC_CONN_USER_BLOCKED";
      ErrorCode[ErrorCode["RC_DISCONN_KICK"] = 31010] = "RC_DISCONN_KICK";
      ErrorCode[ErrorCode["RC_DISCONN_EXCEPTION"] = 31011] = "RC_DISCONN_EXCEPTION";
      ErrorCode[ErrorCode["RC_APP_AUTH_NOT_PASS"] = 31026] = "RC_APP_AUTH_NOT_PASS";
      ErrorCode[ErrorCode["RC_OTP_USED"] = 31027] = "RC_OTP_USED";
      ErrorCode[ErrorCode["RC_PLATFORM_ERROR"] = 31028] = "RC_PLATFORM_ERROR";
      ErrorCode[ErrorCode["RC_QUERY_ACK_NO_DATA"] = 32001] = "RC_QUERY_ACK_NO_DATA";
      ErrorCode[ErrorCode["RC_MSG_DATA_INCOMPLETE"] = 32002] = "RC_MSG_DATA_INCOMPLETE";
      ErrorCode[ErrorCode["BIZ_ERROR_CLIENT_NOT_INIT"] = 33001] = "BIZ_ERROR_CLIENT_NOT_INIT";
      ErrorCode[ErrorCode["BIZ_ERROR_DATABASE_ERROR"] = 33002] = "BIZ_ERROR_DATABASE_ERROR";
      ErrorCode[ErrorCode["BIZ_ERROR_INVALID_PARAMETER"] = 33003] = "BIZ_ERROR_INVALID_PARAMETER";
      ErrorCode[ErrorCode["BIZ_ERROR_NO_CHANNEL"] = 33004] = "BIZ_ERROR_NO_CHANNEL";
      ErrorCode[ErrorCode["BIZ_ERROR_RECONNECT_SUCCESS"] = 33005] = "BIZ_ERROR_RECONNECT_SUCCESS";
      ErrorCode[ErrorCode["BIZ_ERROR_CONNECTING"] = 33006] = "BIZ_ERROR_CONNECTING";
      ErrorCode[ErrorCode["MSG_ROAMING_SERVICE_UNAVAILABLE"] = 33007] = "MSG_ROAMING_SERVICE_UNAVAILABLE";
      ErrorCode[ErrorCode["MSG_INSERT_ERROR"] = 33008] = "MSG_INSERT_ERROR";
      ErrorCode[ErrorCode["MSG_DEL_ERROR"] = 33009] = "MSG_DEL_ERROR";
      ErrorCode[ErrorCode["TAG_EXISTS"] = 33101] = "TAG_EXISTS";
      ErrorCode[ErrorCode["TAG_NOT_EXIST"] = 33100] = "TAG_NOT_EXIST";
      ErrorCode[ErrorCode["NO_TAG_IN_CONVER"] = 33102] = "NO_TAG_IN_CONVER";
      ErrorCode[ErrorCode["CONVER_REMOVE_ERROR"] = 34001] = "CONVER_REMOVE_ERROR";
      ErrorCode[ErrorCode["CONVER_GETLIST_ERROR"] = 34002] = "CONVER_GETLIST_ERROR";
      ErrorCode[ErrorCode["CONVER_SETOP_ERROR"] = 34003] = "CONVER_SETOP_ERROR";
      ErrorCode[ErrorCode["CONVER_TOTAL_UNREAD_ERROR"] = 34004] = "CONVER_TOTAL_UNREAD_ERROR";
      ErrorCode[ErrorCode["CONVER_TYPE_UNREAD_ERROR"] = 34005] = "CONVER_TYPE_UNREAD_ERROR";
      ErrorCode[ErrorCode["CONVER_ID_TYPE_UNREAD_ERROR"] = 34006] = "CONVER_ID_TYPE_UNREAD_ERROR";
      ErrorCode[ErrorCode["CONVER_CLEAR_ERROR"] = 34007] = "CONVER_CLEAR_ERROR";
      ErrorCode[ErrorCode["EXPANSION_LIMIT_EXCEET"] = 34010] = "EXPANSION_LIMIT_EXCEET";
      ErrorCode[ErrorCode["MESSAGE_KV_NOT_SUPPORT"] = 34008] = "MESSAGE_KV_NOT_SUPPORT";
      ErrorCode[ErrorCode["CLEAR_HIS_TIME_ERROR"] = 34011] = "CLEAR_HIS_TIME_ERROR";
      ErrorCode[ErrorCode["CONVER_OUT_LIMIT_ERROR"] = 34013] = "CONVER_OUT_LIMIT_ERROR";
      ErrorCode[ErrorCode["CONVER_GET_ERROR"] = 35021] = "CONVER_GET_ERROR";
      ErrorCode[ErrorCode["GROUP_SYNC_ERROR"] = 35001] = "GROUP_SYNC_ERROR";
      ErrorCode[ErrorCode["GROUP_MATCH_ERROR"] = 35002] = "GROUP_MATCH_ERROR";
      ErrorCode[ErrorCode["READ_RECEIPT_ERROR"] = 35003] = "READ_RECEIPT_ERROR";
      ErrorCode[ErrorCode["PACKAGE_ENVIRONMENT_ERROR"] = 35006] = "PACKAGE_ENVIRONMENT_ERROR";
      ErrorCode[ErrorCode["CAN_NOT_RECONNECT"] = 35007] = "CAN_NOT_RECONNECT";
      ErrorCode[ErrorCode["SERVER_UNAVAILABLE"] = 35008] = "SERVER_UNAVAILABLE";
      ErrorCode[ErrorCode["HOSTNAME_ERROR"] = 35009] = "HOSTNAME_ERROR";
      ErrorCode[ErrorCode["HAS_OHTER_SAME_CLIENT_ON_LINE"] = 35010] = "HAS_OHTER_SAME_CLIENT_ON_LINE";
      ErrorCode[ErrorCode["METHOD_NOT_AVAILABLE"] = 35011] = "METHOD_NOT_AVAILABLE";
      ErrorCode[ErrorCode["METHOD_NOT_SUPPORT"] = 35012] = "METHOD_NOT_SUPPORT";
      ErrorCode[ErrorCode["MSG_LIMIT_ERROR"] = 35013] = "MSG_LIMIT_ERROR";
      ErrorCode[ErrorCode["METHOD_ONLY_SUPPORT_ULTRA_GROUP"] = 35014] = "METHOD_ONLY_SUPPORT_ULTRA_GROUP";
      ErrorCode[ErrorCode["UPLOAD_FILE_FAILED"] = 35020] = "UPLOAD_FILE_FAILED";
      ErrorCode[ErrorCode["CHATROOM_ID_ISNULL"] = 36001] = "CHATROOM_ID_ISNULL";
      ErrorCode[ErrorCode["CHARTOOM_JOIN_ERROR"] = 36002] = "CHARTOOM_JOIN_ERROR";
      ErrorCode[ErrorCode["CHATROOM_HISMESSAGE_ERROR"] = 36003] = "CHATROOM_HISMESSAGE_ERROR";
      ErrorCode[ErrorCode["CHATROOM_KV_NOT_FOUND"] = 36004] = "CHATROOM_KV_NOT_FOUND";
      ErrorCode[ErrorCode["BLACK_ADD_ERROR"] = 37001] = "BLACK_ADD_ERROR";
      ErrorCode[ErrorCode["BLACK_GETSTATUS_ERROR"] = 37002] = "BLACK_GETSTATUS_ERROR";
      ErrorCode[ErrorCode["BLACK_REMOVE_ERROR"] = 37003] = "BLACK_REMOVE_ERROR";
      ErrorCode[ErrorCode["DRAF_GET_ERROR"] = 38001] = "DRAF_GET_ERROR";
      ErrorCode[ErrorCode["DRAF_SAVE_ERROR"] = 38002] = "DRAF_SAVE_ERROR";
      ErrorCode[ErrorCode["DRAF_REMOVE_ERROR"] = 38003] = "DRAF_REMOVE_ERROR";
      ErrorCode[ErrorCode["SUBSCRIBE_ERROR"] = 39001] = "SUBSCRIBE_ERROR";
      ErrorCode[ErrorCode["NOT_SUPPORT"] = 39002] = "NOT_SUPPORT";
      ErrorCode[ErrorCode["QNTKN_FILETYPE_ERROR"] = 41001] = "QNTKN_FILETYPE_ERROR";
      ErrorCode[ErrorCode["QNTKN_GET_ERROR"] = 41002] = "QNTKN_GET_ERROR";
      ErrorCode[ErrorCode["COOKIE_ENABLE"] = 51001] = "COOKIE_ENABLE";
      ErrorCode[ErrorCode["GET_MESSAGE_BY_ID_ERROR"] = 61001] = "GET_MESSAGE_BY_ID_ERROR";
      ErrorCode[ErrorCode["HAVNODEVICEID"] = 24001] = "HAVNODEVICEID";
      ErrorCode[ErrorCode["DEVICEIDISHAVE"] = 24002] = "DEVICEIDISHAVE";
      ErrorCode[ErrorCode["FEILD"] = 24009] = "FEILD";
      ErrorCode[ErrorCode["VOIPISNULL"] = 24013] = "VOIPISNULL";
      ErrorCode[ErrorCode["NOENGINETYPE"] = 24010] = "NOENGINETYPE";
      ErrorCode[ErrorCode["NULLCHANNELNAME"] = 24011] = "NULLCHANNELNAME";
      ErrorCode[ErrorCode["VOIPDYANMICERROR"] = 24012] = "VOIPDYANMICERROR";
      ErrorCode[ErrorCode["NOVOIP"] = 24014] = "NOVOIP";
      ErrorCode[ErrorCode["INTERNALERRROR"] = 24015] = "INTERNALERRROR";
      ErrorCode[ErrorCode["VOIPCLOSE"] = 24016] = "VOIPCLOSE";
      ErrorCode[ErrorCode["CLOSE_BEFORE_OPEN"] = 51001] = "CLOSE_BEFORE_OPEN";
      ErrorCode[ErrorCode["ALREADY_IN_USE"] = 51002] = "ALREADY_IN_USE";
      ErrorCode[ErrorCode["INVALID_CHANNEL_NAME"] = 51003] = "INVALID_CHANNEL_NAME";
      ErrorCode[ErrorCode["VIDEO_CONTAINER_IS_NULL"] = 51004] = "VIDEO_CONTAINER_IS_NULL";
      ErrorCode[ErrorCode["DELETE_MESSAGE_ID_IS_NULL"] = 61001] = "DELETE_MESSAGE_ID_IS_NULL";
      ErrorCode[ErrorCode["CANCEL"] = 1] = "CANCEL";
      ErrorCode[ErrorCode["REJECT"] = 2] = "REJECT";
      ErrorCode[ErrorCode["HANGUP"] = 3] = "HANGUP";
      ErrorCode[ErrorCode["BUSYLINE"] = 4] = "BUSYLINE";
      ErrorCode[ErrorCode["NO_RESPONSE"] = 5] = "NO_RESPONSE";
      ErrorCode[ErrorCode["ENGINE_UN_SUPPORTED"] = 6] = "ENGINE_UN_SUPPORTED";
      ErrorCode[ErrorCode["NETWORK_ERROR"] = 7] = "NETWORK_ERROR";
      ErrorCode[ErrorCode["REMOTE_CANCEL"] = 11] = "REMOTE_CANCEL";
      ErrorCode[ErrorCode["REMOTE_REJECT"] = 12] = "REMOTE_REJECT";
      ErrorCode[ErrorCode["REMOTE_HANGUP"] = 13] = "REMOTE_HANGUP";
      ErrorCode[ErrorCode["REMOTE_BUSYLINE"] = 14] = "REMOTE_BUSYLINE";
      ErrorCode[ErrorCode["REMOTE_NO_RESPONSE"] = 15] = "REMOTE_NO_RESPONSE";
      ErrorCode[ErrorCode["REMOTE_ENGINE_UN_SUPPORTED"] = 16] = "REMOTE_ENGINE_UN_SUPPORTED";
      ErrorCode[ErrorCode["REMOTE_NETWORK_ERROR"] = 17] = "REMOTE_NETWORK_ERROR";
      ErrorCode[ErrorCode["VOIP_NOT_AVALIABLE"] = 18] = "VOIP_NOT_AVALIABLE";
      ErrorCode[ErrorCode["CHATROOM_KV_STORE_NOT_ALL_SUCCESS"] = 23428] = "CHATROOM_KV_STORE_NOT_ALL_SUCCESS";
      ErrorCode[ErrorCode["CHATROOM_KV_STORE_OUT_LIMIT"] = 23429] = "CHATROOM_KV_STORE_OUT_LIMIT";
    })(ErrorCode || (ErrorCode = {}));

    var ErrorCode$1 = ErrorCode;

    var ConnectionStatus;

    (function (ConnectionStatus) {
      ConnectionStatus[ConnectionStatus["CONNECTED"] = 0] = "CONNECTED";
      ConnectionStatus[ConnectionStatus["CONNECTING"] = 1] = "CONNECTING";
      ConnectionStatus[ConnectionStatus["DISCONNECTED"] = 2] = "DISCONNECTED";
      ConnectionStatus[ConnectionStatus["NETWORK_UNAVAILABLE"] = 3] = "NETWORK_UNAVAILABLE";
      ConnectionStatus[ConnectionStatus["CONNECTION_CLOSED"] = 4] = "CONNECTION_CLOSED";
      ConnectionStatus[ConnectionStatus["KICKED_OFFLINE_BY_OTHER_CLIENT"] = 6] = "KICKED_OFFLINE_BY_OTHER_CLIENT";
      ConnectionStatus[ConnectionStatus["WEBSOCKET_UNAVAILABLE"] = 7] = "WEBSOCKET_UNAVAILABLE";
      ConnectionStatus[ConnectionStatus["WEBSOCKET_ERROR"] = 8] = "WEBSOCKET_ERROR";
      ConnectionStatus[ConnectionStatus["BLOCKED"] = 9] = "BLOCKED";
      ConnectionStatus[ConnectionStatus["DOMAIN_INCORRECT"] = 12] = "DOMAIN_INCORRECT";
      ConnectionStatus[ConnectionStatus["DISCONNECT_BY_SERVER"] = 13] = "DISCONNECT_BY_SERVER";
      ConnectionStatus[ConnectionStatus["REDIRECT"] = 14] = "REDIRECT";
      ConnectionStatus[ConnectionStatus["APPKEY_IS_FAKE"] = 20] = "APPKEY_IS_FAKE";
      ConnectionStatus[ConnectionStatus["ULTRALIMIT"] = 1101] = "ULTRALIMIT";
      ConnectionStatus[ConnectionStatus["REQUEST_NAVI"] = 201] = "REQUEST_NAVI";
      ConnectionStatus[ConnectionStatus["RESPONSE_NAVI"] = 202] = "RESPONSE_NAVI";
      ConnectionStatus[ConnectionStatus["RESPONSE_NAVI_ERROR"] = 203] = "RESPONSE_NAVI_ERROR";
      ConnectionStatus[ConnectionStatus["RESPONSE_NAVI_TIMEOUT"] = 204] = "RESPONSE_NAVI_TIMEOUT";
    })(ConnectionStatus || (ConnectionStatus = {}));

    var ConnectionStatus$1 = ConnectionStatus;

    var ConnectResultCode = {
      ACCEPTED: 0,
      UNACCEPTABLE_PROTOCOL_VERSION: 1,
      IDENTIFIER_REJECTED: 2,
      SERVER_UNAVAILABLE: 3,
      TOKEN_INCORRECT: 4,
      NOT_AUTHORIZED: 5,
      REDIRECT: 6,
      PACKAGE_ERROR: 7,
      APP_BLOCK_OR_DELETE: 8,
      BLOCK: 9,
      TOKEN_EXPIRE: 10,
      DEVICE_ERROR: 11,
      HOSTNAME_ERROR: 12,
      HASOHTERSAMECLIENTONLINE: 13,
      IN_OTHER_CLUSTER: 15,
      APP_AUTH_NOT_PASS: 16,
      OTP_USED: 17,
      PLATFORM_ERROR: 18
    };

    var MessageType$1;

    (function (MessageType) {
      MessageType["TextMessage"] = "RC:TxtMsg";
      MessageType["VOICE"] = "RC:VcMsg";
      MessageType["HQ_VOICE"] = "RC:HQVCMsg";
      MessageType["IMAGE"] = "RC:ImgMsg";
      MessageType["GIF"] = "RC:GIFMsg";
      MessageType["RICH_CONTENT"] = "RC:ImgTextMsg";
      MessageType["LOCATION"] = "RC:LBSMsg";
      MessageType["FILE"] = "RC:FileMsg";
      MessageType["SIGHT"] = "RC:SightMsg";
      MessageType["COMBINE"] = "RC:CombineMsg";
      MessageType["CHRM_KV_NOTIFY"] = "RC:chrmKVNotiMsg";
      MessageType["LOG_COMMAND"] = "RC:LogCmdMsg";
      MessageType["EXPANSION_NOTIFY"] = "RC:MsgExMsg";
      MessageType["REFERENCE"] = "RC:ReferenceMsg";
      MessageType["RECALL"] = "RC:RcCmd";
      MessageType["READ_RECEIPT"] = "RC:ReadNtf";
      MessageType["READ_RECEIPT_REQUEST"] = "RC:RRReqMsg";
      MessageType["READ_RECEIPT_RESPONSE"] = "RC:RRRspMsg";
      MessageType["SYNC_READ_STATUS"] = "RC:SRSMsg";
      MessageType["GROUP_READ_RECEIPT_REQUEST"] = "RC:RRMsg";
      MessageType["CHATROOM_JOIN"] = "RC:ChrmJoinNtf";
      MessageType["CHATROOM_LEFT"] = "RC:ChrmQuitNtf";
      MessageType["CHATROOM_MERGE_CHANGE"] = "RC:ChrmMemChange";
      MessageType["TYPING_STATUS"] = "RC:TypSts";
      MessageType["INTERCEPT"] = "RC:InterceptMsg";
    })(MessageType$1 || (MessageType$1 = {}));

    var MessageType$2 = MessageType$1;

    var NotificationStatus;

    (function (NotificationStatus) {
      NotificationStatus[NotificationStatus["OPEN"] = 1] = "OPEN";
      NotificationStatus[NotificationStatus["CLOSE"] = 2] = "CLOSE";
    })(NotificationStatus || (NotificationStatus = {}));

    var NotificationStatus$1 = NotificationStatus;

    var NotificationLevel;

    (function (NotificationLevel) {
      NotificationLevel[NotificationLevel["ALL_MESSAGE"] = -1] = "ALL_MESSAGE";
      NotificationLevel[NotificationLevel["NOT_SET"] = 0] = "NOT_SET";
      NotificationLevel[NotificationLevel["AT_MESSAGE_NOTIFICATION"] = 1] = "AT_MESSAGE_NOTIFICATION";
      NotificationLevel[NotificationLevel["AT_USER_NOTIFICATION"] = 2] = "AT_USER_NOTIFICATION";
      NotificationLevel[NotificationLevel["AT_GROUP_ALL_USER_NOTIFICATION"] = 4] = "AT_GROUP_ALL_USER_NOTIFICATION";
      NotificationLevel[NotificationLevel["NOT_MESSAGE_NOTIFICATION"] = 5] = "NOT_MESSAGE_NOTIFICATION";
    })(NotificationLevel || (NotificationLevel = {}));

    var NotificationLevel$1 = NotificationLevel;

    var MentionedType;

    (function (MentionedType) {
      MentionedType[MentionedType["ALL"] = 1] = "ALL";
      MentionedType[MentionedType["SINGAL"] = 2] = "SINGAL";
    })(MentionedType || (MentionedType = {}));

    var MentionedType$1 = MentionedType;

    var UploadMethod;

    (function (UploadMethod) {
      UploadMethod[UploadMethod["QINIU"] = 1] = "QINIU";
      UploadMethod[UploadMethod["ALI"] = 2] = "ALI";
      UploadMethod[UploadMethod["AWS"] = 3] = "AWS";
      UploadMethod[UploadMethod["STC"] = 4] = "STC";
    })(UploadMethod || (UploadMethod = {}));

    var UploadMethod$1 = UploadMethod;

    var ChatroomEntryType;

    (function (ChatroomEntryType) {
      ChatroomEntryType[ChatroomEntryType["UPDATE"] = 1] = "UPDATE";
      ChatroomEntryType[ChatroomEntryType["DELETE"] = 2] = "DELETE";
    })(ChatroomEntryType || (ChatroomEntryType = {}));

    var ChatroomEntryType$1 = ChatroomEntryType;

    var ChatroomUserChangeType;

    (function (ChatroomUserChangeType) {
      ChatroomUserChangeType[ChatroomUserChangeType["QUIT"] = 0] = "QUIT";
      ChatroomUserChangeType[ChatroomUserChangeType["JOIN"] = 1] = "JOIN";
    })(ChatroomUserChangeType || (ChatroomUserChangeType = {}));

    var ChatroomUserChangeType$1 = ChatroomUserChangeType;

    var MessageBlockType;

    (function (MessageBlockType) {
      MessageBlockType[MessageBlockType["GLOBAL"] = 1] = "GLOBAL";
      MessageBlockType[MessageBlockType["CUSTOM"] = 2] = "CUSTOM";
      MessageBlockType[MessageBlockType["THIRD_PARTY"] = 3] = "THIRD_PARTY";
    })(MessageBlockType || (MessageBlockType = {}));

    var MessageBlockType$1 = MessageBlockType;

    var OperateStatus;

    (function (OperateStatus) {
      OperateStatus[OperateStatus["typing"] = 0] = "typing";
    })(OperateStatus || (OperateStatus = {}));

    var OperateStatus$1 = OperateStatus;

    var RTCMode;

    (function (RTCMode) {
      RTCMode[RTCMode["RTC"] = 0] = "RTC";
      RTCMode[RTCMode["LIVE"] = 2] = "LIVE";
    })(RTCMode || (RTCMode = {}));

    var LiveType;

    (function (LiveType) {
      LiveType[LiveType["AUDIO_AND_VIDEO"] = 0] = "AUDIO_AND_VIDEO";
      LiveType[LiveType["AUDIO"] = 1] = "AUDIO";
    })(LiveType || (LiveType = {}));

    var LiveRole;

    (function (LiveRole) {
      LiveRole[LiveRole["ANCHOR"] = 1] = "ANCHOR";
      LiveRole[LiveRole["AUDIENCE"] = 2] = "AUDIENCE";
    })(LiveRole || (LiveRole = {}));

    var CallLibMsgType = {
      'RC:VCAccept': 'RC:VCAccept',
      'RC:VCRinging': 'RC:VCRinging',
      'RC:VCSummary': 'RC:VCSummary',
      'RC:VCHangup': 'RC:VCHangup',
      'RC:VCInvite': 'RC:VCInvite',
      'RC:VCModifyMedia': 'RC:VCModifyMedia',
      'RC:VCModifyMem': 'RC:VCModifyMem'
    };
    var RTCApiType;

    (function (RTCApiType) {
      RTCApiType[RTCApiType["ROOM"] = 1] = "ROOM";
      RTCApiType[RTCApiType["PERSON"] = 2] = "PERSON";
    })(RTCApiType || (RTCApiType = {}));

    var RTCIdentityChangeType;

    (function (RTCIdentityChangeType) {
      RTCIdentityChangeType[RTCIdentityChangeType["AnchorToViewer"] = 1] = "AnchorToViewer";
      RTCIdentityChangeType[RTCIdentityChangeType["ViewerToAnchor"] = 2] = "ViewerToAnchor";
    })(RTCIdentityChangeType || (RTCIdentityChangeType = {}));

    var RTCJoinType;

    (function (RTCJoinType) {
      RTCJoinType[RTCJoinType["KICK"] = 0] = "KICK";
      RTCJoinType[RTCJoinType["REFUSE"] = 1] = "REFUSE";
      RTCJoinType[RTCJoinType["COEXIST"] = 2] = "COEXIST";
    })(RTCJoinType || (RTCJoinType = {}));

    var versionInfo = function () {
      if (typeof window !== 'undefined' && window) {
        if (!window.__RCVersionInfo) {
          window.__RCVersionInfo = {};
        }

        return window.__RCVersionInfo;
      } else {
        return {};
      }
    }();

    versionInfo.engine = "5.3.2";

    var VersionManage = function () {
      function VersionManage() {}

      VersionManage.add = function (name, version) {
        versionInfo[name] = version;
      };

      VersionManage.validEngine = function (version) {
        var expectVersionArr = version.match(/\d+\.\d+\.\d+/);

        if (!expectVersionArr) {
          logger$1.warn("The validation engine version '".concat(version, "' is invalid!"));
          return false;
        }

        var expectVersion = expectVersionArr[0].split('.').map(function (i) {
          return i.padStart(3, '0');
        }).join('');
        var curVersionArr = versionInfo.engine.match(/\d+\.\d+\.\d+/);
        var curVersion = curVersionArr[0].split('.').map(function (i) {
          return i.padStart(3, '0');
        }).join('');
        return curVersion >= expectVersion;
      };

      VersionManage.getInfo = function () {
        return versionInfo;
      };

      return VersionManage;
    }();

    var _a$3;
    var AssertRules;

    (function (AssertRules) {
      AssertRules[AssertRules["STRING"] = 0] = "STRING";
      AssertRules[AssertRules["ONLY_STRING"] = 1] = "ONLY_STRING";
      AssertRules[AssertRules["NUMBER"] = 2] = "NUMBER";
      AssertRules[AssertRules["BOOLEAN"] = 3] = "BOOLEAN";
      AssertRules[AssertRules["OBJECT"] = 4] = "OBJECT";
      AssertRules[AssertRules["ARRAY"] = 5] = "ARRAY";
      AssertRules[AssertRules["CALLBACK"] = 6] = "CALLBACK";
      AssertRules[AssertRules["CHANNEL_ID"] = 7] = "CHANNEL_ID";
    })(AssertRules || (AssertRules = {}));

    var validators = (_a$3 = {}, _a$3[AssertRules.STRING] = notEmptyString, _a$3[AssertRules.ONLY_STRING] = isString, _a$3[AssertRules.NUMBER] = isNumber, _a$3[AssertRules.BOOLEAN] = function (value) {
      return typeof value === 'boolean';
    }, _a$3[AssertRules.OBJECT] = isObject, _a$3[AssertRules.ARRAY] = isArray, _a$3[AssertRules.CALLBACK] = function (callback) {
      var flag = true;

      if (!isObject(callback)) {
        flag = false;
      }

      callback = callback || {};

      if (callback.onSuccess && !isFunction(callback.onSuccess)) {
        flag = false;
      }

      if (callback.onError && !isFunction(callback.onError)) {
        flag = false;
      }

      return flag;
    }, _a$3[AssertRules.CHANNEL_ID] = function (value) {
      var flag = false;

      if (isString(value) && !/_/g.test(value) && value.length <= 20) {
        flag = true;
      }

      return flag;
    }, _a$3);

    var RCAssertError = function (_super) {
      __extends(RCAssertError, _super);

      function RCAssertError(message) {
        var _this = _super.call(this, message) || this;

        _this.name = 'RCAssertError';
        return _this;
      }

      return RCAssertError;
    }(Error);
    var assert = function assert(key, value, validator, required) {
      if (required === void 0) {
        required = false;
      }

      if (!validate(key, value, validator, required)) {
        throw new RCAssertError("'".concat(key, "' is invalid: ").concat(JSON.stringify(value)));
      }
    };
    var validate = function validate(key, value, validator, required) {
      if (required === void 0) {
        required = false;
      }

      validator = validators[validator] || validator;
      var invalid = required && !validator(value) || !required && !(isUndefined(value) || value === null || validator(value));

      if (invalid) {
        logger$1.error("'".concat(key, "' is invalid: ").concat(JSON.stringify(value)));
      }

      return !invalid;
    };

    var timerSetTimeout = function timerSetTimeout(fun, itv) {
      return setTimeout(fun, itv);
    };
    var int64ToTimestamp = function int64ToTimestamp(obj) {
      if (!isObject(obj) || obj.low === undefined || obj.high === undefined) {
        return obj;
      }

      var low = obj.low;

      if (low < 0) {
        low += 0xffffffff + 1;
      }

      low = low.toString(16);
      var timestamp = parseInt(obj.high.toString(16) + '00000000'.replace(new RegExp('0{' + low.length + '}$'), low), 16);
      return timestamp;
    };
    var batchInt64ToTimestamp = function batchInt64ToTimestamp(data) {
      for (var key in data) {
        if (isObject(data[key])) {
          data[key] = int64ToTimestamp(data[key]);
        }
      }

      return data;
    };
    var formatDate = function formatDate(seperator) {
      seperator = seperator || '-';
      var date = new Date();
      var year = date.getFullYear();
      var month = date.getMonth() + 1;
      var day = date.getDate();
      return "".concat(year).concat(seperator).concat(month).concat(seperator).concat(day);
    };

    var getUploadFileName = function getUploadFileName(type, fileName) {
      var random = Math.floor(Math.random() * 1000 % 10000);
      var uuid = getUUID();
      var date = formatDate();
      var timestamp = new Date().getTime();
      var extension = '';

      if (fileName) {
        var fileNameArr = fileName.split('.');
        extension = '.' + fileNameArr[fileNameArr.length - 1];
      }

      return "".concat(type, "__RC-").concat(date, "_").concat(random, "_").concat(timestamp).concat(uuid).concat(extension);
    };
    var getMimeKey = function getMimeKey(fileType) {
      var mimeKey = 'application/octet-stream';

      switch (fileType) {
        case FileType$1.IMAGE:
          mimeKey = 'image/jpeg';
          break;

        case FileType$1.AUDIO:
          mimeKey = 'audio/amr';
          break;

        case FileType$1.VIDEO:
          mimeKey = 'video/3gpp';
          break;

        case FileType$1.SIGHT:
          mimeKey = 'video/mpeg4';
          break;

        case FileType$1.COMBINE_HTML:
          mimeKey = 'text/html';
          break;
      }

      return mimeKey;
    };
    var pushConfigsToJSON = function pushConfigsToJSON(iOSConfig, androidConfig) {
      if (iOSConfig === void 0) {
        iOSConfig = {};
      }

      if (androidConfig === void 0) {
        androidConfig = {};
      }

      var threadId = iOSConfig.threadId,
          apnsCollapseId = iOSConfig.apnsCollapseId,
          category = iOSConfig.category,
          richMediaUri = iOSConfig.richMediaUri;
      var channelIdMi = androidConfig.channelIdMi,
          channelIdHW = androidConfig.channelIdHW,
          channelIdOPPO = androidConfig.channelIdOPPO,
          typeVivo = androidConfig.typeVivo,
          googleConfig = androidConfig.googleConfig;
      var APNS = {};
      APNS['thread-id'] = threadId || '';
      APNS['apns-collapse-id'] = apnsCollapseId || '';
      APNS.category = category || '';
      APNS.richMediaUri = richMediaUri || '';
      var FCM = {};
      FCM.collapse_key = googleConfig === null || googleConfig === void 0 ? void 0 : googleConfig.collapseKey;
      FCM.imageUrl = googleConfig === null || googleConfig === void 0 ? void 0 : googleConfig.imageUrl;
      var priority = googleConfig === null || googleConfig === void 0 ? void 0 : googleConfig.priority;
      if (priority && !['high', 'normal'].includes(priority)) priority = 'normal';
      FCM.priority = priority;
      var pushCongfigs = [{
        HW: {
          channelId: channelIdHW || ''
        }
      }, {
        MI: {
          channelId: channelIdMi || ''
        }
      }, {
        OPPO: {
          channelId: channelIdOPPO || ''
        }
      }, {
        VIVO: {
          classification: typeVivo || ''
        }
      }, {
        APNS: APNS
      }, {
        FCM: FCM
      }];
      return JSON.stringify(pushCongfigs);
    };
    var pushJSONToConfigs = function pushJSONToConfigs(pushStr, pushId) {
      var iOSConfig = {};
      var androidConfig = {
        notificationId: pushId || ''
      };

      if (!pushStr) {
        return {
          iOSConfig: iOSConfig,
          androidConfig: androidConfig
        };
      }

      try {
        var config = JSON.parse(pushStr);
        config === null || config === void 0 ? void 0 : config.forEach(function (item) {
          var _a, _b, _c, _d;

          var keys = Object.keys(item);
          if (keys.length === 0) return;
          var key = keys[0];

          switch (key) {
            case 'HW':
              androidConfig.channelIdHW = (_a = item[key]) === null || _a === void 0 ? void 0 : _a.channelId;
              return;

            case 'MI':
              androidConfig.channelIdMi = (_b = item[key]) === null || _b === void 0 ? void 0 : _b.channelId;
              return;

            case 'OPPO':
              androidConfig.channelIdOPPO = (_c = item[key]) === null || _c === void 0 ? void 0 : _c.channelId;
              return;

            case 'VIVO':
              androidConfig.typeVivo = (_d = item[key]) === null || _d === void 0 ? void 0 : _d.classification;
              return;

            case 'APNS':
              iOSConfig.threadId = item[key]['thread-id'];
              iOSConfig.apnsCollapseId = item[key]['apns-collapse-id'];
              iOSConfig.category = item[key].category;
              iOSConfig.richMediaUri = item[key].richMediaUri;
              return;

            case 'FCM':
              androidConfig.googleConfig = {
                collapseKey: item[key].collapse_key || '',
                imageUrl: item[key].imageUrl || '',
                priority: item[key].priority || ''
              };
          }
        });
      } catch (error) {
        logger$1.error('Wrong format for pushConfigs field! content: ' + pushStr);
      }

      return {
        iOSConfig: iOSConfig,
        androidConfig: androidConfig
      };
    };
    var isValidChrmEntryKey = function isValidChrmEntryKey(key) {
      var isValid = /^[A-Za-z0-9_=+-]+$/.test(key);
      var keyLen = key.length;
      var isLimit = keyLen <= 128 && keyLen >= 1;
      return isValid && isLimit;
    };
    var isValidChrmEntryValue = function isValidChrmEntryValue(value) {
      var length = value.length;
      return length <= 4096 && length >= 1;
    };

    var forEach$1 = function forEach(source, event, options) {
      options = options || {};

      event = event || function () {};

      var isReverse = options.isReverse;

      var loopObj = function loopObj() {
        for (var key in source) {
          event(source[key], key, source);
        }
      };

      var loopArr = function loopArr() {
        if (isReverse) {
          for (var i = source.length - 1; i >= 0; i--) {
            event(source[i], i);
          }
        } else {
          for (var j = 0, len = source.length; j < len; j++) {
            event(source[j], j);
          }
        }
      };

      if (isObject(source)) {
        loopObj();
      }

      if (isArray(source) || isString(source)) {
        loopArr();
      }
    };
    var map = function map(source, event) {
      forEach$1(source, function (item, index) {
        source[index] = event(item, index);
      });
      return source;
    };
    var indexOf = function indexOf(source, searchVal) {
      if (source.indexOf) {
        return source.indexOf(searchVal);
      }

      var index = -1;
      forEach$1(source, function (sub, i) {
        if (searchVal === sub) {
          index = i;
        }
      });
      return index;
    };
    var isInclude = function isInclude(source, searchVal) {
      var index = indexOf(source, searchVal);
      return index !== -1;
    };
    var isInObject = function isInObject(source, searchVal) {
      var arr = [];
      forEach$1(source, function (val) {
        arr.push(val);
      });
      var index = indexOf(arr, searchVal);
      return index !== -1;
    };
    var cloneByJSON = function cloneByJSON(sourceObj) {
      return JSON.parse(JSON.stringify(sourceObj));
    };
    var usingCppEngine = function usingCppEngine() {
      return typeof RCCppEngine !== 'undefined';
    };
    var getBrowser = function getBrowser(runtime) {
      if (runtime.tag !== 'browser') {
        return {
          type: runtime.tag,
          version: 'UnKonw'
        };
      }

      var userAgent = navigator.userAgent;
      var version;
      var type;
      var condition = {
        IE: /rv:([\d.]+)\) like Gecko|MSIE ([\d.]+)/,
        Edge: /Edge\/([\d.]+)/,
        Firefox: /Firefox\/([\d.]+)/,
        Opera: /(?:OPERA|OPR).([\d.]+)/,
        WeChat: /MicroMessenger\/([\d.]+)/,
        QQBrowser: /QQBrowser\/([\d.]+)/,
        Chrome: /Chrome\/([\d.]+)/,
        Safari: /Version\/([\d.]+).*Safari/,
        iOSChrome: /Mobile\/([\d.]+).*Safari/
      };

      for (var key in condition) {
        if (!condition.hasOwnProperty(key)) continue;
        var browserContent = userAgent.match(condition[key]);

        if (browserContent) {
          type = key;
          version = browserContent[1] || browserContent[2];
          break;
        }
      }

      return {
        type: type || 'UnKonw',
        version: version || 'UnKonw'
      };
    };
    var formatConnectResponseCode = function formatConnectResponseCode(code) {
      switch (code) {
        case ConnectResultCode.SERVER_UNAVAILABLE:
          return ErrorCode$1.SERVER_UNAVAILABLE;

        case ConnectResultCode.TOKEN_INCORRECT:
          return ErrorCode$1.RC_CONN_USER_OR_PASSWD_ERROR;

        case ConnectResultCode.REDIRECT:
          return ErrorCode$1.RC_CONN_REDIRECTED;

        case ConnectResultCode.APP_BLOCK_OR_DELETE:
          return ErrorCode$1.RC_CONN_APP_BLOCKED_OR_DELETED;

        case ConnectResultCode.BLOCK:
          return ErrorCode$1.RC_CONN_USER_BLOCKED;

        case ConnectResultCode.TOKEN_EXPIRE:
          return ErrorCode$1.RC_CONN_USER_OR_PASSWD_ERROR;

        case ConnectResultCode.HOSTNAME_ERROR:
          return ErrorCode$1.HOSTNAME_ERROR;

        case ConnectResultCode.HASOHTERSAMECLIENTONLINE:
          return ErrorCode$1.HAS_OHTER_SAME_CLIENT_ON_LINE;

        case ConnectResultCode.APP_AUTH_NOT_PASS:
          return ErrorCode$1.RC_APP_AUTH_NOT_PASS;

        case ConnectResultCode.OTP_USED:
          return ErrorCode$1.RC_OTP_USED;

        case ConnectResultCode.PLATFORM_ERROR:
          return ErrorCode$1.RC_PLATFORM_ERROR;

        default:
          return ErrorCode$1.RC_NET_UNAVAILABLE;
      }
    };

    var deepCopy = function deepCopy(target) {
      var result;

      if (_typeof(target) === 'object') {
        if (Array.isArray(target)) {
          result = [];

          for (var i in target) {
            result.push(deepCopy(target[i]));
          }
        } else {
          result = {};

          for (var i in target) {
            result[i] = deepCopy(target[i]);
          }
        }
      } else {
        result = target;
      }

      return result;
    };

    var clone = function clone(target) {
      var result;

      try {
        result = deepCopy(target);
      } catch (e) {
        logger$1.error('clone err:', e);
        result = JSON.parse(JSON.stringify(target));
      }

      return result;
    };

    var getMessageOptionByStatus = function getMessageOptionByStatus(status) {
      var isPersited = true;
      var isCounted = true;
      var isMentioned = false;
      var disableNotification = false;
      var receivedStatus = ReceivedStatus$1.READ;
      var isReceivedByOtherClient = false;
      var canIncludeExpansion = false;
      isPersited = !!(status & 0x10);
      isCounted = !!(status & 0x20);
      isMentioned = !!(status & 0x40);
      disableNotification = !!(status & 0x200);
      isReceivedByOtherClient = !!(status & 0x02);
      receivedStatus = isReceivedByOtherClient ? ReceivedStatus$1.RETRIEVED : receivedStatus;
      canIncludeExpansion = !!(status & 0x400);
      return {
        isPersited: isPersited,
        isCounted: isCounted,
        isMentioned: isMentioned,
        disableNotification: disableNotification,
        receivedStatus: receivedStatus,
        canIncludeExpansion: canIncludeExpansion
      };
    };
    var getUpMessageOptionBySessionId = function getUpMessageOptionBySessionId(sessionId) {
      var isPersited = false;
      var isCounted = false;
      var disableNotification = false;
      var canIncludeExpansion = false;
      isPersited = !!(sessionId & 0x01);
      isCounted = !!(sessionId & 0x02);
      disableNotification = !!(sessionId & 0x20);
      canIncludeExpansion = !!(sessionId & 0x40);
      return {
        isPersited: isPersited,
        isCounted: isCounted,
        disableNotification: disableNotification,
        canIncludeExpansion: canIncludeExpansion
      };
    };
    var formatExtraContent = function formatExtraContent(extraContent) {
      var expansion = {};
      var parseExtraContent = JSON.parse(extraContent);
      forEach$1(parseExtraContent, function (value, key) {
        expansion[key] = value.v;
      });
      return expansion;
    };
    var DelayTimer = {
      _delayTime: 0,
      setTime: function setTime(time) {
        var currentTime = new Date().getTime();
        DelayTimer._delayTime = currentTime - time;
      },
      getTime: function getTime() {
        var delayTime = DelayTimer._delayTime;
        var currentTime = new Date().getTime();
        return currentTime - delayTime;
      }
    };
    var getChatRoomKVByStatus = function getChatRoomKVByStatus(status) {
      var isDeleteOpt = !!(status & 0x0004);
      return {
        isAutoDelete: !!(status & 0x0001),
        isOverwrite: !!(status & 0x0002),
        type: isDeleteOpt ? ChatroomEntryType$1.DELETE : ChatroomEntryType$1.UPDATE
      };
    };
    var getChatRoomKVOptStatus = function getChatRoomKVOptStatus(entity, action) {
      var status = 0;

      if (entity.isAutoDelete) {
        status = status | 0x0001;
      }

      if (entity.isOverwrite) {
        status = status | 0x0002;
      }

      if (action === 2) {
        status = status | 0x0004;
      }

      return status;
    };
    var getSessionId = function getSessionId(option) {
      var isStatusMessage = option.isStatusMessage;
      var isPersited = option.isPersited,
          isCounted = option.isCounted,
          isMentioned = option.isMentioned,
          disableNotification = option.disableNotification,
          canIncludeExpansion = option.canIncludeExpansion;

      if (isStatusMessage) {
        isPersited = isCounted = false;
      }

      var sessionId = 0;

      if (isPersited) {
        sessionId = sessionId | 0x01;
      }

      if (isCounted) {
        sessionId = sessionId | 0x02;
      }

      if (isMentioned) {
        sessionId = sessionId | 0x04;
      }

      if (disableNotification) {
        sessionId = sessionId | 0x20;
      }

      if (canIncludeExpansion) {
        sessionId = sessionId | 0x40;
      }

      return sessionId;
    };

    var QOS;

    (function (QOS) {
      QOS[QOS["AT_MOST_ONCE"] = 0] = "AT_MOST_ONCE";
      QOS[QOS["AT_LEAST_ONCE"] = 1] = "AT_LEAST_ONCE";
      QOS[QOS["EXACTLY_ONCE"] = 2] = "EXACTLY_ONCE";
      QOS[QOS["DEFAULT"] = 3] = "DEFAULT";
    })(QOS || (QOS = {}));

    var OperationType;

    (function (OperationType) {
      OperationType[OperationType["SYMMETRIC"] = 0] = "SYMMETRIC";
      OperationType[OperationType["CONNECT"] = 1] = "CONNECT";
      OperationType[OperationType["CONN_ACK"] = 2] = "CONN_ACK";
      OperationType[OperationType["PUBLISH"] = 3] = "PUBLISH";
      OperationType[OperationType["PUB_ACK"] = 4] = "PUB_ACK";
      OperationType[OperationType["QUERY"] = 5] = "QUERY";
      OperationType[OperationType["QUERY_ACK"] = 6] = "QUERY_ACK";
      OperationType[OperationType["QUERY_CONFIRM"] = 7] = "QUERY_CONFIRM";
      OperationType[OperationType["SUBSCRIBE"] = 8] = "SUBSCRIBE";
      OperationType[OperationType["SUB_ACK"] = 9] = "SUB_ACK";
      OperationType[OperationType["UNSUBSCRIBE"] = 10] = "UNSUBSCRIBE";
      OperationType[OperationType["UNSUB_ACK"] = 11] = "UNSUB_ACK";
      OperationType[OperationType["PING_REQ"] = 12] = "PING_REQ";
      OperationType[OperationType["PING_RESP"] = 13] = "PING_RESP";
      OperationType[OperationType["DISCONNECT"] = 14] = "DISCONNECT";
      OperationType[OperationType["RESERVER2"] = 15] = "RESERVER2";
    })(OperationType || (OperationType = {}));

    var MessageName;

    (function (MessageName) {
      MessageName["CONN_ACK"] = "ConnAckMessage";
      MessageName["DISCONNECT"] = "DisconnectMessage";
      MessageName["PING_REQ"] = "PingReqMessage";
      MessageName["PING_RESP"] = "PingRespMessage";
      MessageName["PUBLISH"] = "PublishMessage";
      MessageName["PUB_ACK"] = "PubAckMessage";
      MessageName["QUERY"] = "QueryMessage";
      MessageName["QUERY_CON"] = "QueryConMessage";
      MessageName["QUERY_ACK"] = "QueryAckMessage";
    })(MessageName || (MessageName = {}));
    var IDENTIFIER;

    (function (IDENTIFIER) {
      IDENTIFIER["PUB"] = "pub";
      IDENTIFIER["QUERY"] = "qry";
    })(IDENTIFIER || (IDENTIFIER = {}));

    var ConnAckProtocolVer;

    (function (ConnAckProtocolVer) {
      ConnAckProtocolVer[ConnAckProtocolVer["V4"] = 4] = "V4";
      ConnAckProtocolVer[ConnAckProtocolVer["V3"] = 3] = "V3";
    })(ConnAckProtocolVer || (ConnAckProtocolVer = {}));

    var Header = function () {
      function Header(type, retain, qos, dup) {
        if (retain === void 0) {
          retain = false;
        }

        if (qos === void 0) {
          qos = QOS.AT_LEAST_ONCE;
        }

        if (dup === void 0) {
          dup = false;
        }

        this._retain = false;
        this.qos = QOS.AT_LEAST_ONCE;
        this._dup = false;
        this.syncMsg = false;
        var isPlusType = type > 0;

        if (type && isPlusType && arguments.length === 1) {
          this._retain = (type & 1) > 0;
          this.qos = (type & 6) >> 1;
          this._dup = (type & 8) > 0;
          this.type = type >> 4 & 15;
          this.syncMsg = (type & 8) === 8;
        } else {
          this.type = type;
          this._retain = retain;
          this.qos = qos;
          this._dup = dup;
        }
      }

      Header.prototype.encode = function () {
        var byte = this.type << 4;
        byte |= this._retain ? 1 : 0;
        byte |= this.qos << 1;
        byte |= this._dup ? 8 : 0;
        return byte;
      };

      return Header;
    }();

    var BinaryHelper = function () {
      function BinaryHelper() {}

      BinaryHelper.writeUTF = function (str, isGetBytes) {
        var back = [];
        var byteSize = 0;

        if (isString(str)) {
          for (var i = 0, len = str.length; i < len; i++) {
            var code = str.charCodeAt(i);

            if (code >= 0 && code <= 127) {
              byteSize += 1;
              back.push(code);
            } else if (code >= 128 && code <= 2047) {
              byteSize += 2;
              back.push(192 | 31 & code >> 6);
              back.push(128 | 63 & code);
            } else if (code >= 2048 && code <= 65535) {
              byteSize += 3;
              back.push(224 | 15 & code >> 12);
              back.push(128 | 63 & code >> 6);
              back.push(128 | 63 & code);
            }
          }
        }

        for (var i = 0, len = back.length; i < len; i++) {
          if (back[i] > 255) {
            back[i] &= 255;
          }
        }

        if (isGetBytes) {
          return back;
        }

        if (byteSize <= 255) {
          return [0, byteSize].concat(back);
        } else {
          return [byteSize >> 8, byteSize & 255].concat(back);
        }
      };

      BinaryHelper.readUTF = function (arr) {
        var MAX_SIZE = 0x4000;
        var codeUnits = [];
        var highSurrogate;
        var lowSurrogate;
        var index = -1;
        var strBytes = arr;
        var result = '';

        while (++index < strBytes.length) {
          var codePoint = Number(strBytes[index]);

          if (codePoint === (codePoint & 0x7F)) ; else if ((codePoint & 0xF0) === 0xF0) {
            codePoint ^= 0xF0;
            codePoint = codePoint << 6 | strBytes[++index] ^ 0x80;
            codePoint = codePoint << 6 | strBytes[++index] ^ 0x80;
            codePoint = codePoint << 6 | strBytes[++index] ^ 0x80;
          } else if ((codePoint & 0xE0) === 0xE0) {
            codePoint ^= 0xE0;
            codePoint = codePoint << 6 | strBytes[++index] ^ 0x80;
            codePoint = codePoint << 6 | strBytes[++index] ^ 0x80;
          } else if ((codePoint & 0xC0) === 0xC0) {
            codePoint ^= 0xC0;
            codePoint = codePoint << 6 | strBytes[++index] ^ 0x80;
          }

          if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || Math.floor(codePoint) !== codePoint) {
            throw RangeError('Invalid code point: ' + codePoint);
          }

          if (codePoint <= 0xFFFF) {
            codeUnits.push(codePoint);
          } else {
            codePoint -= 0x10000;
            highSurrogate = codePoint >> 10 | 0xD800;
            lowSurrogate = codePoint % 0x400 | 0xDC00;
            codeUnits.push(highSurrogate, lowSurrogate);
          }

          if (index + 1 === strBytes.length || codeUnits.length > MAX_SIZE) {
            result += String.fromCharCode.apply(null, codeUnits);
            codeUnits.length = 0;
          }
        }

        return result;
      };

      return BinaryHelper;
    }();

    var RongStreamReader = function () {
      function RongStreamReader(arr) {
        this._position = 0;
        this._poolLen = 0;
        this._pool = arr;
        this._poolLen = arr.length;
      }

      RongStreamReader.prototype.check = function () {
        return this._position >= this._pool.length;
      };

      RongStreamReader.prototype.read2Byte = function () {
        var self = this;

        if (self.check()) {
          return -1;
        }

        var end = '';

        for (var i = 0; i < 2; i++) {
          var t = self._pool[self._position++].toString(16);

          if (t.length === 1) {
            t = '0' + t;
          }

          end += t.toString();
        }

        return parseInt(end, 16);
      };

      RongStreamReader.prototype.readInt = function () {
        var self = this;

        if (self.check()) {
          return -1;
        }

        var end = '';

        for (var i = 0; i < 4; i++) {
          var t = self._pool[self._position++].toString(16);

          if (t.length === 1) {
            t = '0' + t;
          }

          end += t.toString();
        }

        return parseInt(end, 16);
      };

      RongStreamReader.prototype.readLong = function () {
        var self = this;

        if (self.check()) {
          return -1;
        }

        var end = '';

        for (var i = 0; i < 8; i++) {
          var t = self._pool[self._position++].toString(16);

          if (t.length === 1) {
            t = '0' + t;
          }

          end += t;
        }

        return parseInt(end, 16);
      };

      RongStreamReader.prototype.readByte = function () {
        if (this.check()) {
          return -1;
        }

        var val = this._pool[this._position++];

        if (val > 255) {
          val &= 255;
        }

        return val;
      };

      RongStreamReader.prototype.readUTF = function () {
        if (this.check()) {
          return '';
        }

        var big = this.readByte() << 8 | this.readByte();

        var pool = this._pool.subarray(this._position, this._position += big);

        return BinaryHelper.readUTF(pool);
      };

      RongStreamReader.prototype.readAll = function () {
        return this._pool.subarray(this._position, this._poolLen);
      };

      return RongStreamReader;
    }();

    var RongStreamWriter = function () {
      function RongStreamWriter() {
        this._pool = [];
        this._position = 0;
        this._writen = 0;
      }

      RongStreamWriter.prototype.write = function (byte) {
        if (Object.prototype.toString.call(byte).indexOf('Array') !== -1) {
          this._pool = this._pool.concat(byte);
        } else if (byte >= 0) {
          if (byte > 255) {
            byte &= 255;
          }

          this._pool.push(byte);

          this._writen++;
        }

        return byte;
      };

      RongStreamWriter.prototype.writeArr = function (byte) {
        this._pool = this._pool.concat(byte);
        return byte;
      };

      RongStreamWriter.prototype.writeUTF = function (str) {
        var val = BinaryHelper.writeUTF(str);
        this._pool = this._pool.concat(val);
        this._writen += val.length;
      };

      RongStreamWriter.prototype.getBytesArray = function () {
        return this._pool;
      };

      return RongStreamWriter;
    }();

    var PBName = {
      UpStreamMessage: 'UpStreamMessage',
      PushExtra: 'PushExtra',
      DownStreamMessage: 'DownStreamMessage',
      DownStreamMessages: 'DownStreamMessages',
      SessionsAttQryInput: 'SessionsAttQryInput',
      SessionsAttOutput: 'SessionsAttOutput',
      SyncRequestMsg: 'SyncRequestMsg',
      ChrmPullMsg: 'ChrmPullMsg',
      NotifyMsg: 'NotifyMsg',
      HistoryMsgInput: 'HistoryMsgInput',
      HistoryMsgOuput: 'HistoryMsgOuput',
      RelationQryInput: 'RelationQryInput',
      RelationsOutput: 'RelationsOutput',
      DeleteSessionsInput: 'DeleteSessionsInput',
      SessionInfo: 'SessionInfo',
      DeleteSessionsOutput: 'DeleteSessionsOutput',
      RelationsInput: 'RelationsInput',
      DeleteMsgInput: 'DeleteMsgInput',
      CleanHisMsgInput: 'CleanHisMsgInput',
      SessionMsgReadInput: 'SessionMsgReadInput',
      ChrmInput: 'ChrmInput',
      ChrmOutput: 'ChrmOutput',
      QueryChatRoomInfoInput: 'QueryChatRoomInfoInput',
      QueryChatRoomInfoOutput: 'QueryChatRoomInfoOutput',
      RtcInput: 'RtcInput',
      RtcUserListOutput: 'RtcUserListOutput',
      SetUserStatusInput: 'SetUserStatusInput',
      RtcSetDataInput: 'RtcSetDataInput',
      RtcUserSetDataInput: 'RtcUserSetDataInput',
      RtcDataInput: 'RtcDataInput',
      RtcSetOutDataInput: 'RtcSetOutDataInput',
      MCFollowInput: 'MCFollowInput',
      RtcTokenOutput: 'RtcTokenOutput',
      RtcQryOutput: 'RtcQryOutput',
      RtcQryUserOutDataInput: 'RtcQryUserOutDataInput',
      RtcUserOutDataOutput: 'RtcUserOutDataOutput',
      RtcQueryListInput: 'RtcQueryListInput',
      RtcRoomInfoOutput: 'RtcRoomInfoOutput',
      RtcValueInfo: 'RtcValueInfo',
      RtcKeyDeleteInput: 'RtcKeyDeleteInput',
      GetQNupTokenInput: 'GetQNupTokenInput',
      GetQNupTokenOutput: 'GetQNupTokenOutput',
      GetQNdownloadUrlInput: 'GetQNdownloadUrlInput',
      GetDownloadUrlInput: 'GetDownloadUrlInput',
      GetQNdownloadUrlOutput: 'GetQNdownloadUrlOutput',
      GetDownloadUrlOutput: 'GetDownloadUrlOutput',
      ChrmKVEntity: 'ChrmKVEntity',
      SetChrmKV: 'SetChrmKV',
      SetChrmKVS: 'SetChrmKVS',
      DeleteChrmKVS: 'DeleteChrmKVS',
      ChrmKVOutput: 'ChrmKVOutput',
      ChrmKVSOutput: 'ChrmKVSOutput',
      ChrmKVSVersionEntity: 'ChrmKVSVersionEntity',
      ChrmKVSOutputEntity: 'ChrmKVSOutputEntity',
      QueryChrmKV: 'QueryChrmKV',
      SetUserSettingInput: 'SetUserSettingInput',
      SetUserSettingOutput: 'SetUserSettingOutput',
      PullUserSettingInput: 'PullUserSettingInput',
      PullUserSettingOutput: 'PullUserSettingOutput',
      UserSettingNotification: 'UserSettingNotification',
      SessionReq: 'SessionReq',
      SessionStates: 'SessionStates',
      SessionState: 'SessionState',
      SessionStateItem: 'SessionStateItem',
      SessionStateModifyReq: 'SessionStateModifyReq',
      SessionStateModifyResp: 'SessionStateModifyResp',
      GroupUnpushQuery: 'GroupUnpushQuery',
      GroupUnpushSet: 'GroupUnpushSet',
      GroupUnpushResult: 'GroupUnpushResult',
      GrpReadReceiptMsg: 'GrpReadReceiptMsg',
      GrpReadReceiptQryReq: 'GrpReadReceiptQryReq',
      GrpReadReceiptQryResp: 'GrpReadReceiptQryResp',
      GrpMsgReadUser: 'GrpMsgReadUser',
      SessionTagAddInput: 'SessionTagAddInput',
      SessionTagItem: 'SessionTagItem',
      SessionTagDelInput: 'SessionTagDelInput',
      SessionDisTagReq: 'SessionDisTagReq',
      ReportSDKInput: 'ReportSDKInput',
      ReportSDKOutput: 'ReportSDKOutput',
      UltraGrpPullSes: 'UltraGrpPullSes',
      UltraGrpPullMsg: 'UltraGrpPullMsg',
      MsgChangeReq: 'MsgChangeReq',
      QueryMsgChange: 'QueryMsgChange',
      MsgChange: 'MsgChange',
      MsgChangeList: 'MsgChangeList',
      MsgQuery: 'MsgQuery',
      MessageQueryInfo: 'MessageQueryInfo',
      MsgQueryAck: 'MsgQueryAck',
      OperateStatus: 'OperateStatus',
      OperateStatusNotify: 'OperateStatusNotify',
      OperateInfo: 'OperateInfo',
      OperateSummary: 'OperateSummary',
      RtcNotifyMsg: 'RtcNotifyMsg',
      RtcPullKV: 'RtcPullKV',
      RtcKVOutput: 'RtcKVOutput',
      RtcQueryUserJoinedInput: 'RtcQueryUserJoinedInput',
      RtcQueryUserJoinedOutput: 'RtcQueryUserJoinedOutput',
      RtcViewerJoinedOutput: 'RtcViewerJoinedOutput',
      RtcInviteInput: 'RtcInviteInput',
      RtcCancelInviteInput: 'RtcCancelInviteInput',
      RtcInviteAnswerInput: 'RtcInviteAnswerInput',
      RtcEndInviteInput: 'RtcEndInviteInput',
      SetRtcRoomIdInput: 'SetRtcRoomIdInput',
      SetRtcRoomIdOutput: 'SetRtcRoomIdOutput'
    };

    var _a$2;
    var SSMsg$1 = (_a$2 = {}, _a$2[PBName.UpStreamMessage] = ['sessionId', 'classname', 'content', 'pushText', 'userId', 'configFlag', 'appData', 'extraContent', 'pushExt', 'busChannel'], _a$2[PBName.DownStreamMessages] = ['list', 'syncTime', 'finished', 'broadcastSyncTime'], _a$2[PBName.DownStreamMessage] = ['fromUserId', 'type', 'groupId', 'classname', 'content', 'dataTime', 'status', 'msgId', 'extraContent', 'pushContent', 'configFlag', 'pushExt', 'busChannel', 'extStatus', 'toUserId', 'groupUnpush'], _a$2[PBName.PushExtra] = ['title', 'templateIdNoUse', 'pushId', 'pushConfigs', 'templateId'], _a$2[PBName.SessionsAttQryInput] = ['nothing'], _a$2[PBName.SessionsAttOutput] = ['inboxTime', 'sendboxTime', 'totalUnreadCount'], _a$2[PBName.SyncRequestMsg] = ['syncTime', 'ispolling', 'isweb', 'isPullSend', 'isKeeping', 'sendBoxSyncTime', 'broadcastSyncTime'], _a$2[PBName.ChrmPullMsg] = ['syncTime', 'count'], _a$2[PBName.NotifyMsg] = ['type', 'time', 'chrmId'], _a$2[PBName.HistoryMsgInput] = ['targetId', 'time', 'count', 'order', 'busChannel'], _a$2[PBName.HistoryMsgOuput] = ['list', 'syncTime', 'hasMsg'], _a$2[PBName.RelationQryInput] = ['type', 'count', 'startTime', 'order'], _a$2[PBName.RelationsOutput] = ['info', 'isFinished'], _a$2[PBName.DeleteSessionsInput] = ['sessions'], _a$2[PBName.SessionInfo] = ['type', 'channelId', 'busChannel'], _a$2[PBName.DeleteSessionsOutput] = ['nothing'], _a$2[PBName.RelationsInput] = ['type', 'msg', 'count', 'busChannel', 'startTime', 'endTime'], _a$2[PBName.DeleteMsgInput] = ['type', 'conversationId', 'msgs', 'busChannel'], _a$2[PBName.CleanHisMsgInput] = ['targetId', 'dataTime', 'conversationType', 'busChannel'], _a$2[PBName.SessionMsgReadInput] = ['type', 'msgTime', 'channelId', 'busChannel'], _a$2[PBName.ChrmInput] = ['nothing'], _a$2[PBName.ChrmOutput] = ['nothing', 'sessionId', 'joinTime'], _a$2[PBName.QueryChatRoomInfoInput] = ['count', 'order'], _a$2[PBName.QueryChatRoomInfoOutput] = ['userTotalNums', 'userInfos'], _a$2[PBName.GetQNupTokenInput] = ['type', 'key', 'httpMethod', 'queryString'], _a$2[PBName.GetQNdownloadUrlInput] = ['type', 'key', 'fileName'], _a$2[PBName.GetDownloadUrlInput] = ['type', 'key', 'fileName'], _a$2[PBName.GetQNupTokenOutput] = ['deadline', 'token', 'bosToken', 'bosDate', 'path', 'osskeyId', 'ossPolicy', 'ossSign', 'ossBucketName'], _a$2[PBName.GetQNdownloadUrlOutput] = ['downloadUrl'], _a$2[PBName.GetDownloadUrlOutput] = ['downloadUrl'], _a$2[PBName.ChrmKVEntity] = ['key', 'value', 'status', 'timestamp', 'uid', 'version'], _a$2[PBName.SetChrmKV] = ['entry', 'bNotify', 'notification', 'type'], _a$2[PBName.SetChrmKVS] = ['entry', 'bNotify', 'notification', 'type'], _a$2[PBName.DeleteChrmKVS] = ['entry', 'bNotify', 'notification', 'type'], _a$2[PBName.ChrmKVOutput] = ['entries', 'bFullUpdate', 'syncTime'], _a$2[PBName.ChrmKVSOutput] = ['timestamp', 'errorKeys', 'keysVersion'], _a$2[PBName.ChrmKVSVersionEntity] = ['version', 'key'], _a$2[PBName.ChrmKVSOutputEntity] = ['key', 'errorCode'], _a$2[PBName.QueryChrmKV] = ['timestamp'], _a$2[PBName.SetUserSettingInput] = ['version', 'value'], _a$2[PBName.SetUserSettingOutput] = ['version', 'reserve'], _a$2[PBName.PullUserSettingInput] = ['version', 'reserve'], _a$2[PBName.PullUserSettingOutput] = ['items', 'version'], _a$2.UserSettingItem = ['targetId', 'type', 'key', 'value', 'version', 'status', 'tags'], _a$2[PBName.SessionReq] = ['time'], _a$2[PBName.SessionStates] = ['version', 'state'], _a$2[PBName.SessionState] = ['type', 'channelId', 'time', 'stateItem', 'busChannel'], _a$2[PBName.SessionStateItem] = ['sessionStateType', 'value', 'tags'], _a$2[PBName.SessionStateModifyReq] = ['version', 'state'], _a$2[PBName.SessionStateModifyResp] = ['version'], _a$2[PBName.GroupUnpushSet] = ['busChannel', 'unpushLevel'], _a$2[PBName.GroupUnpushQuery] = ['busChannel'], _a$2[PBName.GroupUnpushResult] = ['groupId', 'busChannel', 'unpushLevel'], _a$2[PBName.GrpReadReceiptMsg] = ['msgId', 'busChannel'], _a$2[PBName.GrpReadReceiptQryReq] = ['msgId', 'busChannel'], _a$2[PBName.GrpReadReceiptQryResp] = ['totalMemberNum', 'list'], _a$2[PBName.GrpMsgReadUser] = ['readTime', 'userId'], _a$2[PBName.SessionTagAddInput] = ['version', 'tags'], _a$2[PBName.SessionTagItem] = ['tagId', 'name', 'createdTime', 'isTop'], _a$2[PBName.SessionTagDelInput] = ['version', 'tags'], _a$2[PBName.SessionDisTagReq] = ['tagId'], _a$2[PBName.UserSettingNotification] = ['version', 'reserve'], _a$2[PBName.ReportSDKInput] = ['sdkInfo'], _a$2[PBName.ReportSDKOutput] = ['nothing'], _a$2[PBName.UltraGrpPullSes] = ['syncTime', 'isEraseMsgContent'], _a$2[PBName.UltraGrpPullMsg] = ['syncTime'], _a$2[PBName.MsgChangeReq] = ['fromUserId', 'targetId', 'type', 'busChannel', 'msgUID', 'msgTime', 'content'], _a$2[PBName.QueryMsgChange] = ['syncTime'], _a$2[PBName.MsgChangeList] = ['list', 'syncTime', 'hasNext'], _a$2[PBName.MsgChange] = ['targetId', 'type', 'time', 'changeType', 'msgUID', 'msgTime', 'busChannel', 'isAdmin', 'isDel', 'operatorId'], _a$2[PBName.MsgQuery] = ['targetId', 'type', 'query'], _a$2[PBName.MessageQueryInfo] = ['msgTime', 'msgUID', 'busChannel'], _a$2[PBName.MsgQueryAck] = ['list'], _a$2[PBName.OperateStatus] = ['targetId', 'type', 'opType', 'busChannel'], _a$2[PBName.OperateStatusNotify] = ['type', 'notifyType', 'info', 'summary'], _a$2[PBName.OperateInfo] = ['targetId', 'busChannel', 'userId', 'opType', 'optime'], _a$2[PBName.OperateSummary] = ['targetId', 'busChannel', 'count', 'opType'], _a$2[PBName.RtcInput] = ['roomType', 'broadcastType', 'extraInnerData', 'needSysChatroom', 'identityChangeType', 'joinType'], _a$2[PBName.RtcUserListOutput] = ['users', 'token', 'sessionId', 'roomInfo'], _a$2[PBName.SetUserStatusInput] = ['status'], _a$2[PBName.RtcSetDataInput] = ['interior', 'target', 'key', 'value', 'objectName', 'content'], _a$2[PBName.RtcUserSetDataInput] = ['valueInfo', 'objectName', 'content'], _a$2[PBName.RtcDataInput] = ['interior', 'target', 'key', 'objectName', 'content'], _a$2[PBName.RtcSetOutDataInput] = ['target', 'valueInfo', 'objectName', 'content'], _a$2[PBName.MCFollowInput] = ['state'], _a$2[PBName.RtcTokenOutput] = ['rtcToken'], _a$2[PBName.RtcQryOutput] = ['outInfo'], _a$2[PBName.RtcQryUserOutDataInput] = ['userId'], _a$2[PBName.RtcUserOutDataOutput] = ['user'], _a$2[PBName.RtcQueryListInput] = ['order'], _a$2[PBName.RtcRoomInfoOutput] = ['roomId', 'roomData', 'userCount', 'list'], _a$2[PBName.RtcValueInfo] = ['key', 'value'], _a$2[PBName.RtcKeyDeleteInput] = ['key'], _a$2[PBName.RtcNotifyMsg] = ['type', 'time', 'roomId'], _a$2[PBName.RtcPullKV] = ['timestamp', 'roomId'], _a$2[PBName.RtcKVOutput] = ['entries', 'bFullUpdate', 'syncTime'], _a$2[PBName.RtcQueryUserJoinedInput] = ['userId'], _a$2[PBName.RtcQueryUserJoinedOutput] = ['info'], _a$2[PBName.RtcInviteInput] = ['invitedUserId', 'timeoutTime', 'invitedRoomId', 'inviteInfo', 'inviteSessionId'], _a$2[PBName.RtcCancelInviteInput] = ['invitedUserId', 'invitedRoomId', 'inviteInfo', 'inviteSessionId'], _a$2[PBName.RtcInviteAnswerInput] = ['inviteUserID', 'answerCode', 'inviteRoomId', 'inviteSessionId', 'content', 'key', 'value'], _a$2[PBName.RtcEndInviteInput] = ['inviteRoomId', 'inviteSessionId', 'inviteContent', 'inviteRoomKeys'], _a$2[PBName.SetRtcRoomIdInput] = ['rtcRoomId'], _a$2[PBName.SetRtcRoomIdOutput] = ['nothing'], _a$2);

    var Codec$1 = {};

    var _loop_1 = function _loop_1(key) {
      var paramsList = SSMsg$1[key];

      Codec$1[key] = function () {
        var data = {};
        var ins = {
          getArrayData: function getArrayData() {
            return data;
          }
        };

        var _loop_2 = function _loop_2(i) {
          var param = paramsList[i];
          var setEventName = "set".concat(toUpperCase(param, 0, 1));

          ins[setEventName] = function (item) {
            data[param] = item;
          };
        };

        for (var i = 0; i < paramsList.length; i++) {
          _loop_2(i);
        }

        return ins;
      };

      Codec$1[key].decode = function (data) {
        var decodeResult = {};

        if (isString(data)) {
          data = JSON.parse(data);
        }

        var _loop_3 = function _loop_3(key_1) {
          var getEventName = "get".concat(toUpperCase(key_1, 0, 1));
          decodeResult[key_1] = data[key_1];

          decodeResult[getEventName] = function () {
            return data[key_1];
          };
        };

        for (var key_1 in data) {
          _loop_3(key_1);
        }

        return decodeResult;
      };
    };

    for (var key$2 in SSMsg$1) {
      _loop_1(key$2);
    }

    Codec$1.getModule = function (pbName) {
      return Codec$1[pbName]();
    };

    var SSMsg = "\npackage Modules;\nmessage probuf {\n  message ".concat(PBName.SetUserStatusInput, "\n  {\n    optional int32 status=1;\n  }\n\n  message SetUserStatusOutput\n  {\n    optional int32 nothing=1;\n  }\n\n  message GetUserStatusInput\n  {\n    optional int32 nothing=1;\n  }\n\n  message GetUserStatusOutput\n  {\n    optional string status=1;\n    optional string subUserId=2;\n  }\n\n  message SubUserStatusInput\n  {\n    repeated string userid =1;\n  }\n\n  message SubUserStatusOutput\n  {\n    optional int32 nothing=1;\n  }\n  message VoipDynamicInput\n  {\n    required int32  engineType = 1;\n    required string channelName = 2;\n    optional string channelExtra = 3;\n  }\n\n  message VoipDynamicOutput\n  {\n      required string dynamicKey=1;\n  }\n  message ").concat(PBName.NotifyMsg, " {\n    required int32 type = 1;\n    optional int64 time = 2;\n    optional string chrmId=3;\n  }\n  message ").concat(PBName.SyncRequestMsg, " {\n    required int64 syncTime = 1;\n    required bool ispolling = 2;\n    optional bool isweb=3;\n    optional bool isPullSend=4;\n    optional bool isKeeping=5;\n    optional int64 sendBoxSyncTime=6;\n    optional int64 broadcastSyncTime=7;\n  }\n  message ").concat(PBName.UpStreamMessage, " {\n    required int32 sessionId = 1;\n    required string classname = 2;\n    required bytes content = 3;\n    optional string pushText = 4;\n    optional string appData = 5;\n    repeated string userId = 6;\n    optional int64 delMsgTime = 7;\n    optional string delMsgId = 8;\n    optional int32 configFlag = 9;\n    optional int64 clientUniqueId = 10;\n    optional string extraContent = 11;\n    optional PushExtra pushExt = 12;\n    optional string busChannel = 13; // \u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\n  }\n  message ").concat(PBName.PushExtra, " {\n    optional string title = 1;\n    optional int32  templateIdNoUse= 2;\n    optional string pushId = 3;\n    optional string pushConfigs = 4;\n    optional string templateId = 5;\n  }\n  message ").concat(PBName.DownStreamMessages, " {\n    repeated DownStreamMessage list = 1;\n    required int64 syncTime = 2;\n    optional bool finished = 3;\n    optional int64 broadcastSyncTime = 4;\n  }\n  message ").concat(PBName.DownStreamMessage, " {\n    required string fromUserId = 1;\n    required ChannelType type = 2;\n    optional string groupId = 3;\n    required string classname = 4;\n    required bytes content = 5;\n    required int64 dataTime = 6;\n    required int64 status = 7;\n    optional int64 extra = 8;\n    optional string msgId = 9;\n    optional int32 direction = 10;\n    optional int32 plantform =11;\n    optional int32 isRemoved = 12;\n    optional string source = 13;\n    optional int64 clientUniqueId = 14;\n    optional string extraContent = 15;\n    optional string pushContent = 16;\n    optional int32 configFlag = 17;\n    optional PushExtra pushExt = 18;\n    optional string busChannel = 19; // \u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\uFF0C\u9650\u523620\u5B57\u7B26\u4EE5\u5185\n    optional int64 extStatus = 20; // \u6D88\u606F\u7684\u6269\u5C55\u6807\u8BB0 \u7B2C0\u4F4D,\u8868\u793A\u9001\u8FBE\u72B6\u6001: 0x01 \u8868\u793A\u5DF2\u9001\u8FBE;\u65AD\u6863: 0x02 \u8868\u793A\u662F\u5426\u9700\u8981\u6267\u884C\u65AD\u6863\u7B56\u7565; \u6D88\u606F\u4FEE\u6539: 0x04 \u62C9\u53D6\u5386\u53F2\u6D88\u606F\u65F6\u8868\u793A\u8BE5\u6D88\u606F\u662F\u5426\u4FEE\u6539\u8FC7\n    repeated string toUserId = 21;  //\u6307\u5B9A\u63A5\u6536\u8005\uFF08\u9650\u5B9A\u7FA4\u548C\u8BA8\u8BBA\u7EC4\uFF09//\u589E\u52A0\u804A\u5929\u5BA4\u5B9A\u5411\u6210\u5458\n    optional int32 groupUnpush = 22; //\u7FA4\u804A\u9ED8\u8BA4\u514D\u6253\u6270\u7EA7\u522B\n  }\n  enum ChannelType {\n    PERSON = 1;\n    PERSONS = 2;\n    GROUP = 3;\n    TEMPGROUP = 4;\n    CUSTOMERSERVICE = 5;\n    NOTIFY = 6;\n    MC=7;\n    MP=8;\n    ULTRAGROUP = 10;\n  }\n  message CreateDiscussionInput {\n    optional string name = 1;\n  }\n  message CreateDiscussionOutput {\n    required string id = 1;\n  }\n  message ChannelInvitationInput {\n    repeated string users = 1;\n  }\n  message LeaveChannelInput {\n    required int32 nothing = 1;\n  }\n  message ChannelEvictionInput {\n    required string user = 1;\n  }\n  message RenameChannelInput {\n    required string name = 1;\n  }\n  message ChannelInfoInput {\n    required int32 nothing = 1;\n  }\n  message ChannelInfoOutput {\n    required ChannelType type = 1;\n    required string channelId = 2;\n    required string channelName = 3;\n    required string adminUserId = 4;\n    repeated string firstTenUserIds = 5;\n    required int32 openStatus = 6;\n  }\n  message ChannelInfosInput {\n    required int32 page = 1;\n    optional int32 number = 2;\n  }\n  message ChannelInfosOutput {\n    repeated ChannelInfoOutput channels = 1;\n    required int32 total = 2;\n  }\n  message MemberInfo {\n    required string userId = 1;\n    required string userName = 2;\n    required string userPortrait = 3;\n    required string extension = 4;\n  }\n  message GroupMembersInput {\n    required int32 page = 1;\n    optional int32 number = 2;\n  }\n  message GroupMembersOutput {\n    repeated MemberInfo members = 1;\n    required int32 total = 2;\n  }\n  message GetUserInfoInput {\n    required int32 nothing = 1;\n  }\n  message GetUserInfoOutput {\n    required string userId = 1;\n    required string userName = 2;\n    required string userPortrait = 3;\n  }\n  message GetSessionIdInput {\n    required int32 nothing = 1;\n  }\n  message GetSessionIdOutput {\n    required int32 sessionId = 1;\n  }\n  enum FileType {\n    image = ").concat(FileType$1.IMAGE, ";\n    audio = ").concat(FileType$1.AUDIO, ";\n    video = ").concat(FileType$1.VIDEO, ";\n    file = ").concat(FileType$1.FILE, ";\n  }\n  message ").concat(PBName.GetQNupTokenInput, " {\n    required FileType type = 1;\n    optional string key = 2;\n    optional string httpMethod = 3;\n    optional string queryString = 4;\n  }\n  message ").concat(PBName.GetQNdownloadUrlInput, " {\n    required FileType type = 1;\n    required string key = 2;\n    optional string  fileName = 3;\n  }\n  message ").concat(PBName.GetDownloadUrlInput, " {\n    required FileType type = 1;\n    required string key = 2;\n    optional string fileName = 3;\n   }\n  message ").concat(PBName.GetQNupTokenOutput, " {\n    required int64 deadline = 1;\n    required string token = 2;\n    optional string bosToken = 3;\n    optional string bosDate = 4;\n    optional string path = 5;\n    optional string osskeyId = 6;\n    optional string ossPolicy = 7;\n    optional string ossSign = 8;\n    optional string ossBucketName = 9;\n    optional string s3Credential = 10;\n    optional string s3Algorithm = 11;\n    optional string s3Date = 12;\n    optional string s3Policy = 13;\n    optional string s3Signature = 14;\n    optional string s3BucketName = 15;\n    optional string stcAuthorization = 16;\n    optional string stcContentSha256 = 17;\n    optional string stcDate = 18;\n    optional string stcBucketName = 19;\n  }\n  message ").concat(PBName.GetQNdownloadUrlOutput, " {\n    required string downloadUrl = 1;\n  }\n  message ").concat(PBName.GetDownloadUrlOutput, " {\n    required string downloadUrl = 1;\n  }\n  message Add2BlackListInput {\n    required string userId = 1;\n  }\n  message RemoveFromBlackListInput {\n    required string userId = 1;\n  }\n  message QueryBlackListInput {\n    required int32 nothing = 1;\n  }\n  message QueryBlackListOutput {\n    repeated string userIds = 1;\n  }\n  message BlackListStatusInput {\n    required string userId = 1;\n  }\n  message BlockPushInput {\n    required string blockeeId = 1;\n  }\n  message ModifyPermissionInput {\n    required int32 openStatus = 1;\n  }\n  message GroupInput {\n    repeated GroupInfo groupInfo = 1;\n  }\n  message GroupOutput {\n    required int32 nothing = 1;\n  }\n  message GroupInfo {\n    required string id = 1;\n    required string name = 2;\n  }\n  message GroupHashInput {\n    required string userId = 1;\n    required string groupHashCode = 2;\n  }\n  message GroupHashOutput {\n    required GroupHashType result = 1;\n  }\n  enum GroupHashType {\n    group_success = 0x00;\n    group_failure = 0x01;\n  }\n  message ").concat(PBName.ChrmInput, " {\n    required int32 nothing = 1;\n  }\n  message ").concat(PBName.ChrmOutput, " {\n    required int32 nothing = 1;\n    optional string sessionId = 2;\n    optional int64 joinTime = 3;\n  }\n  message ").concat(PBName.ChrmPullMsg, " {\n    required int64 syncTime = 1;\n    required int32 count = 2;\n  }\n\n  message ChrmPullMsgNew\n  {\n    required int32 count = 1;\n    required int64 syncTime = 2;\n    optional string chrmId=3;\n  }\n  message ").concat(PBName.RelationQryInput, "\n  {\n    optional ChannelType type = 1;\n    optional int32 count = 2;\n    optional int64 startTime = 3;\n    optional int32 order = 4;\n  }\n  message ").concat(PBName.RelationsInput, "\n  {\n    required ChannelType type = 1;\n    optional DownStreamMessage msg =2;\n    optional int32 count = 3;\n    repeated string busChannel = 4;\n    optional int64 startTime = 5;\n    optional int64 endTime = 6;\n  }\n  message ").concat(PBName.RelationsOutput, "\n  {\n    repeated RelationInfo info = 1;\n    optional bool isFinished = 2;//\u662F\u5426\u7ED3\u675F\n  }\n  message RelationInfo\n  {\n    required ChannelType type = 1;\n    required string userId = 2;\n    optional DownStreamMessage msg =3;\n    optional int64 readMsgTime= 4;\n    optional int64 unreadCount= 5;\n    optional string busChannel = 6;//\u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\n    optional int64 versionTime = 7;//\u4F1A\u8BDD\u9879\u53D8\u66F4\u65F6\u95F4\u6233\uFF0C\u6CE8\u610F:\u975E\u6392\u5E8F\u65F6\u95F4\u6233\n    optional int64 remindCount = 8;//\u88AB@\u7684\u672A\u8BFB\u6570\n  }\n  message RelationInfoReadTime\n  {\n    required ChannelType type = 1;\n    required int64 readMsgTime= 2;\n    required string targetId = 3;\n  }\n  message ").concat(PBName.CleanHisMsgInput, "\n  {\n      required string targetId = 1;\n      required int64 dataTime = 2;\n      optional int32 conversationType= 3;\n      optional string busChannel = 4; //\u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\uFF0C\u9650\u523620\u5B57\u7B26\u4EE5\u5185\n  }\n  message HistoryMessageInput\n  {\n    required string targetId = 1;\n    required int64 dataTime =2;\n    required int32 size  = 3;\n  }\n\n  message HistoryMessagesOuput\n  {\n    repeated DownStreamMessage list = 1;\n    required int64 syncTime = 2;\n    required int32 hasMsg = 3;\n  }\n  message ").concat(PBName.QueryChatRoomInfoInput, "\n  {\n    required int32 count= 1;\n    optional int32 order= 2;\n  }\n\n  message ").concat(PBName.QueryChatRoomInfoOutput, "\n  {\n    optional int32 userTotalNums = 1;\n    repeated ChrmMember userInfos = 2;\n  }\n  message ChrmMember\n  {\n    required int64 time = 1;\n    required string id = 2;\n  }\n  message MPFollowInput\n  {\n    required string id = 1;\n  }\n\n  message MPFollowOutput\n  {\n    required int32 nothing = 1;\n    optional MpInfo info =2;\n  }\n\n  message ").concat(PBName.MCFollowInput, "\n  {\n    required string state = 1;\n  }\n\n  message MCFollowOutput\n  {\n    required int32 nothing = 1;\n    optional MpInfo info =2;\n  }\n\n  message MpInfo\n  {\n    required string mpid=1;\n    required string name = 2;\n    required string type = 3;\n    required int64 time=4;\n    optional string portraitUrl=5;\n    optional string extra =6;\n  }\n\n  message SearchMpInput\n  {\n    required int32 type=1;\n    required string id=2;\n  }\n\n  message SearchMpOutput\n  {\n    required int32 nothing=1;\n    repeated MpInfo info = 2;\n  }\n\n  message PullMpInput\n  {\n    required int64 time=1;\n    required string mpid=2;\n  }\n\n  message PullMpOutput\n  {\n    required int32 status=1;\n    repeated MpInfo info = 2;\n  }\n  message ").concat(PBName.HistoryMsgInput, "\n  {\n    optional string targetId = 1;\n    optional int64 time = 2;\n    optional int32 count  = 3;\n    optional int32 order = 4;\n    optional string busChannel = 5; //\u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\uFF0C\u9650\u523620\u5B57\u7B26\u4EE5\u5185\n  }\n\n  message ").concat(PBName.HistoryMsgOuput, "\n  {\n    repeated DownStreamMessage list=1;\n    required int64 syncTime=2;\n    required int32 hasMsg=3;\n  }\n  message ").concat(PBName.RtcQueryListInput, "{\n    optional int32 order=1;\n  }\n\n  message ").concat(PBName.RtcKeyDeleteInput, "{\n    repeated string key=1;\n  }\n\n  message ").concat(PBName.RtcValueInfo, "{\n    required string key=1;\n    required string value=2;\n  }\n\n  message RtcUserInfo{\n    required string userId=1;\n    repeated ").concat(PBName.RtcValueInfo, " userData=2; //\u7528\u6237\u8D44\u6E90\u4FE1\u606F\n  }\n\n  message ").concat(PBName.RtcUserListOutput, "{\n    repeated RtcUserInfo users=1;\n    optional string token=2;\n    optional string sessionId=3;\n    repeated RtcValueInfo roomInfo = 4; //\u623F\u95F4key value\n    repeated RtcKVEntity entries = 5;//\u76F4\u64ADKV\u5C5E\u6027\u5BF9\u8C61\u96C6\u5408\n    optional int64 syncTime = 6;//\u6240\u6709\u5C5E\u6027\u7684\u6700\u5927\u65F6\u95F4\u6233\uFF08\u4E0B\u6B21\u62C9\u53D6KV\u65F6\u7528\uFF09\u3002\n    optional int32 offlineKickTime = 7;//server\u8D85\u65F6\u8E22\u4EBA\u65F6\u95F4\uFF0C\u9ED8\u8BA460s\n  }\n  message RtcRoomInfoOutput{\n    optional string roomId = 1;\n    repeated ").concat(PBName.RtcValueInfo, " roomData = 2;\n    optional int32 userCount = 3;\n    repeated RtcUserInfo list=4;\n  }\n  message ").concat(PBName.RtcInput, "{\n    required int32 roomType=1;\n    optional int32 broadcastType=2;\n    optional RtcValueInfo extraInnerData = 3;\n    optional bool needSysChatroom = 4; //\u662F\u5426\u9700\u8981\u540C\u6B65\u804A\u5929\u5BA4\n    optional IdentityChangeType identityChangeType = 5; //\u8EAB\u4EFD\u53D8\u66F4\u7C7B\u578B\n    optional JoinType joinType = 6; // \u52A0\u5165\u623F\u95F4\u7C7B\u578B\n    repeated ").concat(PBName.RtcValueInfo, " innerDatas = 7; //\u7528\u6237\u5185\u90E8inner\u6570\u636E\uFF0C\u89D2\u8272\u6216\u8005\u8FDE\u9EA6\u4FE1\u606F\u7B49\n    repeated ").concat(PBName.RtcValueInfo, " outerDatas = 8; //\u7528\u6237\u5185\u90E8outer\u6570\u636E\uFF0C\u81EA\u5B9A\u4E49\u6570\u636E\u7ED3\u6784RtcInput\u3002\n  }\n  enum JoinType {\n    KICK = 0; //\u8E22\u524D\u4E00\u4E2A\u8BBE\u5907\n    REFUSE = 1; //\u5F53\u524D\u52A0\u5165\u62D2\u7EDD\n    COEXIST = 2; //\u4E24\u4E2A\u8BBE\u5907\u5171\u5B58\n  }\n  message RtcQryInput{\n    required bool isInterior=1;\n    required targetType target=2;\n    repeated string key=3;\n  }\n  message ").concat(PBName.RtcQryOutput, "{\n    repeated ").concat(PBName.RtcValueInfo, " outInfo=1;\n  }\n  message RtcDelDataInput{\n    repeated string key=1;\n    required bool isInterior=2;\n    required targetType target=3;\n  }\n  message ").concat(PBName.RtcDataInput, "{\n    required bool interior=1;\n    required targetType target=2;\n    repeated string key=3;\n    optional string objectName=4;\n    optional string content=5;\n  }\n  message ").concat(PBName.RtcSetDataInput, "{\n    required bool interior=1;\n    required targetType target=2;\n    required string key=3;\n    required string value=4;\n    optional string objectName=5;\n    optional string content=6;\n  }\n  message ").concat(PBName.RtcUserSetDataInput, " {\n    repeated ").concat(PBName.RtcValueInfo, " valueInfo = 1;\n    required string objectName = 2;\n    repeated ").concat(PBName.RtcValueInfo, " content = 3;\n  }\n  message RtcOutput\n  {\n    optional int32 nothing=1;\n  }\n  message ").concat(PBName.RtcTokenOutput, "{\n    required string rtcToken=1;\n  }\n  enum targetType {\n    ROOM =1 ;\n    PERSON = 2;\n  }\n  message ").concat(PBName.RtcSetOutDataInput, "{\n    required targetType target=1;\n    repeated ").concat(PBName.RtcValueInfo, " valueInfo=2;\n    optional string objectName=3;\n    optional string content=4;\n  }\n  message ").concat(PBName.RtcQryUserOutDataInput, "{\n    repeated string userId = 1;\n  }\n  message ").concat(PBName.RtcUserOutDataOutput, "{\n    repeated RtcUserInfo user = 1;\n  }\n  message ").concat(PBName.SessionsAttQryInput, "{\n    required int32 nothing = 1;\n  }\n  message ").concat(PBName.SessionsAttOutput, "{\n    required int64 inboxTime = 1;\n    required int64 sendboxTime = 2;\n    required int64 totalUnreadCount = 3;\n  }\n  message ").concat(PBName.SessionMsgReadInput, "\n  {\n    required ChannelType type = 1;\n    required int64 msgTime = 2;\n    required string channelId = 3;\n    optional string busChannel = 4;//\u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\n  }\n  message SessionMsgReadOutput\n  {\n    optional int32 nothing=1;\n  }\n  message ").concat(PBName.DeleteSessionsInput, "\n  {\n    repeated SessionInfo sessions = 1;\n  }\n  message ").concat(PBName.SessionInfo, "\n  {\n    required ChannelType type = 1;\n    required string channelId = 2;\n    optional string busChannel = 3;//\u6240\u5C5E\u4F1A\u8BDD\u4E1A\u52A1\u6807\u8BC6\n  }\n  message ").concat(PBName.DeleteSessionsOutput, "\n  {\n    optional int32 nothing=1;\n  }\n  message ").concat(PBName.DeleteMsgInput, "\n  {\n    optional ChannelType type = 1;\n    optional string conversationId = 2;\n    repeated DeleteMsg msgs = 3;\n    optional string busChannel = 4; //\u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\uFF0C\u9650\u523620\u5B57\u7B26\u4EE5\u5185\n  }\n  message DeleteMsg\n  {\n    optional string msgId = 1;\n    optional int64 msgDataTime = 2;\n    optional int32 direct = 3;\n  }\n  message ChrmKVEntity {\n    required string key = 1;\n    required string value = 2;\n    optional int32 status = 3;\n    optional int64 timestamp = 4;\n    optional string uid = 5;\n    optional int64 version = 6;\n  }\n  message ").concat(PBName.SetChrmKV, " {\n    required ChrmKVEntity entry = 1;\n    optional bool bNotify = 2;\n    optional UpStreamMessage notification = 3;\n    optional ChannelType type = 4;\n  }\n  message ").concat(PBName.SetChrmKVS, " {\n    repeated ChrmKVEntity entry = 1;\n    optional bool bNotify = 2;\n    optional UpStreamMessage notification = 3;\n    optional ChannelType type = 4;\n  }\n  message ").concat(PBName.DeleteChrmKVS, " {\n    repeated ChrmKVEntity entry = 1;\n    optional bool bNotify = 2;\n    optional UpStreamMessage notification = 3;\n    optional ChannelType type = 4;\n  }\n  message ").concat(PBName.ChrmKVOutput, " {\n    repeated ChrmKVEntity entries = 1;\n    optional bool bFullUpdate = 2;\n    optional int64 syncTime = 3;\n  }\n  message ChrmKVSVersionEntity {\n    optional int64 version = 1;\n    optional string key = 2;\n  }\n\n  message ").concat(PBName.ChrmKVSOutput, " {\n    repeated ChrmKVSOutputEntity errorKeys = 1;\n    repeated ChrmKVSVersionEntity keysVersion = 2;\n  }\n  message ").concat(PBName.ChrmKVSOutputEntity, "\n  {\n    optional string key = 1;\n    optional int32 errorCode = 2;\n  }\n  message ").concat(PBName.QueryChrmKV, " {\n    required int64 timestamp = 1;\n  }\n  message ").concat(PBName.SetUserSettingInput, " {\n    required int64 version=1;\n    required string value=2;\n  }\n  message ").concat(PBName.SetUserSettingOutput, " {\n    required int64 version=1;\n    required bool reserve=2;\n  }\n  message ").concat(PBName.PullUserSettingInput, " {\n    required int64 version=1;\n    optional bool reserve=2;\n  }\n  message ").concat(PBName.PullUserSettingOutput, " {\n    repeated UserSettingItem items = 1;\n    required int64 version=2;\n  }\n  message UserSettingItem {\n    required string targetId= 1;\n    required ChannelType type = 2;\n    required string key = 4;\n    required bytes value = 5;\n    required int64 version=6;\n    required int32 status=7;\n    repeated SessionTagItem tags= 8;\n  }\n  message ").concat(PBName.SessionReq, " {\n    required int64 time = 1;\n  }\n  message ").concat(PBName.SessionStates, " {\n    required int64 version=1;\n    repeated SessionState state= 2;\n  }\n  message ").concat(PBName.SessionState, " {\n    required ChannelType type = 1;\n    required string channelId = 2;\n    optional int64 time = 3;\n    repeated SessionStateItem stateItem = 4;\n    optional string busChannel = 5;//\u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\n  }\n  message ").concat(PBName.SessionStateItem, " {\n    required SessionStateType sessionStateType = 1;\n    required string value = 2;\n    repeated SessionTagItem tags = 3;\n  }\n  enum SessionStateType {\n    IsSilent = 1;\n    IsTop = 2;\n    Tags = 3;\n  }\n  message ").concat(PBName.SessionStateModifyReq, " {\n    required int64 version=1;\n    repeated SessionState state= 2;\n  }\n  message ").concat(PBName.GroupUnpushQuery, " {\n    optional string busChannel = 1;\n  }\n  message ").concat(PBName.GroupUnpushSet, "{\n    optional string busChannel = 1;\n    required int32 unpushLevel = 2;\n  }\n  message ").concat(PBName.GroupUnpushResult, " {\n    required string groupId = 1;\n    optional string busChannel = 2;\n    required int32 unpushLevel = 3;\n  }\n  message ").concat(PBName.SessionStateModifyResp, " {\n    required int64 version=1;\n  }\n  message ").concat(PBName.GrpReadReceiptMsg, " {\n    repeated string msgId=1; //\u5DF2\u8BFB\u6D88\u606FID\n    optional string channelId = 2; // \u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\n  }\n  message ").concat(PBName.GrpReadReceiptQryReq, " {\n    repeated string msgId=1; //\u5DF2\u8BFB\u6D88\u606FID\n    optional string channelId = 2; // \u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\n  }\n  message ").concat(PBName.GrpReadReceiptQryResp, " {\n    required int32 totalMemberNum = 1;//\u7FA4\u5185\u603B\u4EBA\u6570\n    repeated GrpMsgReadUser list = 2;//\u5DF2\u8BFB\u7528\u6237\u5217\u8868\uFF08list\u590D\u7C7B\u578B\uFF09\n  }\n  message ").concat(PBName.GrpMsgReadUser, " {\n    required int64 readTime = 1;//\u5DF2\u8BFB\u65F6\u95F4\n    required string userId = 2;//\u5DF2\u8BFB\u7528\u6237id\n  }\n  message ").concat(PBName.SessionTagAddInput, " {\n    required int64 version=1;\n    repeated SessionTagItem tags=2;\n  }\n  message ").concat(PBName.SessionTagItem, " {\n    required string tagId=1;\n    optional string name=2;\n    optional int64 createdTime=3;\n    optional bool isTop=4;\n  }\n  message ").concat(PBName.SessionTagDelInput, " {\n    required int64 version=1;\n    repeated SessionTagItem tags=2;\n  }\n  message ").concat(PBName.SessionDisTagReq, " {\n    repeated string tagId=1;\n  }\n  message ").concat(PBName.UserSettingNotification, " {\n    required int64 version=1;\n    required bool reserve=2;\n  }\n  message ").concat(PBName.ReportSDKInput, " {\n    required string sdkInfo=1; // \u7528\u6237\u96C6\u6210\u7684 sdk \u4FE1\u606F,json \u683C\u5F0F {\"web-rtc\": \"4.0.3.7\"}\n  }\n  message ").concat(PBName.ReportSDKOutput, "\n  {\n    optional int32 nothing=1; //\u5360\u4F4D\n  }\n  message ").concat(PBName.RtcNotifyMsg, " \n  {\n    required int32 type= 1;   //(\u901A\u77E5\u7C7B\u578B 1:rtc\u623F\u95F4\u72B6\u6001KV\u53D8\u66F4\u901A\u77E5)\n    optional int64 time= 2;   //\u6D88\u606F\u4EA7\u751F\u65F6\u95F4\n    optional string roomId=3; //\u4E3B\u64AD\u623F\u95F4id\n  }\n  message ").concat(PBName.RtcPullKV, "\n  {\n    required int64 timestamp = 1;\n    required string roomId = 2;\n  }\n  message ").concat(PBName.RtcKVOutput, "\n  {\n    repeated RtcKVEntity entries = 1;\n    optional bool bFullUpdate = 2;\n    optional int64 syncTime = 3; \n  }\n  message RtcKVEntity \n  {\n    required string key = 1;\n    required string value = 2;\n    optional int32 status = 3;\n    optional int64 timestamp = 4;\n    optional string uid = 5;\n  }\n  enum IdentityChangeType \n  {\n    AnchorToViewer = 1; //1\u4E3A\u4E3B\u64AD\u53D8\u89C2\u4F17\n    ViewerToAnchor = 2; //2\u4E3A\u89C2\u4F17\u53D8\u4E3B\u64AD\n  }\n  message ").concat(PBName.RtcQueryUserJoinedInput, "\n  {\n    required string userId = 1;\n  }\n  message ").concat(PBName.RtcQueryUserJoinedOutput, "\n  {\n    repeated RtcJoinedInfo info = 1;\n  }\n  message RtcJoinedInfo\n  {\n    required string deviceId = 1; //\u8BBE\u5907ID\n    required string roomId = 2;   //\u52A0\u5165\u7684\u623F\u95F4ID\n    optional int64 joinTime = 3;  //\u52A0\u5165\u7684\u65F6\u95F4\n  }\n  message ").concat(PBName.RtcViewerJoinedOutput, "\n  {\n    required string rtcToken=1;\n    repeated RtcKVEntity entries = 2;//KV\u5C5E\u6027\u5BF9\u8C61\u96C6\u5408\n    optional int64 syncTime = 3;//\u6240\u6709\u5C5E\u6027\u7684\u6700\u5927\u65F6\u95F4\u6233\uFF08\u4E0B\u6B21\u62C9\u53D6KV\u65F6\u7528\uFF09\u3002\n  }\n  message ").concat(PBName.RtcInviteInput, "\n  {\n    required string invitedUserId=1;    //\u88AB\u9080\u8BF7\u7684\u4EBA\u7684uid\n    optional int32  timeoutTime=2;       //\u9080\u8BF7\u8D85\u65F6\u65F6\u95F4(\u79D2),\u9ED8\u8BA4\u4E09\u5341\u79D2\n    required string invitedRoomId=3;    //\u88AB\u9080\u8BF7\u7684\u623F\u95F4\n    required string inviteInfo=4;       //\u9080\u8BF7\u7684\u4FE1\u606F(\u5305\u542B\u9080\u8BF7\u4EBA,\u88AB\u9080\u8BF7\u4EBA,\u5404\u81EAuserid)\u5BA2\u6237\u7AEF\u5B9A\u4E49\u597D.\u534F\u8BAE\u6808\u548Cserver\u900F\u4F20\n    required string inviteSessionId= 5; //\u5BA2\u6237\u7AEF\u4FDD\u8BC1\u552F\u4E00\u6027(\u5EFA\u8BAEroomid_userid_\u65F6\u95F4\u6233_\u968F\u673A\u6570)\n  }\n  message ").concat(PBName.RtcCancelInviteInput, "\n  {\n    required string invitedUserId=1;   //\u88AB\u9080\u8BF7\u7684\u4EBA\u7684uid\n    required string invitedRoomId=2;   //\u88AB\u9080\u8BF7\u7684\u623F\u95F4\n    required string inviteInfo=3;      //\u53D6\u6D88\u9080\u8BF7\u7684\u4FE1\u606F(\u5305\u542B\u9080\u8BF7\u4EBA,\u88AB\u9080\u8BF7\u4EBA,\u5404\u81EAuserid)\u5BA2\u6237\u7AEF\u5B9A\u4E49\u597D.\u534F\u8BAE\u6808\u548Cserver\u900F\u4F20\n    required string inviteSessionId=4; //\u9080\u8BF7\u7684sessionId,\u5BA2\u6237\u7AEF\u53D1\u8D77\u9080\u8BF7\u65F6\u4EA7\u751F\n  }\n  message ").concat(PBName.RtcInviteAnswerInput, "\n  {\n    required string inviteUserId=1;    //\u9080\u8BF7\u7684\u4EBA\u7684uid\n    required int32  answerCode=2;      //\u662F\u5426\u63A5\u53D7\u8FDE\u9EA6\u9080\u8BF7.0\u4E3A\u62D2\u7EDD,1\u4E3A\u63A5\u53D7\n    required string inviteRoomId=3;    //\u9080\u8BF7\u7684\u623F\u95F4\n    required string inviteSessionId=4; //\u9080\u8BF7\u7684sessionId\n    required string content=5;         //\u9700\u8981\u8F6C\u53D1\u7684content\n    optional string key=6;             //\u5982\u679C\u63A5\u53D7\u7684\u8BDD,\u9700\u8981\u52A0\u8FD9\u4E2A\u5B57\u6BB5,\u653E\u5728room\u7EA7\u522B\u7684k\u548Cv,\u65B0\u52A0\u5165\u623F\u95F4\u7684\u80FD\u62C9\u53D6\u5230\n    optional string value=7;           //\u5982\u679C\u63A5\u53D7\u7684\u8BDD,\u9700\u8981\u52A0\u8FD9\u4E2A\u5B57\u6BB5,\u653E\u5728room\u7EA7\u522B\u7684k\u548Cv,\u65B0\u52A0\u5165\u623F\u95F4\u7684\u80FD\u62C9\u53D6\u5230\n  }\n  message ").concat(PBName.RtcEndInviteInput, "\n  {\n    required string inviteRoomId=1;    //\u9080\u8BF7\u7684\u623F\u95F4\n    required string inviteSessionId=2; //\u9080\u8BF7\u7684sessionId\n    required string inviteContent=3;   //\u7ED3\u675F\u8FDE\u9EA6\u7684\u4FE1\u606F(\u9700\u8981\u900F\u4F20\u7ED9\u623F\u95F4\u5185\u5176\u4ED6\u4EBA)\n    repeated string inviteRoomKeys=4;  //\u9700\u8981\u5220\u9664\u8FDE\u9EA6\u7684\u4FE1\u606F\u7684key\n  }\n  message ").concat(PBName.UltraGrpPullSes, "\n  {\n      required int64 syncTime = 1;//\u540C\u6B65\u65F6\u95F4\u6233\n      optional bool isEraseMsgContent = 2;//\u62C9\u53D6\u4F1A\u8BDD\u65F6\uFF0C\u662F\u5426\u5C4F\u853D\u6389\u6D88\u606F\u5185\u5BB9\n  }\n  message ").concat(PBName.UltraGrpPullMsg, "\n  {\n    required int64 syncTime = 1;//\u540C\u6B65\u65F6\u95F4\u6233\n  }\n  message  ").concat(PBName.MsgChangeReq, "\n  {\n    required string fromUserId = 1;//\uFF08\u8C01\u53D1\u7684\uFF09\n    required string targetId = 2;// \u76EE\u6807Id(\u8D85\u7EA7\u7FA4Id)\n    required ChannelType type = 3;//\u53D1\u9001\u7C7B\u578B\u5982\uFF1A\uFF08P2P,GROUP,ULTRAGROUP\uFF09\n    required string msgUID = 4; // \u6269\u5C55\u6D88\u606F\u7684\u5185\u5BB9\u4F53\n    required int64 msgTime = 5; //\u539F\u59CB\u6D88\u606F\u65F6\u95F4\n    optional string busChannel = 6; // \u8BE5\u6D88\u606F\u6240\u5C5E\u4F1A\u8BDD\u7684\u4E1A\u52A1\u6807\u8BC6\uFF0C\u9650\u523620\u5B57\u7B26\u4EE5\u5185\n    optional string content = 7; // \u5373extraContent\u6D88\u606F\u6269\u5C55\u5185\u5BB9,\u4E0B\u8868\u683C\u8BF4\u660E\n  }\n  message ").concat(PBName.QueryMsgChange, "  //\u67E5\u8BE2\u5165\u53C2\n  {\n    required int64 syncTime = 1;//\u540C\u6B65\u65F6\u95F4\u6233\n  }\n  message ").concat(PBName.MsgChangeList, "  //\u5E94\u7B54\u7ED3\u679C\n  {\n    repeated MsgChange list = 1; //\u53D8\u66F4\n    required int64 syncTime = 2; //\u540C\u6B65\u65F6\u95F4(\u7528\u4E8E\u4E0B\u6B21\u540C\u6B65\u5165\u53C2)\n    optional bool  hasNext = 3 ;\n  }\n  message MsgChange  //\u53D8\u66F4\u8BE6\u60C5\n  {\n    required string targetId = 1; //  \u76EE\u6807Id(\u8D85\u7EA7\u7FA4Id)\n    required ChannelType type = 2; //  \u4F1A\u8BDD\u7C7B\u578B\n    required int64 time = 3;  // \u53D8\u66F4\u65F6\u95F4\n    required int32 changeType = 4;  // \u6D88\u606F\u53D8\u66F4\u7C7B\u578B\uFF081:\u6269\u5C55,2:\u4FEE\u6539,3:\u64A4\u56DE)\n    required string msgUID  = 5;  // \u6D88\u606FID\n    required int64 msgTime = 6;  //  \u6D88\u606F\u65F6\u95F4\n    optional string busChannel = 7; // \u9891\u9053ID\n    optional bool isAdmin = 8; //\u662F\u5426\u4E3A\u7BA1\u7406\u5458\uFF0C\u9ED8\u8BA4\u4E3A 0\uFF0C\u8BBE\u4E3A 1 \u65F6\uFF0CIMKit \u6536\u5230\u6B64\u6761\u6D88\u606F\u540E\uFF0C\u5C0F\u7070\u6761\u9ED8\u8BA4\u663E\u793A\u4E3A\u201C\u7BA1\u7406\u5458 \u64A4\u56DE\u4E86\u4E00\u6761\u6D88\u606F\u201D\u3002\n    optional bool isDel = 9; //\u9ED8\u8BA4\u4E3A 0 \u64A4\u56DE\u8BE5\u6761\u6D88\u606F\u540C\u65F6\uFF0C\u7528\u6237\u7AEF\u5C06\u8BE5\u6761\u6D88\u606F\u5220\u9664\u5E76\u66FF\u6362\u4E3A\u4E00\u6761\u5C0F\u7070\u6761\u64A4\u56DE\u63D0\u793A\u6D88\u606F\uFF1B\u4E3A 1 \u65F6\uFF0C\u8BE5\u6761\u6D88\u606F\u5220\u9664\u540E\uFF0C\u4E0D\u66FF\u6362\u4E3A\u5C0F\u7070\u6761\u63D0\u793A\u6D88\u606F\u3002\n    optional string operatorId = 10; // \u65B0\u52A0 - \u6D88\u606F\u53D8\u66F4\u7684\u64CD\u4F5C\u4EBAId\n  }\n  message ").concat(PBName.MsgQuery, "  //\u8BF7\u6C42\n  {\n    required string targetId = 1; //  \u76EE\u6807Id(\u8D85\u7EA7\u7FA4Id)\n    required ChannelType type = 2; //  \u4F1A\u8BDD\u7C7B\u578B\n    repeated MessageQueryInfo query = 3; //\n  }\n  message MessageQueryInfo\n  {\n    required int64 msgTime = 1;  // \u6D88\u606F\u65F6\u95F4\n    required string msgUID  = 2;  // \u6D88\u606FID\n    optional string busChannel = 3; // \u9891\u9053ID\n  }\n  message ").concat(PBName.MsgQueryAck, "  //\u5E94\u7B54\n  {\n    repeated DownStreamMessage list = 1;//\u6D88\u606F\n  }\n  message ").concat(PBName.OperateStatus, "  //\u5BA2\u6237\u7AEF\u53D1\u9001\n  {\n    optional string targetId =  1;// targetId\n    optional ChannelType type = 2;//\u53D1\u9001\u4F1A\u8BDD\u7C7B\u578B\u5982\uFF1A\uFF08P2P,GROUP\uFF09 \n    optional int32 opType = 3;  //0 , \u6B63\u5728\u8F93\u5165, 1 \u6B63\u5728XXX  \n    optional string busChannel = 4; // \u9891\u9053(channelId,\u53EF\u4EE5\u4E3A\u7A7A)\n  }\n  message ").concat(PBName.OperateStatusNotify, "  //\u670D\u52A1\u7AEF\u53D1\u9001\n  {\n      optional ChannelType type = 1;//\u53D1\u9001\u4F1A\u8BDD\u7C7B\u578B\u5982\uFF08P2P,GROUP\uFF09 \n      optional int64 notifyType = 2; //0x1 \u8868\u793A\u660E\u7EC6, 0x2 \u8868\u793A\u6C47\u603B 0x3 \u8868\u793A\u660E\u7EC6+\u6C47\u603B\n      repeated OperateInfo info = 3 ; //\u660E\u7EC6\u5217\u8868 \u5F53notifyType \u4E3A 1\u548C3\u65F6,\u6709\u6548\n      repeated OperateSummary summary = 4 ; //\u6C47\u603B\u5217\u8868, \u5F53notifyType \u4E3A2\u548C3 \u65F6,\u6709\u6548\n  }\n  message ").concat(PBName.OperateInfo, " {\n    // XX \u6B63\u5728\u505A\u4EC0\u4E48\n    optional string targetId = 1; // \u8D85\u7EA7\u7FA4Id  \u4F1A\u8BDDid\n    optional string busChannel = 2; // \u9891\u9053(channelId,\u53EF\u4EE5\u4E3A\u7A7A)\n    optional string userId = 3; // userId\n    optional int32 opType = 4;  //0 , \u6B63\u5728\u8F93\u5165, 1 \u6B63\u5728XX \n    optional int64 optime = 5;  //\u670D\u52A1\u7AEF\u6536\u5230\u7528\u6237\u64CD\u4F5C\u7684\u4E0A\u884C\u65F6\u95F4. \n  }\n      \n  message ").concat(PBName.OperateSummary, " {\n    // \u51E0\u4E2A\u4EBA \u6B63\u5728\u5E72\u4EC0\u4E48\n    optional string targetId = 1; // \u8D85\u7EA7\u7FA4Id  \u4F1A\u8BDDid\n    optional string busChannel = 2; // \u9891\u9053(channelId,\u53EF\u4EE5\u4E3A\u7A7A)\n    optional int32 count  = 3; // \u64CD\u4F5C\u4EBA\u6570\n    optional int32 opType = 4; //0, \u6B63\u5728\u8F93\u5165, 1 \u6B63\u5728XX \n  }\n  message ").concat(PBName.SetRtcRoomIdInput, "\n  {\n    required string  rtcRoomId= 1;  //rtc\u623F\u95F4ID;\n  }\n  message ").concat(PBName.SetRtcRoomIdOutput, "\n  {\n    required int32 nothing = 1;   //\u7528\u4E8E\u5360\u4F4D\n  }\n}\n");

    function protobuf (a) {

      var c = function () {
        function a(a, b, c) {
          this.low = 0 | a, this.high = 0 | b, this.unsigned = !!c;
        }

        function b(a) {
          return (a && a.__isLong__) === !0;
        }

        function e(a, b) {
          var e, f, h;
          return b ? (a >>>= 0, (h = a >= 0 && a < 256) && (f = d[a]) ? f : (e = g(a, (0 | a) < 0 ? -1 : 0, !0), h && (d[a] = e), e)) : (a |= 0, (h = a >= -128 && a < 128) && (f = c[a]) ? f : (e = g(a, a < 0 ? -1 : 0, !1), h && (c[a] = e), e));
        }

        function f(a, b) {
          if (isNaN(a) || !isFinite(a)) return b ? r : q;

          if (b) {
            if (a < 0) return r;
            if (a >= n) return w;
          } else {
            if (-o >= a) return x;
            if (a + 1 >= o) return v;
          }

          return a < 0 ? f(-a, b).neg() : g(0 | a % m, 0 | a / m, b);
        }

        function g(b, c, d) {
          return new a(b, c, d);
        }

        function i(a, b, c) {
          var d, e, g, j, k, l, m;
          if (a.length === 0) throw Error('empty string');
          if (a === 'NaN' || a === 'Infinity' || a === '+Infinity' || a === '-Infinity') return q;
          if (typeof b === 'number' ? (c = b, b = !1) : b = !!b, c = c || 10, c < 2 || c > 36) throw RangeError('radix');
          if ((d = a.indexOf('-')) > 0) throw Error('interior hyphen');
          if (d === 0) return i(a.substring(1), b, c).neg();

          for (e = f(h(c, 8)), g = q, j = 0; j < a.length; j += 8) {
            k = Math.min(8, a.length - j), l = parseInt(a.substring(j, j + k), c), k < 8 ? (m = f(h(c, k)), g = g.mul(m).add(f(l))) : (g = g.mul(e), g = g.add(f(l)));
          }

          return g.unsigned = b, g;
        }

        function j(b) {
          return b instanceof a ? b : typeof b === 'number' ? f(b) : typeof b === 'string' ? i(b) : g(b.low, b.high, b.unsigned);
        }

        var c, d, h, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y;
        return a.prototype.__isLong__, Object.defineProperty(a.prototype, '__isLong__', {
          value: !0,
          enumerable: !1,
          configurable: !1
        }), a.isLong = b, c = {}, d = {}, a.fromInt = e, a.fromNumber = f, a.fromBits = g, h = Math.pow, a.fromString = i, a.fromValue = j, k = 65536, l = 1 << 24, m = k * k, n = m * m, o = n / 2, p = e(l), q = e(0), a.ZERO = q, r = e(0, !0), a.UZERO = r, s = e(1), a.ONE = s, t = e(1, !0), a.UONE = t, u = e(-1), a.NEG_ONE = u, v = g(-1, 2147483647, !1), a.MAX_VALUE = v, w = g(-1, -1, !0), a.MAX_UNSIGNED_VALUE = w, x = g(0, -2147483648, !1), a.MIN_VALUE = x, y = a.prototype, y.toInt = function () {
          return this.unsigned ? this.low >>> 0 : this.low;
        }, y.toNumber = function () {
          return this.unsigned ? (this.high >>> 0) * m + (this.low >>> 0) : this.high * m + (this.low >>> 0);
        }, y.toString = function (a) {
          var b, c, d, e, g, i, j, k, l;
          if (a = a || 10, a < 2 || a > 36) throw RangeError('radix');
          if (this.isZero()) return '0';
          if (this.isNegative()) return this.eq(x) ? (b = f(a), c = this.div(b), d = c.mul(b).sub(this), c.toString(a) + d.toInt().toString(a)) : '-' + this.neg().toString(a);

          for (e = f(h(a, 6), this.unsigned), g = this, i = '';;) {
            if (j = g.div(e), k = g.sub(j.mul(e)).toInt() >>> 0, l = k.toString(a), g = j, g.isZero()) return l + i;

            for (; l.length < 6;) {
              l = '0' + l;
            }

            i = '' + l + i;
          }
        }, y.getHighBits = function () {
          return this.high;
        }, y.getHighBitsUnsigned = function () {
          return this.high >>> 0;
        }, y.getLowBits = function () {
          return this.low;
        }, y.getLowBitsUnsigned = function () {
          return this.low >>> 0;
        }, y.getNumBitsAbs = function () {
          var a, b;
          if (this.isNegative()) return this.eq(x) ? 64 : this.neg().getNumBitsAbs();

          for (a = this.high != 0 ? this.high : this.low, b = 31; b > 0 && (a & 1 << b) == 0; b--) {
          }

          return this.high != 0 ? b + 33 : b + 1;
        }, y.isZero = function () {
          return this.high === 0 && this.low === 0;
        }, y.isNegative = function () {
          return !this.unsigned && this.high < 0;
        }, y.isPositive = function () {
          return this.unsigned || this.high >= 0;
        }, y.isOdd = function () {
          return (1 & this.low) === 1;
        }, y.isEven = function () {
          return (1 & this.low) === 0;
        }, y.equals = function (a) {
          return b(a) || (a = j(a)), this.unsigned !== a.unsigned && this.high >>> 31 === 1 && a.high >>> 31 === 1 ? !1 : this.high === a.high && this.low === a.low;
        }, y.eq = y.equals, y.notEquals = function (a) {
          return !this.eq(a);
        }, y.neq = y.notEquals, y.lessThan = function (a) {
          return this.comp(a) < 0;
        }, y.lt = y.lessThan, y.lessThanOrEqual = function (a) {
          return this.comp(a) <= 0;
        }, y.lte = y.lessThanOrEqual, y.greaterThan = function (a) {
          return this.comp(a) > 0;
        }, y.gt = y.greaterThan, y.greaterThanOrEqual = function (a) {
          return this.comp(a) >= 0;
        }, y.gte = y.greaterThanOrEqual, y.compare = function (a) {
          if (b(a) || (a = j(a)), this.eq(a)) return 0;
          var c = this.isNegative();
          var d = a.isNegative();
          return c && !d ? -1 : !c && d ? 1 : this.unsigned ? a.high >>> 0 > this.high >>> 0 || a.high === this.high && a.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(a).isNegative() ? -1 : 1;
        }, y.comp = y.compare, y.negate = function () {
          return !this.unsigned && this.eq(x) ? x : this.not().add(s);
        }, y.neg = y.negate, y.add = function (a) {
          var c, d, e, f, h, i, k, l, m, n, o, p;
          return b(a) || (a = j(a)), c = this.high >>> 16, d = 65535 & this.high, e = this.low >>> 16, f = 65535 & this.low, h = a.high >>> 16, i = 65535 & a.high, k = a.low >>> 16, l = 65535 & a.low, m = 0, n = 0, o = 0, p = 0, p += f + l, o += p >>> 16, p &= 65535, o += e + k, n += o >>> 16, o &= 65535, n += d + i, m += n >>> 16, n &= 65535, m += c + h, m &= 65535, g(o << 16 | p, m << 16 | n, this.unsigned);
        }, y.subtract = function (a) {
          return b(a) || (a = j(a)), this.add(a.neg());
        }, y.sub = y.subtract, y.multiply = function (a) {
          var c, d, e, h, i, k, l, m, n, o, r, s;
          return this.isZero() ? q : (b(a) || (a = j(a)), a.isZero() ? q : this.eq(x) ? a.isOdd() ? x : q : a.eq(x) ? this.isOdd() ? x : q : this.isNegative() ? a.isNegative() ? this.neg().mul(a.neg()) : this.neg().mul(a).neg() : a.isNegative() ? this.mul(a.neg()).neg() : this.lt(p) && a.lt(p) ? f(this.toNumber() * a.toNumber(), this.unsigned) : (c = this.high >>> 16, d = 65535 & this.high, e = this.low >>> 16, h = 65535 & this.low, i = a.high >>> 16, k = 65535 & a.high, l = a.low >>> 16, m = 65535 & a.low, n = 0, o = 0, r = 0, s = 0, s += h * m, r += s >>> 16, s &= 65535, r += e * m, o += r >>> 16, r &= 65535, r += h * l, o += r >>> 16, r &= 65535, o += d * m, n += o >>> 16, o &= 65535, o += e * l, n += o >>> 16, o &= 65535, o += h * k, n += o >>> 16, o &= 65535, n += c * m + d * l + e * k + h * i, n &= 65535, g(r << 16 | s, n << 16 | o, this.unsigned)));
        }, y.mul = y.multiply, y.divide = function (a) {
          var c, d, e, g, i, k, l, m;
          if (b(a) || (a = j(a)), a.isZero()) throw Error('division by zero');
          if (this.isZero()) return this.unsigned ? r : q;

          if (this.unsigned) {
            if (a.unsigned || (a = a.toUnsigned()), a.gt(this)) return r;
            if (a.gt(this.shru(1))) return t;
            e = r;
          } else {
            if (this.eq(x)) return a.eq(s) || a.eq(u) ? x : a.eq(x) ? s : (g = this.shr(1), c = g.div(a).shl(1), c.eq(q) ? a.isNegative() ? s : u : (d = this.sub(a.mul(c)), e = c.add(d.div(a))));
            if (a.eq(x)) return this.unsigned ? r : q;
            if (this.isNegative()) return a.isNegative() ? this.neg().div(a.neg()) : this.neg().div(a).neg();
            if (a.isNegative()) return this.div(a.neg()).neg();
            e = q;
          }

          for (d = this; d.gte(a);) {
            for (c = Math.max(1, Math.floor(d.toNumber() / a.toNumber())), i = Math.ceil(Math.log(c) / Math.LN2), k = i <= 48 ? 1 : h(2, i - 48), l = f(c), m = l.mul(a); m.isNegative() || m.gt(d);) {
              c -= k, l = f(c, this.unsigned), m = l.mul(a);
            }

            l.isZero() && (l = s), e = e.add(l), d = d.sub(m);
          }

          return e;
        }, y.div = y.divide, y.modulo = function (a) {
          return b(a) || (a = j(a)), this.sub(this.div(a).mul(a));
        }, y.mod = y.modulo, y.not = function () {
          return g(~this.low, ~this.high, this.unsigned);
        }, y.and = function (a) {
          return b(a) || (a = j(a)), g(this.low & a.low, this.high & a.high, this.unsigned);
        }, y.or = function (a) {
          return b(a) || (a = j(a)), g(this.low | a.low, this.high | a.high, this.unsigned);
        }, y.xor = function (a) {
          return b(a) || (a = j(a)), g(this.low ^ a.low, this.high ^ a.high, this.unsigned);
        }, y.shiftLeft = function (a) {
          return b(a) && (a = a.toInt()), (a &= 63) === 0 ? this : a < 32 ? g(this.low << a, this.high << a | this.low >>> 32 - a, this.unsigned) : g(0, this.low << a - 32, this.unsigned);
        }, y.shl = y.shiftLeft, y.shiftRight = function (a) {
          return b(a) && (a = a.toInt()), (a &= 63) === 0 ? this : a < 32 ? g(this.low >>> a | this.high << 32 - a, this.high >> a, this.unsigned) : g(this.high >> a - 32, this.high >= 0 ? 0 : -1, this.unsigned);
        }, y.shr = y.shiftRight, y.shiftRightUnsigned = function (a) {
          var c, d;
          return b(a) && (a = a.toInt()), a &= 63, a === 0 ? this : (c = this.high, a < 32 ? (d = this.low, g(d >>> a | c << 32 - a, c >>> a, this.unsigned)) : a === 32 ? g(c, 0, this.unsigned) : g(c >>> a - 32, 0, this.unsigned));
        }, y.shru = y.shiftRightUnsigned, y.toSigned = function () {
          return this.unsigned ? g(this.low, this.high, !1) : this;
        }, y.toUnsigned = function () {
          return this.unsigned ? this : g(this.low, this.high, !0);
        }, y.toBytes = function (a) {
          return a ? this.toBytesLE() : this.toBytesBE();
        }, y.toBytesLE = function () {
          var a = this.high;
          var b = this.low;
          return [255 & b, 255 & b >>> 8, 255 & b >>> 16, 255 & b >>> 24, 255 & a, 255 & a >>> 8, 255 & a >>> 16, 255 & a >>> 24];
        }, y.toBytesBE = function () {
          var a = this.high;
          var b = this.low;
          return [255 & a >>> 24, 255 & a >>> 16, 255 & a >>> 8, 255 & a, 255 & b >>> 24, 255 & b >>> 16, 255 & b >>> 8, 255 & b];
        }, a;
      }();

      var d = function (a) {
        function f(a) {
          var b = 0;
          return function () {
            return b < a.length ? a.charCodeAt(b++) : null;
          };
        }

        function g() {
          var a = [];
          var b = [];
          return function () {
            return arguments.length === 0 ? b.join('') + e.apply(String, a) : (a.length + arguments.length > 1024 && (b.push(e.apply(String, a)), a.length = 0), Array.prototype.push.apply(a, arguments), void 0);
          };
        }

        function h(a, b, c, d, e) {
          var f;
          var g;
          var h = 8 * e - d - 1;
          var i = (1 << h) - 1;
          var j = i >> 1;
          var k = -7;
          var l = c ? e - 1 : 0;
          var m = c ? -1 : 1;
          var n = a[b + l];

          for (l += m, f = n & (1 << -k) - 1, n >>= -k, k += h; k > 0; f = 256 * f + a[b + l], l += m, k -= 8) {
          }

          for (g = f & (1 << -k) - 1, f >>= -k, k += d; k > 0; g = 256 * g + a[b + l], l += m, k -= 8) {
          }

          if (f === 0) f = 1 - j;else {
            if (f === i) return g ? 0 / 0 : 1 / 0 * (n ? -1 : 1);
            g += Math.pow(2, d), f -= j;
          }
          return (n ? -1 : 1) * g * Math.pow(2, f - d);
        }

        function i(a, b, c, d, e, f) {
          var g;
          var h;
          var i;
          var j = 8 * f - e - 1;
          var k = (1 << j) - 1;
          var l = k >> 1;
          var m = e === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var n = d ? 0 : f - 1;
          var o = d ? 1 : -1;
          var p = b < 0 || b === 0 && 1 / b < 0 ? 1 : 0;

          for (b = Math.abs(b), isNaN(b) || 1 / 0 === b ? (h = isNaN(b) ? 1 : 0, g = k) : (g = Math.floor(Math.log(b) / Math.LN2), b * (i = Math.pow(2, -g)) < 1 && (g--, i *= 2), b += g + l >= 1 ? m / i : m * Math.pow(2, 1 - l), b * i >= 2 && (g++, i /= 2), g + l >= k ? (h = 0, g = k) : g + l >= 1 ? (h = (b * i - 1) * Math.pow(2, e), g += l) : (h = b * Math.pow(2, l - 1) * Math.pow(2, e), g = 0)); e >= 8; a[c + n] = 255 & h, n += o, h /= 256, e -= 8) {
          }

          for (g = g << e | h, j += e; j > 0; a[c + n] = 255 & g, n += o, g /= 256, j -= 8) {
          }

          a[c + n - o] |= 128 * p;
        }

        var c;
        var d;
        var e;
        var j;
        var k;

        var b = function b(a, c, e) {
          if (typeof a === 'undefined' && (a = b.DEFAULT_CAPACITY), typeof c === 'undefined' && (c = b.DEFAULT_ENDIAN), typeof e === 'undefined' && (e = b.DEFAULT_NOASSERT), !e) {
            if (a = 0 | a, a < 0) throw RangeError('Illegal capacity');
            c = !!c, e = !!e;
          }

          this.buffer = a === 0 ? d : new ArrayBuffer(a), this.view = a === 0 ? null : new Uint8Array(this.buffer), this.offset = 0, this.markedOffset = -1, this.limit = a, this.littleEndian = c, this.noAssert = e;
        };

        return b.VERSION = '5.0.1', b.LITTLE_ENDIAN = !0, b.BIG_ENDIAN = !1, b.DEFAULT_CAPACITY = 16, b.DEFAULT_ENDIAN = b.BIG_ENDIAN, b.DEFAULT_NOASSERT = !1, b.Long = a || null, c = b.prototype, c.__isByteBuffer__, Object.defineProperty(c, '__isByteBuffer__', {
          value: !0,
          enumerable: !1,
          configurable: !1
        }), d = new ArrayBuffer(0), e = String.fromCharCode, b.accessor = function () {
          return Uint8Array;
        }, b.allocate = function (a, c, d) {
          return new b(a, c, d);
        }, b.concat = function (a, c, d, e) {
          var f, i, g, h, k, j;

          for ((typeof c === 'boolean' || typeof c !== 'string') && (e = d, d = c, c = void 0), f = 0, g = 0, h = a.length; h > g; ++g) {
            b.isByteBuffer(a[g]) || (a[g] = b.wrap(a[g], c)), i = a[g].limit - a[g].offset, i > 0 && (f += i);
          }

          if (f === 0) return new b(0, d, e);

          for (j = new b(f, d, e), g = 0; h > g;) {
            k = a[g++], i = k.limit - k.offset, i <= 0 || (j.view.set(k.view.subarray(k.offset, k.limit), j.offset), j.offset += i);
          }

          return j.limit = j.offset, j.offset = 0, j;
        }, b.isByteBuffer = function (a) {
          return (a && a.__isByteBuffer__) === !0;
        }, b.type = function () {
          return ArrayBuffer;
        }, b.wrap = function (a, d, e, f) {
          var g, h;
          if (typeof d !== 'string' && (f = e, e = d, d = void 0), typeof a === 'string') switch (typeof d === 'undefined' && (d = 'utf8'), d) {
            case 'base64':
              return b.fromBase64(a, e);

            case 'hex':
              return b.fromHex(a, e);

            case 'binary':
              return b.fromBinary(a, e);

            case 'utf8':
              return b.fromUTF8(a, e);

            case 'debug':
              return b.fromDebug(a, e);

            default:
              throw Error('Unsupported encoding: ' + d);
          }
          if (a === null || _typeof(a) !== 'object') throw TypeError('Illegal buffer');
          if (b.isByteBuffer(a)) return g = c.clone.call(a), g.markedOffset = -1, g;
          if (a instanceof Uint8Array) g = new b(0, e, f), a.length > 0 && (g.buffer = a.buffer, g.offset = a.byteOffset, g.limit = a.byteOffset + a.byteLength, g.view = new Uint8Array(a.buffer));else if (a instanceof ArrayBuffer) g = new b(0, e, f), a.byteLength > 0 && (g.buffer = a, g.offset = 0, g.limit = a.byteLength, g.view = a.byteLength > 0 ? new Uint8Array(a) : null);else {
            if (Object.prototype.toString.call(a) !== '[object Array]') throw TypeError('Illegal buffer');

            for (g = new b(a.length, e, f), g.limit = a.length, h = 0; h < a.length; ++h) {
              g.view[h] = a[h];
            }
          }
          return g;
        }, c.writeBitSet = function (a, b) {
          var h;
          var d;
          var e;
          var f;
          var g;
          var i;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (!(a instanceof Array)) throw TypeError('Illegal BitSet: Not an array');
            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          for (d = b, e = a.length, f = e >> 3, g = 0, b += this.writeVarint32(e, b); f--;) {
            h = 1 & !!a[g++] | (1 & !!a[g++]) << 1 | (1 & !!a[g++]) << 2 | (1 & !!a[g++]) << 3 | (1 & !!a[g++]) << 4 | (1 & !!a[g++]) << 5 | (1 & !!a[g++]) << 6 | (1 & !!a[g++]) << 7, this.writeByte(h, b++);
          }

          if (e > g) {
            for (i = 0, h = 0; e > g;) {
              h |= (1 & !!a[g++]) << i++;
            }

            this.writeByte(h, b++);
          }

          return c ? (this.offset = b, this) : b - d;
        }, c.readBitSet = function (a) {
          var h;
          var c;
          var d;
          var e;
          var f;
          var g;
          var i;
          var b = typeof a === 'undefined';

          for (b && (a = this.offset), c = this.readVarint32(a), d = c.value, e = d >> 3, f = 0, g = [], a += c.length; e--;) {
            h = this.readByte(a++), g[f++] = !!(1 & h), g[f++] = !!(2 & h), g[f++] = !!(4 & h), g[f++] = !!(8 & h), g[f++] = !!(16 & h), g[f++] = !!(32 & h), g[f++] = !!(64 & h), g[f++] = !!(128 & h);
          }

          if (d > f) for (i = 0, h = this.readByte(a++); d > f;) {
            g[f++] = !!(1 & h >> i++);
          }
          return b && (this.offset = a), g;
        }, c.readBytes = function (a, b) {
          var d;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + a > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + a + ') <= ' + this.buffer.byteLength);
          }

          return d = this.slice(b, b + a), c && (this.offset += a), d;
        }, c.writeBytes = c.append, c.writeInt8 = function (a, b) {
          var d;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal value: ' + a + ' (not an integer)');
            if (a |= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return b += 1, d = this.buffer.byteLength, b > d && this.resize((d *= 2) > b ? d : b), b -= 1, this.view[b] = a, c && (this.offset += 1), this;
        }, c.writeByte = c.writeInt8, c.readInt8 = function (a) {
          var c;
          var b = typeof a === 'undefined';

          if (b && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 1 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 1 + ') <= ' + this.buffer.byteLength);
          }

          return c = this.view[a], (128 & c) === 128 && (c = -(255 - c + 1)), b && (this.offset += 1), c;
        }, c.readByte = c.readInt8, c.writeUint8 = function (a, b) {
          var d;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal value: ' + a + ' (not an integer)');
            if (a >>>= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return b += 1, d = this.buffer.byteLength, b > d && this.resize((d *= 2) > b ? d : b), b -= 1, this.view[b] = a, c && (this.offset += 1), this;
        }, c.writeUInt8 = c.writeUint8, c.readUint8 = function (a) {
          var c;
          var b = typeof a === 'undefined';

          if (b && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 1 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 1 + ') <= ' + this.buffer.byteLength);
          }

          return c = this.view[a], b && (this.offset += 1), c;
        }, c.readUInt8 = c.readUint8, c.writeInt16 = function (a, b) {
          var d;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal value: ' + a + ' (not an integer)');
            if (a |= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return b += 2, d = this.buffer.byteLength, b > d && this.resize((d *= 2) > b ? d : b), b -= 2, this.littleEndian ? (this.view[b + 1] = (65280 & a) >>> 8, this.view[b] = 255 & a) : (this.view[b] = (65280 & a) >>> 8, this.view[b + 1] = 255 & a), c && (this.offset += 2), this;
        }, c.writeShort = c.writeInt16, c.readInt16 = function (a) {
          var c;
          var b = typeof a === 'undefined';

          if (b && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 2 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 2 + ') <= ' + this.buffer.byteLength);
          }

          return c = 0, this.littleEndian ? (c = this.view[a], c |= this.view[a + 1] << 8) : (c = this.view[a] << 8, c |= this.view[a + 1]), (32768 & c) === 32768 && (c = -(65535 - c + 1)), b && (this.offset += 2), c;
        }, c.readShort = c.readInt16, c.writeUint16 = function (a, b) {
          var d;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal value: ' + a + ' (not an integer)');
            if (a >>>= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return b += 2, d = this.buffer.byteLength, b > d && this.resize((d *= 2) > b ? d : b), b -= 2, this.littleEndian ? (this.view[b + 1] = (65280 & a) >>> 8, this.view[b] = 255 & a) : (this.view[b] = (65280 & a) >>> 8, this.view[b + 1] = 255 & a), c && (this.offset += 2), this;
        }, c.writeUInt16 = c.writeUint16, c.readUint16 = function (a) {
          var c;
          var b = typeof a === 'undefined';

          if (b && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 2 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 2 + ') <= ' + this.buffer.byteLength);
          }

          return c = 0, this.littleEndian ? (c = this.view[a], c |= this.view[a + 1] << 8) : (c = this.view[a] << 8, c |= this.view[a + 1]), b && (this.offset += 2), c;
        }, c.readUInt16 = c.readUint16, c.writeInt32 = function (a, b) {
          var d;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal value: ' + a + ' (not an integer)');
            if (a |= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return b += 4, d = this.buffer.byteLength, b > d && this.resize((d *= 2) > b ? d : b), b -= 4, this.littleEndian ? (this.view[b + 3] = 255 & a >>> 24, this.view[b + 2] = 255 & a >>> 16, this.view[b + 1] = 255 & a >>> 8, this.view[b] = 255 & a) : (this.view[b] = 255 & a >>> 24, this.view[b + 1] = 255 & a >>> 16, this.view[b + 2] = 255 & a >>> 8, this.view[b + 3] = 255 & a), c && (this.offset += 4), this;
        }, c.writeInt = c.writeInt32, c.readInt32 = function (a) {
          var c;
          var b = typeof a === 'undefined';

          if (b && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 4 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 4 + ') <= ' + this.buffer.byteLength);
          }

          return c = 0, this.littleEndian ? (c = this.view[a + 2] << 16, c |= this.view[a + 1] << 8, c |= this.view[a], c += this.view[a + 3] << 24 >>> 0) : (c = this.view[a + 1] << 16, c |= this.view[a + 2] << 8, c |= this.view[a + 3], c += this.view[a] << 24 >>> 0), c |= 0, b && (this.offset += 4), c;
        }, c.readInt = c.readInt32, c.writeUint32 = function (a, b) {
          var d;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal value: ' + a + ' (not an integer)');
            if (a >>>= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return b += 4, d = this.buffer.byteLength, b > d && this.resize((d *= 2) > b ? d : b), b -= 4, this.littleEndian ? (this.view[b + 3] = 255 & a >>> 24, this.view[b + 2] = 255 & a >>> 16, this.view[b + 1] = 255 & a >>> 8, this.view[b] = 255 & a) : (this.view[b] = 255 & a >>> 24, this.view[b + 1] = 255 & a >>> 16, this.view[b + 2] = 255 & a >>> 8, this.view[b + 3] = 255 & a), c && (this.offset += 4), this;
        }, c.writeUInt32 = c.writeUint32, c.readUint32 = function (a) {
          var c;
          var b = typeof a === 'undefined';

          if (b && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 4 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 4 + ') <= ' + this.buffer.byteLength);
          }

          return c = 0, this.littleEndian ? (c = this.view[a + 2] << 16, c |= this.view[a + 1] << 8, c |= this.view[a], c += this.view[a + 3] << 24 >>> 0) : (c = this.view[a + 1] << 16, c |= this.view[a + 2] << 8, c |= this.view[a + 3], c += this.view[a] << 24 >>> 0), b && (this.offset += 4), c;
        }, c.readUInt32 = c.readUint32, a && (c.writeInt64 = function (b, c) {
          var e;
          var f;
          var g;
          var d = typeof c === 'undefined';

          if (d && (c = this.offset), !this.noAssert) {
            if (typeof b === 'number') b = a.fromNumber(b);else if (typeof b === 'string') b = a.fromString(b);else if (!(b && b instanceof a)) throw TypeError('Illegal value: ' + b + ' (not an integer or Long)');
            if (typeof c !== 'number' || c % 1 !== 0) throw TypeError('Illegal offset: ' + c + ' (not an integer)');
            if (c >>>= 0, c < 0 || c + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + c + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return typeof b === 'number' ? b = a.fromNumber(b) : typeof b === 'string' && (b = a.fromString(b)), c += 8, e = this.buffer.byteLength, c > e && this.resize((e *= 2) > c ? e : c), c -= 8, f = b.low, g = b.high, this.littleEndian ? (this.view[c + 3] = 255 & f >>> 24, this.view[c + 2] = 255 & f >>> 16, this.view[c + 1] = 255 & f >>> 8, this.view[c] = 255 & f, c += 4, this.view[c + 3] = 255 & g >>> 24, this.view[c + 2] = 255 & g >>> 16, this.view[c + 1] = 255 & g >>> 8, this.view[c] = 255 & g) : (this.view[c] = 255 & g >>> 24, this.view[c + 1] = 255 & g >>> 16, this.view[c + 2] = 255 & g >>> 8, this.view[c + 3] = 255 & g, c += 4, this.view[c] = 255 & f >>> 24, this.view[c + 1] = 255 & f >>> 16, this.view[c + 2] = 255 & f >>> 8, this.view[c + 3] = 255 & f), d && (this.offset += 8), this;
        }, c.writeLong = c.writeInt64, c.readInt64 = function (b) {
          var d;
          var e;
          var f;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 8 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 8 + ') <= ' + this.buffer.byteLength);
          }

          return d = 0, e = 0, this.littleEndian ? (d = this.view[b + 2] << 16, d |= this.view[b + 1] << 8, d |= this.view[b], d += this.view[b + 3] << 24 >>> 0, b += 4, e = this.view[b + 2] << 16, e |= this.view[b + 1] << 8, e |= this.view[b], e += this.view[b + 3] << 24 >>> 0) : (e = this.view[b + 1] << 16, e |= this.view[b + 2] << 8, e |= this.view[b + 3], e += this.view[b] << 24 >>> 0, b += 4, d = this.view[b + 1] << 16, d |= this.view[b + 2] << 8, d |= this.view[b + 3], d += this.view[b] << 24 >>> 0), f = new a(d, e, !1), c && (this.offset += 8), f;
        }, c.readLong = c.readInt64, c.writeUint64 = function (b, c) {
          var e;
          var f;
          var g;
          var d = typeof c === 'undefined';

          if (d && (c = this.offset), !this.noAssert) {
            if (typeof b === 'number') b = a.fromNumber(b);else if (typeof b === 'string') b = a.fromString(b);else if (!(b && b instanceof a)) throw TypeError('Illegal value: ' + b + ' (not an integer or Long)');
            if (typeof c !== 'number' || c % 1 !== 0) throw TypeError('Illegal offset: ' + c + ' (not an integer)');
            if (c >>>= 0, c < 0 || c + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + c + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return typeof b === 'number' ? b = a.fromNumber(b) : typeof b === 'string' && (b = a.fromString(b)), c += 8, e = this.buffer.byteLength, c > e && this.resize((e *= 2) > c ? e : c), c -= 8, f = b.low, g = b.high, this.littleEndian ? (this.view[c + 3] = 255 & f >>> 24, this.view[c + 2] = 255 & f >>> 16, this.view[c + 1] = 255 & f >>> 8, this.view[c] = 255 & f, c += 4, this.view[c + 3] = 255 & g >>> 24, this.view[c + 2] = 255 & g >>> 16, this.view[c + 1] = 255 & g >>> 8, this.view[c] = 255 & g) : (this.view[c] = 255 & g >>> 24, this.view[c + 1] = 255 & g >>> 16, this.view[c + 2] = 255 & g >>> 8, this.view[c + 3] = 255 & g, c += 4, this.view[c] = 255 & f >>> 24, this.view[c + 1] = 255 & f >>> 16, this.view[c + 2] = 255 & f >>> 8, this.view[c + 3] = 255 & f), d && (this.offset += 8), this;
        }, c.writeUInt64 = c.writeUint64, c.readUint64 = function (b) {
          var d;
          var e;
          var f;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 8 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 8 + ') <= ' + this.buffer.byteLength);
          }

          return d = 0, e = 0, this.littleEndian ? (d = this.view[b + 2] << 16, d |= this.view[b + 1] << 8, d |= this.view[b], d += this.view[b + 3] << 24 >>> 0, b += 4, e = this.view[b + 2] << 16, e |= this.view[b + 1] << 8, e |= this.view[b], e += this.view[b + 3] << 24 >>> 0) : (e = this.view[b + 1] << 16, e |= this.view[b + 2] << 8, e |= this.view[b + 3], e += this.view[b] << 24 >>> 0, b += 4, d = this.view[b + 1] << 16, d |= this.view[b + 2] << 8, d |= this.view[b + 3], d += this.view[b] << 24 >>> 0), f = new a(d, e, !0), c && (this.offset += 8), f;
        }, c.readUInt64 = c.readUint64), c.writeFloat32 = function (a, b) {
          var d;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof a !== 'number') throw TypeError('Illegal value: ' + a + ' (not a number)');
            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return b += 4, d = this.buffer.byteLength, b > d && this.resize((d *= 2) > b ? d : b), b -= 4, i(this.view, a, b, this.littleEndian, 23, 4), c && (this.offset += 4), this;
        }, c.writeFloat = c.writeFloat32, c.readFloat32 = function (a) {
          var c;
          var b = typeof a === 'undefined';

          if (b && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 4 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 4 + ') <= ' + this.buffer.byteLength);
          }

          return c = h(this.view, a, this.littleEndian, 23, 4), b && (this.offset += 4), c;
        }, c.readFloat = c.readFloat32, c.writeFloat64 = function (a, b) {
          var d;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof a !== 'number') throw TypeError('Illegal value: ' + a + ' (not a number)');
            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return b += 8, d = this.buffer.byteLength, b > d && this.resize((d *= 2) > b ? d : b), b -= 8, i(this.view, a, b, this.littleEndian, 52, 8), c && (this.offset += 8), this;
        }, c.writeDouble = c.writeFloat64, c.readFloat64 = function (a) {
          var c;
          var b = typeof a === 'undefined';

          if (b && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 8 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 8 + ') <= ' + this.buffer.byteLength);
          }

          return c = h(this.view, a, this.littleEndian, 52, 8), b && (this.offset += 8), c;
        }, c.readDouble = c.readFloat64, b.MAX_VARINT32_BYTES = 5, b.calculateVarint32 = function (a) {
          return a >>>= 0, a < 128 ? 1 : a < 16384 ? 2 : 1 << 21 > a ? 3 : 1 << 28 > a ? 4 : 5;
        }, b.zigZagEncode32 = function (a) {
          return ((a |= 0) << 1 ^ a >> 31) >>> 0;
        }, b.zigZagDecode32 = function (a) {
          return 0 | a >>> 1 ^ -(1 & a);
        }, c.writeVarint32 = function (a, c) {
          var f;
          var e;
          var g;
          var d = typeof c === 'undefined';

          if (d && (c = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal value: ' + a + ' (not an integer)');
            if (a |= 0, typeof c !== 'number' || c % 1 !== 0) throw TypeError('Illegal offset: ' + c + ' (not an integer)');
            if (c >>>= 0, c < 0 || c + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + c + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          for (e = b.calculateVarint32(a), c += e, g = this.buffer.byteLength, c > g && this.resize((g *= 2) > c ? g : c), c -= e, a >>>= 0; a >= 128;) {
            f = 128 | 127 & a, this.view[c++] = f, a >>>= 7;
          }

          return this.view[c++] = a, d ? (this.offset = c, this) : e;
        }, c.writeVarint32ZigZag = function (a, c) {
          return this.writeVarint32(b.zigZagEncode32(a), c);
        }, c.readVarint32 = function (a) {
          var e;
          var c;
          var d;
          var f;
          var b = typeof a === 'undefined';

          if (b && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 1 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 1 + ') <= ' + this.buffer.byteLength);
          }

          c = 0, d = 0;

          do {
            if (!this.noAssert && a > this.limit) throw f = Error('Truncated'), f.truncated = !0, f;
            e = this.view[a++], c < 5 && (d |= (127 & e) << 7 * c), ++c;
          } while ((128 & e) !== 0);

          return d |= 0, b ? (this.offset = a, d) : {
            value: d,
            length: c
          };
        }, c.readVarint32ZigZag = function (a) {
          var c = this.readVarint32(a);
          return _typeof(c) === 'object' ? c.value = b.zigZagDecode32(c.value) : c = b.zigZagDecode32(c), c;
        }, a && (b.MAX_VARINT64_BYTES = 10, b.calculateVarint64 = function (b) {
          typeof b === 'number' ? b = a.fromNumber(b) : typeof b === 'string' && (b = a.fromString(b));
          var c = b.toInt() >>> 0;
          var d = b.shiftRightUnsigned(28).toInt() >>> 0;
          var e = b.shiftRightUnsigned(56).toInt() >>> 0;
          return e == 0 ? d == 0 ? c < 16384 ? c < 128 ? 1 : 2 : 1 << 21 > c ? 3 : 4 : d < 16384 ? d < 128 ? 5 : 6 : 1 << 21 > d ? 7 : 8 : e < 128 ? 9 : 10;
        }, b.zigZagEncode64 = function (b) {
          return typeof b === 'number' ? b = a.fromNumber(b, !1) : typeof b === 'string' ? b = a.fromString(b, !1) : b.unsigned !== !1 && (b = b.toSigned()), b.shiftLeft(1).xor(b.shiftRight(63)).toUnsigned();
        }, b.zigZagDecode64 = function (b) {
          return typeof b === 'number' ? b = a.fromNumber(b, !1) : typeof b === 'string' ? b = a.fromString(b, !1) : b.unsigned !== !1 && (b = b.toSigned()), b.shiftRightUnsigned(1).xor(b.and(a.ONE).toSigned().negate()).toSigned();
        }, c.writeVarint64 = function (c, d) {
          var f;
          var g;
          var h;
          var i;
          var j;
          var e = typeof d === 'undefined';

          if (e && (d = this.offset), !this.noAssert) {
            if (typeof c === 'number') c = a.fromNumber(c);else if (typeof c === 'string') c = a.fromString(c);else if (!(c && c instanceof a)) throw TypeError('Illegal value: ' + c + ' (not an integer or Long)');
            if (typeof d !== 'number' || d % 1 !== 0) throw TypeError('Illegal offset: ' + d + ' (not an integer)');
            if (d >>>= 0, d < 0 || d + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + d + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          switch (typeof c === 'number' ? c = a.fromNumber(c, !1) : typeof c === 'string' ? c = a.fromString(c, !1) : c.unsigned !== !1 && (c = c.toSigned()), f = b.calculateVarint64(c), g = c.toInt() >>> 0, h = c.shiftRightUnsigned(28).toInt() >>> 0, i = c.shiftRightUnsigned(56).toInt() >>> 0, d += f, j = this.buffer.byteLength, d > j && this.resize((j *= 2) > d ? j : d), d -= f, f) {
            case 10:
              this.view[d + 9] = 1 & i >>> 7;

            case 9:
              this.view[d + 8] = f !== 9 ? 128 | i : 127 & i;

            case 8:
              this.view[d + 7] = f !== 8 ? 128 | h >>> 21 : 127 & h >>> 21;

            case 7:
              this.view[d + 6] = f !== 7 ? 128 | h >>> 14 : 127 & h >>> 14;

            case 6:
              this.view[d + 5] = f !== 6 ? 128 | h >>> 7 : 127 & h >>> 7;

            case 5:
              this.view[d + 4] = f !== 5 ? 128 | h : 127 & h;

            case 4:
              this.view[d + 3] = f !== 4 ? 128 | g >>> 21 : 127 & g >>> 21;

            case 3:
              this.view[d + 2] = f !== 3 ? 128 | g >>> 14 : 127 & g >>> 14;

            case 2:
              this.view[d + 1] = f !== 2 ? 128 | g >>> 7 : 127 & g >>> 7;

            case 1:
              this.view[d] = f !== 1 ? 128 | g : 127 & g;
          }

          return e ? (this.offset += f, this) : f;
        }, c.writeVarint64ZigZag = function (a, c) {
          return this.writeVarint64(b.zigZagEncode64(a), c);
        }, c.readVarint64 = function (b) {
          var d;
          var e;
          var f;
          var g;
          var h;
          var i;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 1 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 1 + ') <= ' + this.buffer.byteLength);
          }

          if (d = b, e = 0, f = 0, g = 0, h = 0, h = this.view[b++], e = 127 & h, 128 & h && (h = this.view[b++], e |= (127 & h) << 7, (128 & h || this.noAssert && typeof h === 'undefined') && (h = this.view[b++], e |= (127 & h) << 14, (128 & h || this.noAssert && typeof h === 'undefined') && (h = this.view[b++], e |= (127 & h) << 21, (128 & h || this.noAssert && typeof h === 'undefined') && (h = this.view[b++], f = 127 & h, (128 & h || this.noAssert && typeof h === 'undefined') && (h = this.view[b++], f |= (127 & h) << 7, (128 & h || this.noAssert && typeof h === 'undefined') && (h = this.view[b++], f |= (127 & h) << 14, (128 & h || this.noAssert && typeof h === 'undefined') && (h = this.view[b++], f |= (127 & h) << 21, (128 & h || this.noAssert && typeof h === 'undefined') && (h = this.view[b++], g = 127 & h, (128 & h || this.noAssert && typeof h === 'undefined') && (h = this.view[b++], g |= (127 & h) << 7, 128 & h || this.noAssert && typeof h === 'undefined')))))))))) throw Error('Buffer overrun');
          return i = a.fromBits(e | f << 28, f >>> 4 | g << 24, !1), c ? (this.offset = b, i) : {
            value: i,
            length: b - d
          };
        }, c.readVarint64ZigZag = function (c) {
          var d = this.readVarint64(c);
          return d && d.value instanceof a ? d.value = b.zigZagDecode64(d.value) : d = b.zigZagDecode64(d), d;
        }), c.writeCString = function (a, b) {
          var d;
          var e;
          var g;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), e = a.length, !this.noAssert) {
            if (typeof a !== 'string') throw TypeError('Illegal str: Not a string');

            for (d = 0; e > d; ++d) {
              if (a.charCodeAt(d) === 0) throw RangeError('Illegal str: Contains NULL-characters');
            }

            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return e = k.calculateUTF16asUTF8(f(a))[1], b += e + 1, g = this.buffer.byteLength, b > g && this.resize((g *= 2) > b ? g : b), b -= e + 1, k.encodeUTF16toUTF8(f(a), function (a) {
            this.view[b++] = a;
          }.bind(this)), this.view[b++] = 0, c ? (this.offset = b, this) : e;
        }, c.readCString = function (a) {
          var c;
          var e;
          var f;
          var b = typeof a === 'undefined';

          if (b && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 1 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 1 + ') <= ' + this.buffer.byteLength);
          }

          return c = a, f = -1, k.decodeUTF8toUTF16(function () {
            if (f === 0) return null;
            if (a >= this.limit) throw RangeError('Illegal range: Truncated data, ' + a + ' < ' + this.limit);
            return f = this.view[a++], f === 0 ? null : f;
          }.bind(this), e = g(), !0), b ? (this.offset = a, e()) : {
            string: e(),
            length: a - c
          };
        }, c.writeIString = function (a, b) {
          var e;
          var d;
          var g;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof a !== 'string') throw TypeError('Illegal str: Not a string');
            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          if (d = b, e = k.calculateUTF16asUTF8(f(a), this.noAssert)[1], b += 4 + e, g = this.buffer.byteLength, b > g && this.resize((g *= 2) > b ? g : b), b -= 4 + e, this.littleEndian ? (this.view[b + 3] = 255 & e >>> 24, this.view[b + 2] = 255 & e >>> 16, this.view[b + 1] = 255 & e >>> 8, this.view[b] = 255 & e) : (this.view[b] = 255 & e >>> 24, this.view[b + 1] = 255 & e >>> 16, this.view[b + 2] = 255 & e >>> 8, this.view[b + 3] = 255 & e), b += 4, k.encodeUTF16toUTF8(f(a), function (a) {
            this.view[b++] = a;
          }.bind(this)), b !== d + 4 + e) throw RangeError('Illegal range: Truncated data, ' + b + ' == ' + (b + 4 + e));
          return c ? (this.offset = b, this) : b - d;
        }, c.readIString = function (a) {
          var d;
          var e;
          var f;
          var c = typeof a === 'undefined';

          if (c && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 4 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 4 + ') <= ' + this.buffer.byteLength);
          }

          return d = a, e = this.readUint32(a), f = this.readUTF8String(e, b.METRICS_BYTES, a += 4), a += f.length, c ? (this.offset = a, f.string) : {
            string: f.string,
            length: a - d
          };
        }, b.METRICS_CHARS = 'c', b.METRICS_BYTES = 'b', c.writeUTF8String = function (a, b) {
          var d;
          var e;
          var g;
          var c = typeof b === 'undefined';

          if (c && (b = this.offset), !this.noAssert) {
            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: ' + b + ' (not an integer)');
            if (b >>>= 0, b < 0 || b + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + b + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return e = b, d = k.calculateUTF16asUTF8(f(a))[1], b += d, g = this.buffer.byteLength, b > g && this.resize((g *= 2) > b ? g : b), b -= d, k.encodeUTF16toUTF8(f(a), function (a) {
            this.view[b++] = a;
          }.bind(this)), c ? (this.offset = b, this) : b - e;
        }, c.writeString = c.writeUTF8String, b.calculateUTF8Chars = function (a) {
          return k.calculateUTF16asUTF8(f(a))[0];
        }, b.calculateUTF8Bytes = function (a) {
          return k.calculateUTF16asUTF8(f(a))[1];
        }, b.calculateString = b.calculateUTF8Bytes, c.readUTF8String = function (a, c, d) {
          var e, i, f, h, j;

          if (typeof c === 'number' && (d = c, c = void 0), e = typeof d === 'undefined', e && (d = this.offset), typeof c === 'undefined' && (c = b.METRICS_CHARS), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal length: ' + a + ' (not an integer)');
            if (a |= 0, typeof d !== 'number' || d % 1 !== 0) throw TypeError('Illegal offset: ' + d + ' (not an integer)');
            if (d >>>= 0, d < 0 || d + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + d + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          if (f = 0, h = d, c === b.METRICS_CHARS) {
            if (i = g(), k.decodeUTF8(function () {
              return a > f && d < this.limit ? this.view[d++] : null;
            }.bind(this), function (a) {
              ++f, k.UTF8toUTF16(a, i);
            }), f !== a) throw RangeError('Illegal range: Truncated data, ' + f + ' == ' + a);
            return e ? (this.offset = d, i()) : {
              string: i(),
              length: d - h
            };
          }

          if (c === b.METRICS_BYTES) {
            if (!this.noAssert) {
              if (typeof d !== 'number' || d % 1 !== 0) throw TypeError('Illegal offset: ' + d + ' (not an integer)');
              if (d >>>= 0, d < 0 || d + a > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + d + ' (+' + a + ') <= ' + this.buffer.byteLength);
            }

            if (j = d + a, k.decodeUTF8toUTF16(function () {
              return j > d ? this.view[d++] : null;
            }.bind(this), i = g(), this.noAssert), d !== j) throw RangeError('Illegal range: Truncated data, ' + d + ' == ' + j);
            return e ? (this.offset = d, i()) : {
              string: i(),
              length: d - h
            };
          }

          throw TypeError('Unsupported metrics: ' + c);
        }, c.readString = c.readUTF8String, c.writeVString = function (a, c) {
          var g;
          var h;
          var e;
          var i;
          var d = typeof c === 'undefined';

          if (d && (c = this.offset), !this.noAssert) {
            if (typeof a !== 'string') throw TypeError('Illegal str: Not a string');
            if (typeof c !== 'number' || c % 1 !== 0) throw TypeError('Illegal offset: ' + c + ' (not an integer)');
            if (c >>>= 0, c < 0 || c + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + c + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          if (e = c, g = k.calculateUTF16asUTF8(f(a), this.noAssert)[1], h = b.calculateVarint32(g), c += h + g, i = this.buffer.byteLength, c > i && this.resize((i *= 2) > c ? i : c), c -= h + g, c += this.writeVarint32(g, c), k.encodeUTF16toUTF8(f(a), function (a) {
            this.view[c++] = a;
          }.bind(this)), c !== e + g + h) throw RangeError('Illegal range: Truncated data, ' + c + ' == ' + (c + g + h));
          return d ? (this.offset = c, this) : c - e;
        }, c.readVString = function (a) {
          var d;
          var e;
          var f;
          var c = typeof a === 'undefined';

          if (c && (a = this.offset), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 1 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 1 + ') <= ' + this.buffer.byteLength);
          }

          return d = a, e = this.readVarint32(a), f = this.readUTF8String(e.value, b.METRICS_BYTES, a += e.length), a += f.length, c ? (this.offset = a, f.string) : {
            string: f.string,
            length: a - d
          };
        }, c.append = function (a, c, d) {
          var e, f, g;

          if ((typeof c === 'number' || typeof c !== 'string') && (d = c, c = void 0), e = typeof d === 'undefined', e && (d = this.offset), !this.noAssert) {
            if (typeof d !== 'number' || d % 1 !== 0) throw TypeError('Illegal offset: ' + d + ' (not an integer)');
            if (d >>>= 0, d < 0 || d + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + d + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return a instanceof b || (a = b.wrap(a, c)), f = a.limit - a.offset, f <= 0 ? this : (d += f, g = this.buffer.byteLength, d > g && this.resize((g *= 2) > d ? g : d), d -= f, this.view.set(a.view.subarray(a.offset, a.limit), d), a.offset += f, e && (this.offset += f), this);
        }, c.appendTo = function (a, b) {
          return a.append(this, b), this;
        }, c.assert = function (a) {
          return this.noAssert = !a, this;
        }, c.capacity = function () {
          return this.buffer.byteLength;
        }, c.clear = function () {
          return this.offset = 0, this.limit = this.buffer.byteLength, this.markedOffset = -1, this;
        }, c.clone = function (a) {
          var c = new b(0, this.littleEndian, this.noAssert);
          return a ? (c.buffer = new ArrayBuffer(this.buffer.byteLength), c.view = new Uint8Array(c.buffer)) : (c.buffer = this.buffer, c.view = this.view), c.offset = this.offset, c.markedOffset = this.markedOffset, c.limit = this.limit, c;
        }, c.compact = function (a, b) {
          var c, e, f;

          if (typeof a === 'undefined' && (a = this.offset), typeof b === 'undefined' && (b = this.limit), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal begin: Not an integer');
            if (a >>>= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal end: Not an integer');
            if (b >>>= 0, a < 0 || a > b || b > this.buffer.byteLength) throw RangeError('Illegal range: 0 <= ' + a + ' <= ' + b + ' <= ' + this.buffer.byteLength);
          }

          return a === 0 && b === this.buffer.byteLength ? this : (c = b - a, c === 0 ? (this.buffer = d, this.view = null, this.markedOffset >= 0 && (this.markedOffset -= a), this.offset = 0, this.limit = 0, this) : (e = new ArrayBuffer(c), f = new Uint8Array(e), f.set(this.view.subarray(a, b)), this.buffer = e, this.view = f, this.markedOffset >= 0 && (this.markedOffset -= a), this.offset = 0, this.limit = c, this));
        }, c.copy = function (a, c) {
          if (typeof a === 'undefined' && (a = this.offset), typeof c === 'undefined' && (c = this.limit), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal begin: Not an integer');
            if (a >>>= 0, typeof c !== 'number' || c % 1 !== 0) throw TypeError('Illegal end: Not an integer');
            if (c >>>= 0, a < 0 || a > c || c > this.buffer.byteLength) throw RangeError('Illegal range: 0 <= ' + a + ' <= ' + c + ' <= ' + this.buffer.byteLength);
          }

          if (a === c) return new b(0, this.littleEndian, this.noAssert);
          var d = c - a;
          var e = new b(d, this.littleEndian, this.noAssert);
          return e.offset = 0, e.limit = d, e.markedOffset >= 0 && (e.markedOffset -= a), this.copyTo(e, 0, a, c), e;
        }, c.copyTo = function (a, c, d, e) {
          var f, g, h;
          if (!this.noAssert && !b.isByteBuffer(a)) throw TypeError('Illegal target: Not a ByteBuffer');
          if (c = (g = typeof c === 'undefined') ? a.offset : 0 | c, d = (f = typeof d === 'undefined') ? this.offset : 0 | d, e = typeof e === 'undefined' ? this.limit : 0 | e, c < 0 || c > a.buffer.byteLength) throw RangeError('Illegal target range: 0 <= ' + c + ' <= ' + a.buffer.byteLength);
          if (d < 0 || e > this.buffer.byteLength) throw RangeError('Illegal source range: 0 <= ' + d + ' <= ' + this.buffer.byteLength);
          return h = e - d, h === 0 ? a : (a.ensureCapacity(c + h), a.view.set(this.view.subarray(d, e), c), f && (this.offset += h), g && (a.offset += h), this);
        }, c.ensureCapacity = function (a) {
          var b = this.buffer.byteLength;
          return a > b ? this.resize((b *= 2) > a ? b : a) : this;
        }, c.fill = function (a, b, c) {
          var d = typeof b === 'undefined';

          if (d && (b = this.offset), typeof a === 'string' && a.length > 0 && (a = a.charCodeAt(0)), typeof b === 'undefined' && (b = this.offset), typeof c === 'undefined' && (c = this.limit), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal value: ' + a + ' (not an integer)');
            if (a |= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal begin: Not an integer');
            if (b >>>= 0, typeof c !== 'number' || c % 1 !== 0) throw TypeError('Illegal end: Not an integer');
            if (c >>>= 0, b < 0 || b > c || c > this.buffer.byteLength) throw RangeError('Illegal range: 0 <= ' + b + ' <= ' + c + ' <= ' + this.buffer.byteLength);
          }

          if (b >= c) return this;

          for (; c > b;) {
            this.view[b++] = a;
          }

          return d && (this.offset = b), this;
        }, c.flip = function () {
          return this.limit = this.offset, this.offset = 0, this;
        }, c.mark = function (a) {
          if (a = typeof a === 'undefined' ? this.offset : a, !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal offset: ' + a + ' (not an integer)');
            if (a >>>= 0, a < 0 || a + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + a + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return this.markedOffset = a, this;
        }, c.order = function (a) {
          if (!this.noAssert && typeof a !== 'boolean') throw TypeError('Illegal littleEndian: Not a boolean');
          return this.littleEndian = !!a, this;
        }, c.LE = function (a) {
          return this.littleEndian = typeof a !== 'undefined' ? !!a : !0, this;
        }, c.BE = function (a) {
          return this.littleEndian = typeof a !== 'undefined' ? !a : !1, this;
        }, c.prepend = function (a, c, d) {
          var e, f, g, h, i;

          if ((typeof c === 'number' || typeof c !== 'string') && (d = c, c = void 0), e = typeof d === 'undefined', e && (d = this.offset), !this.noAssert) {
            if (typeof d !== 'number' || d % 1 !== 0) throw TypeError('Illegal offset: ' + d + ' (not an integer)');
            if (d >>>= 0, d < 0 || d + 0 > this.buffer.byteLength) throw RangeError('Illegal offset: 0 <= ' + d + ' (+' + 0 + ') <= ' + this.buffer.byteLength);
          }

          return a instanceof b || (a = b.wrap(a, c)), f = a.limit - a.offset, f <= 0 ? this : (g = f - d, g > 0 ? (h = new ArrayBuffer(this.buffer.byteLength + g), i = new Uint8Array(h), i.set(this.view.subarray(d, this.buffer.byteLength), f), this.buffer = h, this.view = i, this.offset += g, this.markedOffset >= 0 && (this.markedOffset += g), this.limit += g, d += g) : new Uint8Array(this.buffer), this.view.set(a.view.subarray(a.offset, a.limit), d - f), a.offset = a.limit, e && (this.offset -= f), this);
        }, c.prependTo = function (a, b) {
          return a.prepend(this, b), this;
        }, c.printDebug = function (a) {
          typeof a !== 'function' && (a = console.log.bind(console)), a(this.toString() + '\n-------------------------------------------------------------------\n' + this.toDebug(!0));
        }, c.remaining = function () {
          return this.limit - this.offset;
        }, c.reset = function () {
          return this.markedOffset >= 0 ? (this.offset = this.markedOffset, this.markedOffset = -1) : this.offset = 0, this;
        }, c.resize = function (a) {
          var b, c;

          if (!this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal capacity: ' + a + ' (not an integer)');
            if (a |= 0, a < 0) throw RangeError('Illegal capacity: 0 <= ' + a);
          }

          return this.buffer.byteLength < a && (b = new ArrayBuffer(a), c = new Uint8Array(b), c.set(this.view), this.buffer = b, this.view = c), this;
        }, c.reverse = function (a, b) {
          if (typeof a === 'undefined' && (a = this.offset), typeof b === 'undefined' && (b = this.limit), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal begin: Not an integer');
            if (a >>>= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal end: Not an integer');
            if (b >>>= 0, a < 0 || a > b || b > this.buffer.byteLength) throw RangeError('Illegal range: 0 <= ' + a + ' <= ' + b + ' <= ' + this.buffer.byteLength);
          }

          return a === b ? this : (Array.prototype.reverse.call(this.view.subarray(a, b)), this);
        }, c.skip = function (a) {
          if (!this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal length: ' + a + ' (not an integer)');
            a |= 0;
          }

          var b = this.offset + a;
          if (!this.noAssert && (b < 0 || b > this.buffer.byteLength)) throw RangeError('Illegal length: 0 <= ' + this.offset + ' + ' + a + ' <= ' + this.buffer.byteLength);
          return this.offset = b, this;
        }, c.slice = function (a, b) {
          if (typeof a === 'undefined' && (a = this.offset), typeof b === 'undefined' && (b = this.limit), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal begin: Not an integer');
            if (a >>>= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal end: Not an integer');
            if (b >>>= 0, a < 0 || a > b || b > this.buffer.byteLength) throw RangeError('Illegal range: 0 <= ' + a + ' <= ' + b + ' <= ' + this.buffer.byteLength);
          }

          var c = this.clone();
          return c.offset = a, c.limit = b, c;
        }, c.toBuffer = function (a) {
          var e;
          var b = this.offset;
          var c = this.limit;

          if (!this.noAssert) {
            if (typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal offset: Not an integer');
            if (b >>>= 0, typeof c !== 'number' || c % 1 !== 0) throw TypeError('Illegal limit: Not an integer');
            if (c >>>= 0, b < 0 || b > c || c > this.buffer.byteLength) throw RangeError('Illegal range: 0 <= ' + b + ' <= ' + c + ' <= ' + this.buffer.byteLength);
          }

          return a || b !== 0 || c !== this.buffer.byteLength ? b === c ? d : (e = new ArrayBuffer(c - b), new Uint8Array(e).set(new Uint8Array(this.buffer).subarray(b, c), 0), e) : this.buffer;
        }, c.toArrayBuffer = c.toBuffer, c.toString = function (a, b, c) {
          if (typeof a === 'undefined') return 'ByteBufferAB(offset=' + this.offset + ',markedOffset=' + this.markedOffset + ',limit=' + this.limit + ',capacity=' + this.capacity() + ')';

          switch (typeof a === 'number' && (a = 'utf8', b = a, c = b), a) {
            case 'utf8':
              return this.toUTF8(b, c);

            case 'base64':
              return this.toBase64(b, c);

            case 'hex':
              return this.toHex(b, c);

            case 'binary':
              return this.toBinary(b, c);

            case 'debug':
              return this.toDebug();

            case 'columns':
              return this.toColumns();

            default:
              throw Error('Unsupported encoding: ' + a);
          }
        }, j = function () {
          var d;
          var e;
          var a = {};
          var b = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47];
          var c = [];

          for (d = 0, e = b.length; e > d; ++d) {
            c[b[d]] = d;
          }

          return a.encode = function (a, c) {
            for (var d, e; (d = a()) !== null;) {
              c(b[63 & d >> 2]), e = (3 & d) << 4, (d = a()) !== null ? (e |= 15 & d >> 4, c(b[63 & (e | 15 & d >> 4)]), e = (15 & d) << 2, (d = a()) !== null ? (c(b[63 & (e | 3 & d >> 6)]), c(b[63 & d])) : (c(b[63 & e]), c(61))) : (c(b[63 & e]), c(61), c(61));
            }
          }, a.decode = function (a, b) {
            function g(a) {
              throw Error('Illegal character code: ' + a);
            }

            for (var d, e, f; (d = a()) !== null;) {
              if (e = c[d], typeof e === 'undefined' && g(d), (d = a()) !== null && (f = c[d], typeof f === 'undefined' && g(d), b(e << 2 >>> 0 | (48 & f) >> 4), (d = a()) !== null)) {
                if (e = c[d], typeof e === 'undefined') {
                  if (d === 61) break;
                  g(d);
                }

                if (b((15 & f) << 4 >>> 0 | (60 & e) >> 2), (d = a()) !== null) {
                  if (f = c[d], typeof f === 'undefined') {
                    if (d === 61) break;
                    g(d);
                  }

                  b((3 & e) << 6 >>> 0 | f);
                }
              }
            }
          }, a.test = function (a) {
            return /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(a);
          }, a;
        }(), c.toBase64 = function (a, b) {
          if (typeof a === 'undefined' && (a = this.offset), typeof b === 'undefined' && (b = this.limit), a = 0 | a, b = 0 | b, a < 0 || b > this.capacity || a > b) throw RangeError('begin, end');
          var c;
          return j.encode(function () {
            return b > a ? this.view[a++] : null;
          }.bind(this), c = g()), c();
        }, b.fromBase64 = function (a, c) {
          if (typeof a !== 'string') throw TypeError('str');
          var d = new b(3 * (a.length / 4), c);
          var e = 0;
          return j.decode(f(a), function (a) {
            d.view[e++] = a;
          }), d.limit = e, d;
        }, b.btoa = function (a) {
          return b.fromBinary(a).toBase64();
        }, b.atob = function (a) {
          return b.fromBase64(a).toBinary();
        }, c.toBinary = function (a, b) {
          if (typeof a === 'undefined' && (a = this.offset), typeof b === 'undefined' && (b = this.limit), a |= 0, b |= 0, a < 0 || b > this.capacity() || a > b) throw RangeError('begin, end');
          if (a === b) return '';

          for (var c = [], d = []; b > a;) {
            c.push(this.view[a++]), c.length >= 1024 && (d.push(String.fromCharCode.apply(String, c)), c = []);
          }

          return d.join('') + String.fromCharCode.apply(String, c);
        }, b.fromBinary = function (a, c) {
          if (typeof a !== 'string') throw TypeError('str');

          for (var f, d = 0, e = a.length, g = new b(e, c); e > d;) {
            if (f = a.charCodeAt(d), f > 255) throw RangeError('illegal char code: ' + f);
            g.view[d++] = f;
          }

          return g.limit = e, g;
        }, c.toDebug = function (a) {
          for (var d, b = -1, c = this.buffer.byteLength, e = '', f = '', g = ''; c > b;) {
            if (b !== -1 && (d = this.view[b], e += d < 16 ? '0' + d.toString(16).toUpperCase() : d.toString(16).toUpperCase(), a && (f += d > 32 && d < 127 ? String.fromCharCode(d) : '.')), ++b, a && b > 0 && b % 16 === 0 && b !== c) {
              for (; e.length < 51;) {
                e += ' ';
              }

              g += e + f + '\n', e = f = '';
            }

            e += b === this.offset && b === this.limit ? b === this.markedOffset ? '!' : '|' : b === this.offset ? b === this.markedOffset ? '[' : '<' : b === this.limit ? b === this.markedOffset ? ']' : '>' : b === this.markedOffset ? "'" : a || b !== 0 && b !== c ? ' ' : '';
          }

          if (a && e !== ' ') {
            for (; e.length < 51;) {
              e += ' ';
            }

            g += e + f + '\n';
          }

          return a ? g : e;
        }, b.fromDebug = function (a, c, d) {
          for (var i, j, e = a.length, f = new b(0 | (e + 1) / 3, c, d), g = 0, h = 0, k = !1, l = !1, m = !1, n = !1, o = !1; e > g;) {
            switch (i = a.charAt(g++)) {
              case '!':
                if (!d) {
                  if (l || m || n) {
                    o = !0;
                    break;
                  }

                  l = m = n = !0;
                }

                f.offset = f.markedOffset = f.limit = h, k = !1;
                break;

              case '|':
                if (!d) {
                  if (l || n) {
                    o = !0;
                    break;
                  }

                  l = n = !0;
                }

                f.offset = f.limit = h, k = !1;
                break;

              case '[':
                if (!d) {
                  if (l || m) {
                    o = !0;
                    break;
                  }

                  l = m = !0;
                }

                f.offset = f.markedOffset = h, k = !1;
                break;

              case '<':
                if (!d) {
                  if (l) {
                    o = !0;
                    break;
                  }

                  l = !0;
                }

                f.offset = h, k = !1;
                break;

              case ']':
                if (!d) {
                  if (n || m) {
                    o = !0;
                    break;
                  }

                  n = m = !0;
                }

                f.limit = f.markedOffset = h, k = !1;
                break;

              case '>':
                if (!d) {
                  if (n) {
                    o = !0;
                    break;
                  }

                  n = !0;
                }

                f.limit = h, k = !1;
                break;

              case "'":
                if (!d) {
                  if (m) {
                    o = !0;
                    break;
                  }

                  m = !0;
                }

                f.markedOffset = h, k = !1;
                break;

              case ' ':
                k = !1;
                break;

              default:
                if (!d && k) {
                  o = !0;
                  break;
                }

                if (j = parseInt(i + a.charAt(g++), 16), !d && (isNaN(j) || j < 0 || j > 255)) throw TypeError('Illegal str: Not a debug encoded string');
                f.view[h++] = j, k = !0;
            }

            if (o) throw TypeError('Illegal str: Invalid symbol at ' + g);
          }

          if (!d) {
            if (!l || !n) throw TypeError('Illegal str: Missing offset or limit');
            if (h < f.buffer.byteLength) throw TypeError('Illegal str: Not a debug encoded string (is it hex?) ' + h + ' < ' + e);
          }

          return f;
        }, c.toHex = function (a, b) {
          if (a = typeof a === 'undefined' ? this.offset : a, b = typeof b === 'undefined' ? this.limit : b, !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal begin: Not an integer');
            if (a >>>= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal end: Not an integer');
            if (b >>>= 0, a < 0 || a > b || b > this.buffer.byteLength) throw RangeError('Illegal range: 0 <= ' + a + ' <= ' + b + ' <= ' + this.buffer.byteLength);
          }

          for (var d, c = new Array(b - a); b > a;) {
            d = this.view[a++], d < 16 ? c.push('0', d.toString(16)) : c.push(d.toString(16));
          }

          return c.join('');
        }, b.fromHex = function (a, c, d) {
          var g, e, f, h, i;

          if (!d) {
            if (typeof a !== 'string') throw TypeError('Illegal str: Not a string');
            if (a.length % 2 !== 0) throw TypeError('Illegal str: Length not a multiple of 2');
          }

          for (e = a.length, f = new b(0 | e / 2, c), h = 0, i = 0; e > h; h += 2) {
            if (g = parseInt(a.substring(h, h + 2), 16), !d && (!isFinite(g) || g < 0 || g > 255)) throw TypeError('Illegal str: Contains non-hex characters');
            f.view[i++] = g;
          }

          return f.limit = i, f;
        }, k = function () {
          var a = {};
          return a.MAX_CODEPOINT = 1114111, a.encodeUTF8 = function (a, b) {
            var c = null;

            for (typeof a === 'number' && (c = a, a = function a() {
              return null;
            }); c !== null || (c = a()) !== null;) {
              c < 128 ? b(127 & c) : c < 2048 ? (b(192 | 31 & c >> 6), b(128 | 63 & c)) : c < 65536 ? (b(224 | 15 & c >> 12), b(128 | 63 & c >> 6), b(128 | 63 & c)) : (b(240 | 7 & c >> 18), b(128 | 63 & c >> 12), b(128 | 63 & c >> 6), b(128 | 63 & c)), c = null;
            }
          }, a.decodeUTF8 = function (a, b) {
            for (var c, d, e, f, g = function g(a) {
              a = a.slice(0, a.indexOf(null));
              var b = Error(a.toString());
              throw b.name = 'TruncatedError', b.bytes = a, b;
            }; (c = a()) !== null;) {
              if ((128 & c) === 0) b(c);else if ((224 & c) === 192) (d = a()) === null && g([c, d]), b((31 & c) << 6 | 63 & d);else if ((240 & c) === 224) ((d = a()) === null || (e = a()) === null) && g([c, d, e]), b((15 & c) << 12 | (63 & d) << 6 | 63 & e);else {
                if ((248 & c) !== 240) throw RangeError('Illegal starting byte: ' + c);
                ((d = a()) === null || (e = a()) === null || (f = a()) === null) && g([c, d, e, f]), b((7 & c) << 18 | (63 & d) << 12 | (63 & e) << 6 | 63 & f);
              }
            }
          }, a.UTF16toUTF8 = function (a, b) {
            for (var c, d = null;;) {
              if ((c = d !== null ? d : a()) === null) break;
              c >= 55296 && c <= 57343 && (d = a()) !== null && d >= 56320 && d <= 57343 ? (b(1024 * (c - 55296) + d - 56320 + 65536), d = null) : b(c);
            }

            d !== null && b(d);
          }, a.UTF8toUTF16 = function (a, b) {
            var c = null;

            for (typeof a === 'number' && (c = a, a = function a() {
              return null;
            }); c !== null || (c = a()) !== null;) {
              c <= 65535 ? b(c) : (c -= 65536, b((c >> 10) + 55296), b(c % 1024 + 56320)), c = null;
            }
          }, a.encodeUTF16toUTF8 = function (b, c) {
            a.UTF16toUTF8(b, function (b) {
              a.encodeUTF8(b, c);
            });
          }, a.decodeUTF8toUTF16 = function (b, c) {
            a.decodeUTF8(b, function (b) {
              a.UTF8toUTF16(b, c);
            });
          }, a.calculateCodePoint = function (a) {
            return a < 128 ? 1 : a < 2048 ? 2 : a < 65536 ? 3 : 4;
          }, a.calculateUTF8 = function (a) {
            for (var b, c = 0; (b = a()) !== null;) {
              c += b < 128 ? 1 : b < 2048 ? 2 : b < 65536 ? 3 : 4;
            }

            return c;
          }, a.calculateUTF16asUTF8 = function (b) {
            var c = 0;
            var d = 0;
            return a.UTF16toUTF8(b, function (a) {
              ++c, d += a < 128 ? 1 : a < 2048 ? 2 : a < 65536 ? 3 : 4;
            }), [c, d];
          }, a;
        }(), c.toUTF8 = function (a, b) {
          if (typeof a === 'undefined' && (a = this.offset), typeof b === 'undefined' && (b = this.limit), !this.noAssert) {
            if (typeof a !== 'number' || a % 1 !== 0) throw TypeError('Illegal begin: Not an integer');
            if (a >>>= 0, typeof b !== 'number' || b % 1 !== 0) throw TypeError('Illegal end: Not an integer');
            if (b >>>= 0, a < 0 || a > b || b > this.buffer.byteLength) throw RangeError('Illegal range: 0 <= ' + a + ' <= ' + b + ' <= ' + this.buffer.byteLength);
          }

          var c;

          try {
            k.decodeUTF8toUTF16(function () {
              return b > a ? this.view[a++] : null;
            }.bind(this), c = g());
          } catch (d) {
            if (a !== b) throw RangeError('Illegal range: Truncated data, ' + a + ' != ' + b);
          }

          return c();
        }, b.fromUTF8 = function (a, c, d) {
          if (!d && typeof a !== 'string') throw TypeError('Illegal str: Not a string');
          var e = new b(k.calculateUTF16asUTF8(f(a), !0)[1], c, d);
          var g = 0;
          return k.encodeUTF16toUTF8(f(a), function (a) {
            e.view[g++] = a;
          }), e.limit = g, e;
        }, b;
      }(c);

      var e = function (b, c) {
        var f;
        var h;
        var e = {};
        return e.ByteBuffer = b, e.c = b, f = b, e.Long = c || null, e.VERSION = '5.0.1', e.WIRE_TYPES = {}, e.WIRE_TYPES.VARINT = 0, e.WIRE_TYPES.BITS64 = 1, e.WIRE_TYPES.LDELIM = 2, e.WIRE_TYPES.STARTGROUP = 3, e.WIRE_TYPES.ENDGROUP = 4, e.WIRE_TYPES.BITS32 = 5, e.PACKABLE_WIRE_TYPES = [e.WIRE_TYPES.VARINT, e.WIRE_TYPES.BITS64, e.WIRE_TYPES.BITS32], e.TYPES = {
          int32: {
            name: 'int32',
            wireType: e.WIRE_TYPES.VARINT,
            defaultValue: 0
          },
          uint32: {
            name: 'uint32',
            wireType: e.WIRE_TYPES.VARINT,
            defaultValue: 0
          },
          sint32: {
            name: 'sint32',
            wireType: e.WIRE_TYPES.VARINT,
            defaultValue: 0
          },
          int64: {
            name: 'int64',
            wireType: e.WIRE_TYPES.VARINT,
            defaultValue: e.Long ? e.Long.ZERO : void 0
          },
          uint64: {
            name: 'uint64',
            wireType: e.WIRE_TYPES.VARINT,
            defaultValue: e.Long ? e.Long.UZERO : void 0
          },
          sint64: {
            name: 'sint64',
            wireType: e.WIRE_TYPES.VARINT,
            defaultValue: e.Long ? e.Long.ZERO : void 0
          },
          bool: {
            name: 'bool',
            wireType: e.WIRE_TYPES.VARINT,
            defaultValue: !1
          },
          double: {
            name: 'double',
            wireType: e.WIRE_TYPES.BITS64,
            defaultValue: 0
          },
          string: {
            name: 'string',
            wireType: e.WIRE_TYPES.LDELIM,
            defaultValue: ''
          },
          bytes: {
            name: 'bytes',
            wireType: e.WIRE_TYPES.LDELIM,
            defaultValue: null
          },
          fixed32: {
            name: 'fixed32',
            wireType: e.WIRE_TYPES.BITS32,
            defaultValue: 0
          },
          sfixed32: {
            name: 'sfixed32',
            wireType: e.WIRE_TYPES.BITS32,
            defaultValue: 0
          },
          fixed64: {
            name: 'fixed64',
            wireType: e.WIRE_TYPES.BITS64,
            defaultValue: e.Long ? e.Long.UZERO : void 0
          },
          sfixed64: {
            name: 'sfixed64',
            wireType: e.WIRE_TYPES.BITS64,
            defaultValue: e.Long ? e.Long.ZERO : void 0
          },
          float: {
            name: 'float',
            wireType: e.WIRE_TYPES.BITS32,
            defaultValue: 0
          },
          enum: {
            name: 'enum',
            wireType: e.WIRE_TYPES.VARINT,
            defaultValue: 0
          },
          message: {
            name: 'message',
            wireType: e.WIRE_TYPES.LDELIM,
            defaultValue: null
          },
          group: {
            name: 'group',
            wireType: e.WIRE_TYPES.STARTGROUP,
            defaultValue: null
          }
        }, e.MAP_KEY_TYPES = [e.TYPES.int32, e.TYPES.sint32, e.TYPES.sfixed32, e.TYPES.uint32, e.TYPES.fixed32, e.TYPES.int64, e.TYPES.sint64, e.TYPES.sfixed64, e.TYPES.uint64, e.TYPES.fixed64, e.TYPES.bool, e.TYPES.string, e.TYPES.bytes], e.ID_MIN = 1, e.ID_MAX = 536870911, e.convertFieldsToCamelCase = !1, e.populateAccessors = !0, e.populateDefaults = !0, e.Util = function () {
          var a = {};
          return a.IS_NODE = !((typeof process === "undefined" ? "undefined" : _typeof(process)) !== 'object' || process + '' != '[object process]' || process.browser), a.XHR = function () {
            var c;
            var a = [function () {
              return new XMLHttpRequest();
            }, function () {
              return new ActiveXObject('Msxml2.XMLHTTP');
            }, function () {
              return new ActiveXObject('Msxml3.XMLHTTP');
            }, function () {
              return new ActiveXObject('Microsoft.XMLHTTP');
            }];
            var b = null;

            for (c = 0; c < a.length; c++) {
              try {
                b = a[c]();
              } catch (d) {
                continue;
              }

              break;
            }

            if (!b) throw Error('XMLHttpRequest is not supported');
            return b;
          }, a.fetch = function (b, c) {
            if (c && typeof c !== 'function' && (c = null), a.IS_NODE) {
              if (c) g.readFile(b, function (a, b) {
                a ? c(null) : c('' + b);
              });else try {
                return g.readFileSync(b);
              } catch (d) {
                return null;
              }
            } else {
              var e = a.XHR();
              if (e.open('GET', b, c ? !0 : !1), e.setRequestHeader('Accept', 'text/plain'), typeof e.overrideMimeType === 'function' && e.overrideMimeType('text/plain'), !c) return e.send(null), e.status == 200 || e.status == 0 && typeof e.responseText === 'string' ? e.responseText : null;
              if (e.onreadystatechange = function () {
                e.readyState == 4 && (e.status == 200 || e.status == 0 && typeof e.responseText === 'string' ? c(e.responseText) : c(null));
              }, e.readyState == 4) return;
              e.send(null);
            }
          }, a.toCamelCase = function (a) {
            return a.replace(/_([a-zA-Z])/g, function (a, b) {
              return b.toUpperCase();
            });
          }, a;
        }(), e.Lang = {
          DELIM: /[\s\{\}=;:\[\],'"\(\)<>]/g,
          RULE: /^(?:required|optional|repeated|map)$/,
          TYPE: /^(?:double|float|int32|uint32|sint32|int64|uint64|sint64|fixed32|sfixed32|fixed64|sfixed64|bool|string|bytes)$/,
          NAME: /^[a-zA-Z_][a-zA-Z_0-9]*$/,
          TYPEDEF: /^[a-zA-Z][a-zA-Z_0-9]*$/,
          TYPEREF: /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,
          FQTYPEREF: /^(?:\.[a-zA-Z][a-zA-Z_0-9]*)+$/,
          NUMBER: /^-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+|([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?)|inf|nan)$/,
          NUMBER_DEC: /^(?:[1-9][0-9]*|0)$/,
          NUMBER_HEX: /^0[xX][0-9a-fA-F]+$/,
          NUMBER_OCT: /^0[0-7]+$/,
          NUMBER_FLT: /^([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?|inf|nan)$/,
          BOOL: /^(?:true|false)$/i,
          ID: /^(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/,
          NEGID: /^\-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/,
          WHITESPACE: /\s/,
          STRING: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")|(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g,
          STRING_DQ: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
          STRING_SQ: /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g
        }, e.DotProto = function (a, b) {
          function h(a, c) {
            var d = -1;
            var e = 1;
            if (a.charAt(0) == '-' && (e = -1, a = a.substring(1)), b.NUMBER_DEC.test(a)) d = parseInt(a);else if (b.NUMBER_HEX.test(a)) d = parseInt(a.substring(2), 16);else {
              if (!b.NUMBER_OCT.test(a)) throw Error('illegal id value: ' + (e < 0 ? '-' : '') + a);
              d = parseInt(a.substring(1), 8);
            }
            if (d = 0 | e * d, !c && d < 0) throw Error('illegal id value: ' + (e < 0 ? '-' : '') + a);
            return d;
          }

          function i(a) {
            var c = 1;
            if (a.charAt(0) == '-' && (c = -1, a = a.substring(1)), b.NUMBER_DEC.test(a)) return c * parseInt(a, 10);
            if (b.NUMBER_HEX.test(a)) return c * parseInt(a.substring(2), 16);
            if (b.NUMBER_OCT.test(a)) return c * parseInt(a.substring(1), 8);
            if (a === 'inf') return 1 / 0 * c;
            if (a === 'nan') return 0 / 0;
            if (b.NUMBER_FLT.test(a)) return c * parseFloat(a);
            throw Error('illegal number value: ' + (c < 0 ? '-' : '') + a);
          }

          function j(a, b, c) {
            typeof a[b] === 'undefined' ? a[b] = c : (Array.isArray(a[b]) || (a[b] = [a[b]]), a[b].push(c));
          }

          var f;
          var g;
          var c = {};

          var d = function d(a) {
            this.source = a + '', this.index = 0, this.line = 1, this.stack = [], this._stringOpen = null;
          };

          var e = d.prototype;
          return e._readString = function () {
            var c;
            var a = this._stringOpen === '"' ? b.STRING_DQ : b.STRING_SQ;
            if (a.lastIndex = this.index - 1, c = a.exec(this.source), !c) throw Error('unterminated string');
            return this.index = a.lastIndex, this.stack.push(this._stringOpen), this._stringOpen = null, c[1];
          }, e.next = function () {
            var a, c, d, e, f, g;
            if (this.stack.length > 0) return this.stack.shift();
            if (this.index >= this.source.length) return null;
            if (this._stringOpen !== null) return this._readString();

            do {
              for (a = !1; b.WHITESPACE.test(d = this.source.charAt(this.index));) {
                if (d === '\n' && ++this.line, ++this.index === this.source.length) return null;
              }

              if (this.source.charAt(this.index) === '/') if (++this.index, this.source.charAt(this.index) === '/') {
                for (; this.source.charAt(++this.index) !== '\n';) {
                  if (this.index == this.source.length) return null;
                }

                ++this.index, ++this.line, a = !0;
              } else {
                if ((d = this.source.charAt(this.index)) !== '*') return '/';

                do {
                  if (d === '\n' && ++this.line, ++this.index === this.source.length) return null;
                  c = d, d = this.source.charAt(this.index);
                } while (c !== '*' || d !== '/');

                ++this.index, a = !0;
              }
            } while (a);

            if (this.index === this.source.length) return null;
            if (e = this.index, b.DELIM.lastIndex = 0, f = b.DELIM.test(this.source.charAt(e++)), !f) for (; e < this.source.length && !b.DELIM.test(this.source.charAt(e));) {
              ++e;
            }
            return g = this.source.substring(this.index, this.index = e), (g === '"' || g === "'") && (this._stringOpen = g), g;
          }, e.peek = function () {
            if (this.stack.length === 0) {
              var a = this.next();
              if (a === null) return null;
              this.stack.push(a);
            }

            return this.stack[0];
          }, e.skip = function (a) {
            var b = this.next();
            if (b !== a) throw Error("illegal '" + b + "', '" + a + "' expected");
          }, e.omit = function (a) {
            return this.peek() === a ? (this.next(), !0) : !1;
          }, e.toString = function () {
            return 'Tokenizer (' + this.index + '/' + this.source.length + ' at line ' + this.line + ')';
          }, c.Tokenizer = d, f = function f(a) {
            this.tn = new d(a), this.proto3 = !1;
          }, g = f.prototype, g.parse = function () {
            var c;
            var a = {
              name: '[ROOT]',
              package: null,
              messages: [],
              enums: [],
              imports: [],
              options: {},
              services: []
            };
            var d = !0;

            try {
              for (; c = this.tn.next();) {
                switch (c) {
                  case 'package':
                    if (!d || a.package !== null) throw Error("unexpected 'package'");
                    if (c = this.tn.next(), !b.TYPEREF.test(c)) throw Error('illegal package name: ' + c);
                    this.tn.skip(';'), a.package = c;
                    break;

                  case 'import':
                    if (!d) throw Error("unexpected 'import'");
                    c = this.tn.peek(), c === 'public' && this.tn.next(), c = this._readString(), this.tn.skip(';'), a.imports.push(c);
                    break;

                  case 'syntax':
                    if (!d) throw Error("unexpected 'syntax'");
                    this.tn.skip('='), (a.syntax = this._readString()) === 'proto3' && (this.proto3 = !0), this.tn.skip(';');
                    break;

                  case 'message':
                    this._parseMessage(a, null), d = !1;
                    break;

                  case 'enum':
                    this._parseEnum(a), d = !1;
                    break;

                  case 'option':
                    this._parseOption(a);

                    break;

                  case 'service':
                    this._parseService(a);

                    break;

                  case 'extend':
                    this._parseExtend(a);

                    break;

                  default:
                    throw Error("unexpected '" + c + "'");
                }
              }
            } catch (e) {
              throw e.message = 'Parse error at line ' + this.tn.line + ': ' + e.message, e;
            }

            return delete a.name, a;
          }, f.parse = function (a) {
            return new f(a).parse();
          }, g._readString = function () {
            var b;
            var c;
            var a = '';

            do {
              if (c = this.tn.next(), c !== "'" && c !== '"') throw Error('illegal string delimiter: ' + c);
              a += this.tn.next(), this.tn.skip(c), b = this.tn.peek();
            } while (b === '"' || b === '"');

            return a;
          }, g._readValue = function (a) {
            var c = this.tn.peek();
            if (c === '"' || c === "'") return this._readString();
            if (this.tn.next(), b.NUMBER.test(c)) return i(c);
            if (b.BOOL.test(c)) return c.toLowerCase() === 'true';
            if (a && b.TYPEREF.test(c)) return c;
            throw Error('illegal value: ' + c);
          }, g._parseOption = function (a, c) {
            var f;
            var d = this.tn.next();
            var e = !1;
            if (d === '(' && (e = !0, d = this.tn.next()), !b.TYPEREF.test(d)) throw Error('illegal option name: ' + d);
            f = d, e && (this.tn.skip(')'), f = '(' + f + ')', d = this.tn.peek(), b.FQTYPEREF.test(d) && (f += d, this.tn.next())), this.tn.skip('='), this._parseOptionValue(a, f), c || this.tn.skip(';');
          }, g._parseOptionValue = function (a, c) {
            var d = this.tn.peek();
            if (d !== '{') j(a.options, c, this._readValue(!0));else for (this.tn.skip('{'); (d = this.tn.next()) !== '}';) {
              if (!b.NAME.test(d)) throw Error('illegal option name: ' + c + '.' + d);
              this.tn.omit(':') ? j(a.options, c + '.' + d, this._readValue(!0)) : this._parseOptionValue(a, c + '.' + d);
            }
          }, g._parseService = function (a) {
            var d;
            var e;
            var c = this.tn.next();
            if (!b.NAME.test(c)) throw Error('illegal service name at line ' + this.tn.line + ': ' + c);

            for (d = c, e = {
              name: d,
              rpc: {},
              options: {}
            }, this.tn.skip('{'); (c = this.tn.next()) !== '}';) {
              if (c === 'option') this._parseOption(e);else {
                if (c !== 'rpc') throw Error('illegal service token: ' + c);

                this._parseServiceRPC(e);
              }
            }

            this.tn.omit(';'), a.services.push(e);
          }, g._parseServiceRPC = function (a) {
            var e;
            var f;
            var c = 'rpc';
            var d = this.tn.next();
            if (!b.NAME.test(d)) throw Error('illegal rpc service method name: ' + d);
            if (e = d, f = {
              request: null,
              response: null,
              request_stream: !1,
              response_stream: !1,
              options: {}
            }, this.tn.skip('('), d = this.tn.next(), d.toLowerCase() === 'stream' && (f.request_stream = !0, d = this.tn.next()), !b.TYPEREF.test(d)) throw Error('illegal rpc service request type: ' + d);
            if (f.request = d, this.tn.skip(')'), d = this.tn.next(), d.toLowerCase() !== 'returns') throw Error('illegal rpc service request type delimiter: ' + d);

            if (this.tn.skip('('), d = this.tn.next(), d.toLowerCase() === 'stream' && (f.response_stream = !0, d = this.tn.next()), f.response = d, this.tn.skip(')'), d = this.tn.peek(), d === '{') {
              for (this.tn.next(); (d = this.tn.next()) !== '}';) {
                if (d !== 'option') throw Error('illegal rpc service token: ' + d);

                this._parseOption(f);
              }

              this.tn.omit(';');
            } else this.tn.skip(';');

            typeof a[c] === 'undefined' && (a[c] = {}), a[c][e] = f;
          }, g._parseMessage = function (a, c) {
            var d = !!c;
            var e = this.tn.next();
            var f = {
              name: '',
              fields: [],
              enums: [],
              messages: [],
              options: {},
              services: [],
              oneofs: {}
            };
            if (!b.NAME.test(e)) throw Error('illegal ' + (d ? 'group' : 'message') + ' name: ' + e);

            for (f.name = e, d && (this.tn.skip('='), c.id = h(this.tn.next()), f.isGroup = !0), e = this.tn.peek(), e === '[' && c && this._parseFieldOptions(c), this.tn.skip('{'); (e = this.tn.next()) !== '}';) {
              if (b.RULE.test(e)) this._parseMessageField(f, e);else if (e === 'oneof') this._parseMessageOneOf(f);else if (e === 'enum') this._parseEnum(f);else if (e === 'message') this._parseMessage(f);else if (e === 'option') this._parseOption(f);else if (e === 'service') this._parseService(f);else if (e === 'extensions') f.extensions = this._parseExtensionRanges();else if (e === 'reserved') this._parseIgnored();else if (e === 'extend') this._parseExtend(f);else {
                if (!b.TYPEREF.test(e)) throw Error('illegal message token: ' + e);
                if (!this.proto3) throw Error('illegal field rule: ' + e);

                this._parseMessageField(f, 'optional', e);
              }
            }

            return this.tn.omit(';'), a.messages.push(f), f;
          }, g._parseIgnored = function () {
            for (; this.tn.peek() !== ';';) {
              this.tn.next();
            }

            this.tn.skip(';');
          }, g._parseMessageField = function (a, c, d) {
            var e, f, g;
            if (!b.RULE.test(c)) throw Error('illegal message field rule: ' + c);

            if (e = {
              rule: c,
              type: '',
              name: '',
              options: {},
              id: 0
            }, c === 'map') {
              if (d) throw Error('illegal type: ' + d);
              if (this.tn.skip('<'), f = this.tn.next(), !b.TYPE.test(f) && !b.TYPEREF.test(f)) throw Error('illegal message field type: ' + f);
              if (e.keytype = f, this.tn.skip(','), f = this.tn.next(), !b.TYPE.test(f) && !b.TYPEREF.test(f)) throw Error('illegal message field: ' + f);
              if (e.type = f, this.tn.skip('>'), f = this.tn.next(), !b.NAME.test(f)) throw Error('illegal message field name: ' + f);
              e.name = f, this.tn.skip('='), e.id = h(this.tn.next()), f = this.tn.peek(), f === '[' && this._parseFieldOptions(e), this.tn.skip(';');
            } else if (d = typeof d !== 'undefined' ? d : this.tn.next(), d === 'group') {
              if (g = this._parseMessage(a, e), !/^[A-Z]/.test(g.name)) throw Error('illegal group name: ' + g.name);
              e.type = g.name, e.name = g.name.toLowerCase(), this.tn.omit(';');
            } else {
              if (!b.TYPE.test(d) && !b.TYPEREF.test(d)) throw Error('illegal message field type: ' + d);
              if (e.type = d, f = this.tn.next(), !b.NAME.test(f)) throw Error('illegal message field name: ' + f);
              e.name = f, this.tn.skip('='), e.id = h(this.tn.next()), f = this.tn.peek(), f === '[' && this._parseFieldOptions(e), this.tn.skip(';');
            }

            return a.fields.push(e), e;
          }, g._parseMessageOneOf = function (a) {
            var e;
            var d;
            var f;
            var c = this.tn.next();
            if (!b.NAME.test(c)) throw Error('illegal oneof name: ' + c);

            for (d = c, f = [], this.tn.skip('{'); (c = this.tn.next()) !== '}';) {
              e = this._parseMessageField(a, 'optional', c), e.oneof = d, f.push(e.id);
            }

            this.tn.omit(';'), a.oneofs[d] = f;
          }, g._parseFieldOptions = function (a) {
            this.tn.skip('[');

            for (var c = !0; (this.tn.peek()) !== ']';) {
              c || this.tn.skip(','), this._parseOption(a, !0), c = !1;
            }

            this.tn.next();
          }, g._parseEnum = function (a) {
            var e;
            var c = {
              name: '',
              values: [],
              options: {}
            };
            var d = this.tn.next();
            if (!b.NAME.test(d)) throw Error('illegal name: ' + d);

            for (c.name = d, this.tn.skip('{'); (d = this.tn.next()) !== '}';) {
              if (d === 'option') this._parseOption(c);else {
                if (!b.NAME.test(d)) throw Error('illegal name: ' + d);
                this.tn.skip('='), e = {
                  name: d,
                  id: h(this.tn.next(), !0)
                }, d = this.tn.peek(), d === '[' && this._parseFieldOptions({
                  options: {}
                }), this.tn.skip(';'), c.values.push(e);
              }
            }

            this.tn.omit(';'), a.enums.push(c);
          }, g._parseExtensionRanges = function () {
            var c;
            var d;
            var e;
            var b = [];

            do {
              for (d = [];;) {
                switch (c = this.tn.next()) {
                  case 'min':
                    e = a.ID_MIN;
                    break;

                  case 'max':
                    e = a.ID_MAX;
                    break;

                  default:
                    e = i(c);
                }

                if (d.push(e), d.length === 2) break;

                if (this.tn.peek() !== 'to') {
                  d.push(e);
                  break;
                }

                this.tn.next();
              }

              b.push(d);
            } while (this.tn.omit(','));

            return this.tn.skip(';'), b;
          }, g._parseExtend = function (a) {
            var d;
            var c = this.tn.next();
            if (!b.TYPEREF.test(c)) throw Error('illegal extend reference: ' + c);

            for (d = {
              ref: c,
              fields: []
            }, this.tn.skip('{'); (c = this.tn.next()) !== '}';) {
              if (b.RULE.test(c)) this._parseMessageField(d, c);else {
                if (!b.TYPEREF.test(c)) throw Error('illegal extend token: ' + c);
                if (!this.proto3) throw Error('illegal field rule: ' + c);

                this._parseMessageField(d, 'optional', c);
              }
            }

            return this.tn.omit(';'), a.messages.push(d), d;
          }, g.toString = function () {
            return 'Parser at line ' + this.tn.line;
          }, c.Parser = f, c;
        }(e, e.Lang), e.Reflect = function (a) {
          function k(b) {
            if (typeof b === 'string' && (b = a.TYPES[b]), typeof b.defaultValue === 'undefined') throw Error('default value for type ' + b.name + ' is not supported');
            return b == a.TYPES.bytes ? new f(0) : b.defaultValue;
          }

          function l(b, c) {
            if (b && typeof b.low === 'number' && typeof b.high === 'number' && typeof b.unsigned === 'boolean' && b.low === b.low && b.high === b.high) return new a.Long(b.low, b.high, typeof c === 'undefined' ? b.unsigned : c);
            if (typeof b === 'string') return a.Long.fromString(b, c || !1, 10);
            if (typeof b === 'number') return a.Long.fromNumber(b, c || !1);
            throw Error('not convertible to Long');
          }

          function o(b, c) {
            var d = c.readVarint32();
            var e = 7 & d;
            var f = d >>> 3;

            switch (e) {
              case a.WIRE_TYPES.VARINT:
                do {
                  d = c.readUint8();
                } while ((128 & d) === 128);

                break;

              case a.WIRE_TYPES.BITS64:
                c.offset += 8;
                break;

              case a.WIRE_TYPES.LDELIM:
                d = c.readVarint32(), c.offset += d;
                break;

              case a.WIRE_TYPES.STARTGROUP:
                o(f, c);
                break;

              case a.WIRE_TYPES.ENDGROUP:
                if (f === b) return !1;
                throw Error('Illegal GROUPEND after unknown group: ' + f + ' (' + b + ' expected)');

              case a.WIRE_TYPES.BITS32:
                c.offset += 4;
                break;

              default:
                throw Error('Illegal wire type in unknown group ' + b + ': ' + e);
            }

            return !0;
          }

          var g;
          var h;
          var i;
          var j;
          var m;
          var n;
          var p;
          var q;
          var r;
          var s;
          var t;
          var u;
          var v;
          var w;
          var x;
          var y;
          var z;
          var A;
          var B;
          var c = {};

          var d = function d(a, b, c) {
            this.builder = a, this.parent = b, this.name = c, this.className;
          };

          var e = d.prototype;
          return e.fqn = function () {
            for (var a = this.name, b = this;;) {
              if (b = b.parent, b == null) break;
              a = b.name + '.' + a;
            }

            return a;
          }, e.toString = function (a) {
            return (a ? this.className + ' ' : '') + this.fqn();
          }, e.build = function () {
            throw Error(this.toString(!0) + ' cannot be built directly');
          }, c.T = d, g = function g(a, b, c, e, f) {
            d.call(this, a, b, c), this.className = 'Namespace', this.children = [], this.options = e || {}, this.syntax = f || 'proto2';
          }, h = g.prototype = Object.create(d.prototype), h.getChildren = function (a) {
            var b, c, d;
            if (a = a || null, a == null) return this.children.slice();

            for (b = [], c = 0, d = this.children.length; d > c; ++c) {
              this.children[c] instanceof a && b.push(this.children[c]);
            }

            return b;
          }, h.addChild = function (a) {
            var b;
            if (b = this.getChild(a.name)) if (b instanceof m.Field && b.name !== b.originalName && this.getChild(b.originalName) === null) b.name = b.originalName;else {
              if (!(a instanceof m.Field && a.name !== a.originalName && this.getChild(a.originalName) === null)) throw Error('Duplicate name in namespace ' + this.toString(!0) + ': ' + a.name);
              a.name = a.originalName;
            }
            this.children.push(a);
          }, h.getChild = function (a) {
            var c;
            var d;
            var b = typeof a === 'number' ? 'id' : 'name';

            for (c = 0, d = this.children.length; d > c; ++c) {
              if (this.children[c][b] === a) return this.children[c];
            }

            return null;
          }, h.resolve = function (a, b) {
            var g;
            var d = typeof a === 'string' ? a.split('.') : a;
            var e = this;
            var f = 0;

            if (d[f] === '') {
              for (; e.parent !== null;) {
                e = e.parent;
              }

              f++;
            }

            do {
              do {
                if (!(e instanceof c.Namespace)) {
                  e = null;
                  break;
                }

                if (g = e.getChild(d[f]), !(g && g instanceof c.T && (!b || g instanceof c.Namespace))) {
                  e = null;
                  break;
                }

                e = g, f++;
              } while (f < d.length);

              if (e != null) break;
              if (this.parent !== null) return this.parent.resolve(a, b);
            } while (e != null);

            return e;
          }, h.qn = function (a) {
            var e;
            var f;
            var b = [];
            var d = a;

            do {
              b.unshift(d.name), d = d.parent;
            } while (d !== null);

            for (e = 1; e <= b.length; e++) {
              if (f = b.slice(b.length - e), a === this.resolve(f, a instanceof c.Namespace)) return f.join('.');
            }

            return a.fqn();
          }, h.build = function () {
            var e;
            var c;
            var d;
            var a = {};
            var b = this.children;

            for (c = 0, d = b.length; d > c; ++c) {
              e = b[c], e instanceof g && (a[e.name] = e.build());
            }

            return Object.defineProperty && Object.defineProperty(a, '$options', {
              value: this.buildOpt()
            }), a;
          }, h.buildOpt = function () {
            var c;
            var d;
            var e;
            var f;
            var a = {};
            var b = Object.keys(this.options);

            for (c = 0, d = b.length; d > c; ++c) {
              e = b[c], f = this.options[b[c]], a[e] = f;
            }

            return a;
          }, h.getOption = function (a) {
            return typeof a === 'undefined' ? this.options : typeof this.options[a] !== 'undefined' ? this.options[a] : null;
          }, c.Namespace = g, i = function i(b, c, d, e) {
            if (this.type = b, this.resolvedType = c, this.isMapKey = d, this.syntax = e, d && a.MAP_KEY_TYPES.indexOf(b) < 0) throw Error('Invalid map key type: ' + b.name);
          }, j = i.prototype, i.defaultFieldValue = k, j.verifyValue = function (c) {
            var f;
            var g;
            var h;

            var d = function (a, b) {
              throw Error('Illegal value for ' + this.toString(!0) + ' of type ' + this.type.name + ': ' + a + ' (' + b + ')');
            }.bind(this);

            switch (this.type) {
              case a.TYPES.int32:
              case a.TYPES.sint32:
              case a.TYPES.sfixed32:
                return (typeof c !== 'number' || c === c && c % 1 !== 0) && d(_typeof(c), 'not an integer'), c > 4294967295 ? 0 | c : c;

              case a.TYPES.uint32:
              case a.TYPES.fixed32:
                return (typeof c !== 'number' || c === c && c % 1 !== 0) && d(_typeof(c), 'not an integer'), c < 0 ? c >>> 0 : c;

              case a.TYPES.int64:
              case a.TYPES.sint64:
              case a.TYPES.sfixed64:
                if (a.Long) try {
                  return l(c, !1);
                } catch (e) {
                  d(_typeof(c), e.message);
                } else d(_typeof(c), 'requires Long.js');

              case a.TYPES.uint64:
              case a.TYPES.fixed64:
                if (a.Long) try {
                  return l(c, !0);
                } catch (e) {
                  d(_typeof(c), e.message);
                } else d(_typeof(c), 'requires Long.js');

              case a.TYPES.bool:
                return typeof c !== 'boolean' && d(_typeof(c), 'not a boolean'), c;

              case a.TYPES.float:
              case a.TYPES.double:
                return typeof c !== 'number' && d(_typeof(c), 'not a number'), c;

              case a.TYPES.string:
                return typeof c === 'string' || c && c instanceof String || d(_typeof(c), 'not a string'), '' + c;

              case a.TYPES.bytes:
                return b.isByteBuffer(c) ? c : b.wrap(c);

              case a.TYPES.enum:
                for (f = this.resolvedType.getChildren(a.Reflect.Enum.Value), h = 0; h < f.length; h++) {
                  if (f[h].name == c) return f[h].id;
                  if (f[h].id == c) return f[h].id;
                }

                if (this.syntax === 'proto3') return (typeof c !== 'number' || c === c && c % 1 !== 0) && d(_typeof(c), 'not an integer'), (c > 4294967295 || c < 0) && d(_typeof(c), 'not in range for uint32'), c;
                d(c, 'not a valid enum value');

              case a.TYPES.group:
              case a.TYPES.message:
                if (c && _typeof(c) === 'object' || d(_typeof(c), 'object expected'), c instanceof this.resolvedType.clazz) return c;

                if (c instanceof a.Builder.Message) {
                  g = {};

                  for (h in c) {
                    c.hasOwnProperty(h) && (g[h] = c[h]);
                  }

                  c = g;
                }

                return new this.resolvedType.clazz(c);
            }

            throw Error('[INTERNAL] Illegal value for ' + this.toString(!0) + ': ' + c + ' (undefined type ' + this.type + ')');
          }, j.calculateLength = function (b, c) {
            if (c === null) return 0;
            var d;

            switch (this.type) {
              case a.TYPES.int32:
                return c < 0 ? f.calculateVarint64(c) : f.calculateVarint32(c);

              case a.TYPES.uint32:
                return f.calculateVarint32(c);

              case a.TYPES.sint32:
                return f.calculateVarint32(f.zigZagEncode32(c));

              case a.TYPES.fixed32:
              case a.TYPES.sfixed32:
              case a.TYPES.float:
                return 4;

              case a.TYPES.int64:
              case a.TYPES.uint64:
                return f.calculateVarint64(c);

              case a.TYPES.sint64:
                return f.calculateVarint64(f.zigZagEncode64(c));

              case a.TYPES.fixed64:
              case a.TYPES.sfixed64:
                return 8;

              case a.TYPES.bool:
                return 1;

              case a.TYPES.enum:
                return f.calculateVarint32(c);

              case a.TYPES.double:
                return 8;

              case a.TYPES.string:
                return d = f.calculateUTF8Bytes(c), f.calculateVarint32(d) + d;

              case a.TYPES.bytes:
                if (c.remaining() < 0) throw Error('Illegal value for ' + this.toString(!0) + ': ' + c.remaining() + ' bytes remaining');
                return f.calculateVarint32(c.remaining()) + c.remaining();

              case a.TYPES.message:
                return d = this.resolvedType.calculate(c), f.calculateVarint32(d) + d;

              case a.TYPES.group:
                return d = this.resolvedType.calculate(c), d + f.calculateVarint32(b << 3 | a.WIRE_TYPES.ENDGROUP);
            }

            throw Error('[INTERNAL] Illegal value to encode in ' + this.toString(!0) + ': ' + c + ' (unknown type)');
          }, j.encodeValue = function (b, c, d) {
            var e, g;
            if (c === null) return d;

            switch (this.type) {
              case a.TYPES.int32:
                c < 0 ? d.writeVarint64(c) : d.writeVarint32(c);
                break;

              case a.TYPES.uint32:
                d.writeVarint32(c);
                break;

              case a.TYPES.sint32:
                d.writeVarint32ZigZag(c);
                break;

              case a.TYPES.fixed32:
                d.writeUint32(c);
                break;

              case a.TYPES.sfixed32:
                d.writeInt32(c);
                break;

              case a.TYPES.int64:
              case a.TYPES.uint64:
                d.writeVarint64(c);
                break;

              case a.TYPES.sint64:
                d.writeVarint64ZigZag(c);
                break;

              case a.TYPES.fixed64:
                d.writeUint64(c);
                break;

              case a.TYPES.sfixed64:
                d.writeInt64(c);
                break;

              case a.TYPES.bool:
                typeof c === 'string' ? d.writeVarint32(c.toLowerCase() === 'false' ? 0 : !!c) : d.writeVarint32(c ? 1 : 0);
                break;

              case a.TYPES.enum:
                d.writeVarint32(c);
                break;

              case a.TYPES.float:
                d.writeFloat32(c);
                break;

              case a.TYPES.double:
                d.writeFloat64(c);
                break;

              case a.TYPES.string:
                d.writeVString(c);
                break;

              case a.TYPES.bytes:
                if (c.remaining() < 0) throw Error('Illegal value for ' + this.toString(!0) + ': ' + c.remaining() + ' bytes remaining');
                e = c.offset, d.writeVarint32(c.remaining()), d.append(c), c.offset = e;
                break;

              case a.TYPES.message:
                g = new f().LE(), this.resolvedType.encode(c, g), d.writeVarint32(g.offset), d.append(g.flip());
                break;

              case a.TYPES.group:
                this.resolvedType.encode(c, d), d.writeVarint32(b << 3 | a.WIRE_TYPES.ENDGROUP);
                break;

              default:
                throw Error('[INTERNAL] Illegal value to encode in ' + this.toString(!0) + ': ' + c + ' (unknown type)');
            }

            return d;
          }, j.decode = function (b, c, d) {
            if (c != this.type.wireType) throw Error('Unexpected wire type for element');
            var e, f;

            switch (this.type) {
              case a.TYPES.int32:
                return 0 | b.readVarint32();

              case a.TYPES.uint32:
                return b.readVarint32() >>> 0;

              case a.TYPES.sint32:
                return 0 | b.readVarint32ZigZag();

              case a.TYPES.fixed32:
                return b.readUint32() >>> 0;

              case a.TYPES.sfixed32:
                return 0 | b.readInt32();

              case a.TYPES.int64:
                return b.readVarint64();

              case a.TYPES.uint64:
                return b.readVarint64().toUnsigned();

              case a.TYPES.sint64:
                return b.readVarint64ZigZag();

              case a.TYPES.fixed64:
                return b.readUint64();

              case a.TYPES.sfixed64:
                return b.readInt64();

              case a.TYPES.bool:
                return !!b.readVarint32();

              case a.TYPES.enum:
                return b.readVarint32();

              case a.TYPES.float:
                return b.readFloat();

              case a.TYPES.double:
                return b.readDouble();

              case a.TYPES.string:
                return b.readVString();

              case a.TYPES.bytes:
                if (f = b.readVarint32(), b.remaining() < f) throw Error('Illegal number of bytes for ' + this.toString(!0) + ': ' + f + ' required but got only ' + b.remaining());
                return e = b.clone(), e.limit = e.offset + f, b.offset += f, e;

              case a.TYPES.message:
                return f = b.readVarint32(), this.resolvedType.decode(b, f);

              case a.TYPES.group:
                return this.resolvedType.decode(b, -1, d);
            }

            throw Error('[INTERNAL] Illegal decode type');
          }, j.valueFromString = function (b) {
            if (!this.isMapKey) throw Error('valueFromString() called on non-map-key element');

            switch (this.type) {
              case a.TYPES.int32:
              case a.TYPES.sint32:
              case a.TYPES.sfixed32:
              case a.TYPES.uint32:
              case a.TYPES.fixed32:
                return this.verifyValue(parseInt(b));

              case a.TYPES.int64:
              case a.TYPES.sint64:
              case a.TYPES.sfixed64:
              case a.TYPES.uint64:
              case a.TYPES.fixed64:
                return this.verifyValue(b);

              case a.TYPES.bool:
                return b === 'true';

              case a.TYPES.string:
                return this.verifyValue(b);

              case a.TYPES.bytes:
                return f.fromBinary(b);
            }
          }, j.valueToString = function (b) {
            if (!this.isMapKey) throw Error('valueToString() called on non-map-key element');
            return this.type === a.TYPES.bytes ? b.toString('binary') : b.toString();
          }, c.Element = i, m = function m(a, b, c, d, e, f) {
            g.call(this, a, b, c, d, f), this.className = 'Message', this.extensions = void 0, this.clazz = null, this.isGroup = !!e, this._fields = null, this._fieldsById = null, this._fieldsByName = null;
          }, n = m.prototype = Object.create(g.prototype), n.build = function (c) {
            var d, h, e, g;
            if (this.clazz && !c) return this.clazz;

            for (d = function (a, c) {
              function k(b, c, d, e) {
                var g, h, i, j, l, m, n;
                if (b === null || _typeof(b) !== 'object') return e && e instanceof a.Reflect.Enum && (g = a.Reflect.Enum.getName(e.object, b), g !== null) ? g : b;
                if (f.isByteBuffer(b)) return c ? b.toBase64() : b.toBuffer();
                if (a.Long.isLong(b)) return d ? b.toString() : a.Long.fromValue(b);
                if (Array.isArray(b)) return h = [], b.forEach(function (a, b) {
                  h[b] = k(a, c, d, e);
                }), h;

                if (h = {}, b instanceof a.Map) {
                  for (i = b.entries(), j = i.next(); !j.done; j = i.next()) {
                    h[b.keyElem.valueToString(j.value[0])] = k(j.value[1], c, d, b.valueElem.resolvedType);
                  }

                  return h;
                }

                l = b.$type, m = void 0;

                for (n in b) {
                  b.hasOwnProperty(n) && (h[n] = l && (m = l.getChild(n)) ? k(b[n], c, d, m.resolvedType) : k(b[n], c, d));
                }

                return h;
              }

              var i;
              var j;
              var d = c.getChildren(a.Reflect.Message.Field);
              var e = c.getChildren(a.Reflect.Message.OneOf);

              var g = function g(b) {
                var i, j, k, l;

                for (a.Builder.Message.call(this), i = 0, j = e.length; j > i; ++i) {
                  this[e[i].name] = null;
                }

                for (i = 0, j = d.length; j > i; ++i) {
                  k = d[i], this[k.name] = k.repeated ? [] : k.map ? new a.Map(k) : null, !k.required && c.syntax !== 'proto3' || k.defaultValue === null || (this[k.name] = k.defaultValue);
                }

                if (arguments.length > 0) if (arguments.length !== 1 || b === null || _typeof(b) !== 'object' || !(typeof b.encode !== 'function' || b instanceof g) || Array.isArray(b) || b instanceof a.Map || f.isByteBuffer(b) || b instanceof ArrayBuffer || a.Long && b instanceof a.Long) for (i = 0, j = arguments.length; j > i; ++i) {
                  typeof (l = arguments[i]) !== 'undefined' && this.$set(d[i].name, l);
                } else this.$set(b);
              };

              var h = g.prototype = Object.create(a.Builder.Message.prototype);

              for (h.add = function (b, d, e) {
                var f = c._fieldsByName[b];

                if (!e) {
                  if (!f) throw Error(this + '#' + b + ' is undefined');
                  if (!(f instanceof a.Reflect.Message.Field)) throw Error(this + '#' + b + ' is not a field: ' + f.toString(!0));
                  if (!f.repeated) throw Error(this + '#' + b + ' is not a repeated field');
                  d = f.verifyValue(d, !0);
                }

                return this[b] === null && (this[b] = []), this[b].push(d), this;
              }, h.$add = h.add, h.set = function (b, d, e) {
                var f, g, h;

                if (b && _typeof(b) === 'object') {
                  e = d;

                  for (f in b) {
                    b.hasOwnProperty(f) && typeof (d = b[f]) !== 'undefined' && this.$set(f, d, e);
                  }

                  return this;
                }

                if (g = c._fieldsByName[b], e) this[b] = d;else {
                  if (!g) throw Error(this + '#' + b + ' is not a field: undefined');
                  if (!(g instanceof a.Reflect.Message.Field)) throw Error(this + '#' + b + ' is not a field: ' + g.toString(!0));
                  this[g.name] = d = g.verifyValue(d);
                }
                return g && g.oneof && (h = this[g.oneof.name], d !== null ? (h !== null && h !== g.name && (this[h] = null), this[g.oneof.name] = g.name) : h === b && (this[g.oneof.name] = null)), this;
              }, h.$set = h.set, h.get = function (b, d) {
                if (d) return this[b];
                var e = c._fieldsByName[b];
                if (!(e && e instanceof a.Reflect.Message.Field)) throw Error(this + '#' + b + ' is not a field: undefined');
                if (!(e instanceof a.Reflect.Message.Field)) throw Error(this + '#' + b + ' is not a field: ' + e.toString(!0));
                return this[e.name];
              }, h.$get = h.get, i = 0; i < d.length; i++) {
                j = d[i], j instanceof a.Reflect.Message.ExtensionField || c.builder.options.populateAccessors && function (a) {
                  var d;
                  var e;
                  var f;
                  var b = a.originalName.replace(/(_[a-zA-Z])/g, function (a) {
                    return a.toUpperCase().replace('_', '');
                  });
                  b = b.substring(0, 1).toUpperCase() + b.substring(1), d = a.originalName.replace(/([A-Z])/g, function (a) {
                    return '_' + a;
                  }), e = function e(b, c) {
                    return this[a.name] = c ? b : a.verifyValue(b), this;
                  }, f = function f() {
                    return this[a.name];
                  }, c.getChild('set' + b) === null && (h['set' + b] = e), c.getChild('set_' + d) === null && (h['set_' + d] = e), c.getChild('get' + b) === null && (h['get' + b] = f), c.getChild('get_' + d) === null && (h['get_' + d] = f);
                }(j);
              }

              return h.encode = function (a, d) {
                var e, f;
                typeof a === 'boolean' && (d = a, a = void 0), e = !1, a || (a = new b(), e = !0), f = a.littleEndian;

                try {
                  return c.encode(this, a.LE(), d), (e ? a.flip() : a).LE(f);
                } catch (g) {
                  throw a.LE(f), g;
                }
              }, g.encode = function (a, b, c) {
                return new g(a).encode(b, c);
              }, h.calculate = function () {
                return c.calculate(this);
              }, h.encodeDelimited = function (a) {
                var d;
                var b = !1;
                return a || (a = new f(), b = !0), d = new f().LE(), c.encode(this, d).flip(), a.writeVarint32(d.remaining()), a.append(d), b ? a.flip() : a;
              }, h.encodeAB = function () {
                try {
                  return this.encode().toArrayBuffer();
                } catch (a) {
                  throw a.encoded && (a.encoded = a.encoded.toArrayBuffer()), a;
                }
              }, h.toArrayBuffer = h.encodeAB, h.encodeNB = function () {
                try {
                  return this.encode().toBuffer();
                } catch (a) {
                  throw a.encoded && (a.encoded = a.encoded.toBuffer()), a;
                }
              }, h.toBuffer = h.encodeNB, h.encode64 = function () {
                try {
                  return this.encode().toBase64();
                } catch (a) {
                  throw a.encoded && (a.encoded = a.encoded.toBase64()), a;
                }
              }, h.toBase64 = h.encode64, h.encodeHex = function () {
                try {
                  return this.encode().toHex();
                } catch (a) {
                  throw a.encoded && (a.encoded = a.encoded.toHex()), a;
                }
              }, h.toHex = h.encodeHex, h.toRaw = function (a, b) {
                return k(this, !!a, !!b, this.$type);
              }, h.encodeJSON = function () {
                return JSON.stringify(k(this, !0, !0, this.$type));
              }, g.decode = function (a, b) {
                var d, e;
                typeof a === 'string' && (a = f.wrap(a, b || 'base64')), a = f.isByteBuffer(a) ? a : f.wrap(a), d = a.littleEndian;

                try {
                  return e = c.decode(a.LE()), a.LE(d), e;
                } catch (g) {
                  throw a.LE(d), g;
                }
              }, g.decodeDelimited = function (a, b) {
                var d, e, g;
                if (typeof a === 'string' && (a = f.wrap(a, b || 'base64')), a = f.isByteBuffer(a) ? a : f.wrap(a), a.remaining() < 1) return null;
                if (d = a.offset, e = a.readVarint32(), a.remaining() < e) return a.offset = d, null;

                try {
                  return g = c.decode(a.slice(a.offset, a.offset + e).LE()), a.offset += e, g;
                } catch (h) {
                  throw a.offset += e, h;
                }
              }, g.decode64 = function (a) {
                return g.decode(a, 'base64');
              }, g.decodeHex = function (a) {
                return g.decode(a, 'hex');
              }, g.decodeJSON = function (a) {
                return new g(JSON.parse(a));
              }, h.toString = function () {
                return c.toString();
              }, Object.defineProperty && (Object.defineProperty(g, '$options', {
                value: c.buildOpt()
              }), Object.defineProperty(h, '$options', {
                value: g.$options
              }), Object.defineProperty(g, '$type', {
                value: c
              }), Object.defineProperty(h, '$type', {
                value: c
              })), g;
            }(a, this), this._fields = [], this._fieldsById = {}, this._fieldsByName = {}, e = 0, g = this.children.length; g > e; e++) {
              if (h = this.children[e], h instanceof t || h instanceof m || h instanceof x) {
                if (d.hasOwnProperty(h.name)) throw Error('Illegal reflect child of ' + this.toString(!0) + ': ' + h.toString(!0) + " cannot override static property '" + h.name + "'");
                d[h.name] = h.build();
              } else if (h instanceof m.Field) h.build(), this._fields.push(h), this._fieldsById[h.id] = h, this._fieldsByName[h.name] = h;else if (!(h instanceof m.OneOf || h instanceof w)) throw Error('Illegal reflect child of ' + this.toString(!0) + ': ' + this.children[e].toString(!0));
            }

            return this.clazz = d;
          }, n.encode = function (a, b, c) {
            var e;
            var h;
            var f;
            var g;
            var i;
            var d = null;

            for (f = 0, g = this._fields.length; g > f; ++f) {
              e = this._fields[f], h = a[e.name], e.required && h === null ? d === null && (d = e) : e.encode(c ? h : e.verifyValue(h), b, a);
            }

            if (d !== null) throw i = Error('Missing at least one required field for ' + this.toString(!0) + ': ' + d), i.encoded = b, i;
            return b;
          }, n.calculate = function (a) {
            for (var e, f, b = 0, c = 0, d = this._fields.length; d > c; ++c) {
              if (e = this._fields[c], f = a[e.name], e.required && f === null) throw Error('Missing at least one required field for ' + this.toString(!0) + ': ' + e);
              b += e.calculate(f, a);
            }

            return b;
          }, n.decode = function (b, c, d) {
            var g, h, i, j, e, f, k, l, m, n, p, q;

            for (c = typeof c === 'number' ? c : -1, e = b.offset, f = new this.clazz(); b.offset < e + c || c === -1 && b.remaining() > 0;) {
              if (g = b.readVarint32(), h = 7 & g, i = g >>> 3, h === a.WIRE_TYPES.ENDGROUP) {
                if (i !== d) throw Error('Illegal group end indicator for ' + this.toString(!0) + ': ' + i + ' (' + (d ? d + ' expected' : 'not a group') + ')');
                break;
              }

              if (j = this._fieldsById[i]) j.repeated && !j.options.packed ? f[j.name].push(j.decode(h, b)) : j.map ? (l = j.decode(h, b), f[j.name].set(l[0], l[1])) : (f[j.name] = j.decode(h, b), j.oneof && (m = f[j.oneof.name], m !== null && m !== j.name && (f[m] = null), f[j.oneof.name] = j.name));else switch (h) {
                case a.WIRE_TYPES.VARINT:
                  b.readVarint32();
                  break;

                case a.WIRE_TYPES.BITS32:
                  b.offset += 4;
                  break;

                case a.WIRE_TYPES.BITS64:
                  b.offset += 8;
                  break;

                case a.WIRE_TYPES.LDELIM:
                  k = b.readVarint32(), b.offset += k;
                  break;

                case a.WIRE_TYPES.STARTGROUP:
                  for (; o(i, b);) {
                  }

                  break;

                default:
                  throw Error('Illegal wire type for unknown field ' + i + ' in ' + this.toString(!0) + '#decode: ' + h);
              }
            }

            for (n = 0, p = this._fields.length; p > n; ++n) {
              if (j = this._fields[n], f[j.name] === null) if (this.syntax === 'proto3') f[j.name] = j.defaultValue;else {
                if (j.required) throw q = Error('Missing at least one required field for ' + this.toString(!0) + ': ' + j.name), q.decoded = f, q;
                a.populateDefaults && j.defaultValue !== null && (f[j.name] = j.defaultValue);
              }
            }

            return f;
          }, c.Message = m, p = function p(b, c, e, f, g, h, i, j, k, l) {
            d.call(this, b, c, h), this.className = 'Message.Field', this.required = e === 'required', this.repeated = e === 'repeated', this.map = e === 'map', this.keyType = f || null, this.type = g, this.resolvedType = null, this.id = i, this.options = j || {}, this.defaultValue = null, this.oneof = k || null, this.syntax = l || 'proto2', this.originalName = this.name, this.element = null, this.keyElement = null, !this.builder.options.convertFieldsToCamelCase || this instanceof m.ExtensionField || (this.name = a.Util.toCamelCase(this.name));
          }, q = p.prototype = Object.create(d.prototype), q.build = function () {
            this.element = new i(this.type, this.resolvedType, !1, this.syntax), this.map && (this.keyElement = new i(this.keyType, void 0, !0, this.syntax)), this.syntax !== 'proto3' || this.repeated || this.map ? typeof this.options.default !== 'undefined' && (this.defaultValue = this.verifyValue(this.options.default)) : this.defaultValue = i.defaultFieldValue(this.type);
          }, q.verifyValue = function (b, c) {
            var d, e, f;
            if (c = c || !1, d = function (a, b) {
              throw Error('Illegal value for ' + this.toString(!0) + ' of type ' + this.type.name + ': ' + a + ' (' + b + ')');
            }.bind(this), b === null) return this.required && d(_typeof(b), 'required'), this.syntax === 'proto3' && this.type !== a.TYPES.message && d(_typeof(b), 'proto3 field without field presence cannot be null'), null;

            if (this.repeated && !c) {
              for (Array.isArray(b) || (b = [b]), f = [], e = 0; e < b.length; e++) {
                f.push(this.element.verifyValue(b[e]));
              }

              return f;
            }

            return this.map && !c ? b instanceof a.Map ? b : (b instanceof Object || d(_typeof(b), 'expected ProtoBuf.Map or raw object for map field'), new a.Map(this, b)) : (!this.repeated && Array.isArray(b) && d(_typeof(b), 'no array expected'), this.element.verifyValue(b));
          }, q.hasWirePresence = function (b, c) {
            if (this.syntax !== 'proto3') return b !== null;
            if (this.oneof && c[this.oneof.name] === this.name) return !0;

            switch (this.type) {
              case a.TYPES.int32:
              case a.TYPES.sint32:
              case a.TYPES.sfixed32:
              case a.TYPES.uint32:
              case a.TYPES.fixed32:
                return b !== 0;

              case a.TYPES.int64:
              case a.TYPES.sint64:
              case a.TYPES.sfixed64:
              case a.TYPES.uint64:
              case a.TYPES.fixed64:
                return b.low !== 0 || b.high !== 0;

              case a.TYPES.bool:
                return b;

              case a.TYPES.float:
              case a.TYPES.double:
                return b !== 0;

              case a.TYPES.string:
                return b.length > 0;

              case a.TYPES.bytes:
                return b.remaining() > 0;

              case a.TYPES.enum:
                return b !== 0;

              case a.TYPES.message:
                return b !== null;

              default:
                return !0;
            }
          }, q.encode = function (b, c, d) {
            var e, g, h, i, j;
            if (this.type === null || _typeof(this.type) !== 'object') throw Error('[INTERNAL] Unresolved type in ' + this.toString(!0) + ': ' + this.type);
            if (b === null || this.repeated && b.length == 0) return c;

            try {
              if (this.repeated) {
                if (this.options.packed && a.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                  for (c.writeVarint32(this.id << 3 | a.WIRE_TYPES.LDELIM), c.ensureCapacity(c.offset += 1), g = c.offset, e = 0; e < b.length; e++) {
                    this.element.encodeValue(this.id, b[e], c);
                  }

                  h = c.offset - g, i = f.calculateVarint32(h), i > 1 && (j = c.slice(g, c.offset), g += i - 1, c.offset = g, c.append(j)), c.writeVarint32(h, g - i);
                } else for (e = 0; e < b.length; e++) {
                  c.writeVarint32(this.id << 3 | this.type.wireType), this.element.encodeValue(this.id, b[e], c);
                }
              } else this.map ? b.forEach(function (b, d) {
                var g = f.calculateVarint32(8 | this.keyType.wireType) + this.keyElement.calculateLength(1, d) + f.calculateVarint32(16 | this.type.wireType) + this.element.calculateLength(2, b);
                c.writeVarint32(this.id << 3 | a.WIRE_TYPES.LDELIM), c.writeVarint32(g), c.writeVarint32(8 | this.keyType.wireType), this.keyElement.encodeValue(1, d, c), c.writeVarint32(16 | this.type.wireType), this.element.encodeValue(2, b, c);
              }, this) : this.hasWirePresence(b, d) && (c.writeVarint32(this.id << 3 | this.type.wireType), this.element.encodeValue(this.id, b, c));
            } catch (k) {
              throw Error('Illegal value for ' + this.toString(!0) + ': ' + b + ' (' + k + ')');
            }

            return c;
          }, q.calculate = function (b, c) {
            var d, e, g;
            if (b = this.verifyValue(b), this.type === null || _typeof(this.type) !== 'object') throw Error('[INTERNAL] Unresolved type in ' + this.toString(!0) + ': ' + this.type);
            if (b === null || this.repeated && b.length == 0) return 0;
            d = 0;

            try {
              if (this.repeated) {
                if (this.options.packed && a.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                  for (d += f.calculateVarint32(this.id << 3 | a.WIRE_TYPES.LDELIM), g = 0, e = 0; e < b.length; e++) {
                    g += this.element.calculateLength(this.id, b[e]);
                  }

                  d += f.calculateVarint32(g), d += g;
                } else for (e = 0; e < b.length; e++) {
                  d += f.calculateVarint32(this.id << 3 | this.type.wireType), d += this.element.calculateLength(this.id, b[e]);
                }
              } else this.map ? b.forEach(function (b, c) {
                var g = f.calculateVarint32(8 | this.keyType.wireType) + this.keyElement.calculateLength(1, c) + f.calculateVarint32(16 | this.type.wireType) + this.element.calculateLength(2, b);
                d += f.calculateVarint32(this.id << 3 | a.WIRE_TYPES.LDELIM), d += f.calculateVarint32(g), d += g;
              }, this) : this.hasWirePresence(b, c) && (d += f.calculateVarint32(this.id << 3 | this.type.wireType), d += this.element.calculateLength(this.id, b));
            } catch (h) {
              throw Error('Illegal value for ' + this.toString(!0) + ': ' + b + ' (' + h + ')');
            }

            return d;
          }, q.decode = function (b, c, d) {
            var e;
            var f;
            var h;
            var j;
            var k;
            var l;
            var m;
            var g = !this.map && b == this.type.wireType || !d && this.repeated && this.options.packed && b == a.WIRE_TYPES.LDELIM || this.map && b == a.WIRE_TYPES.LDELIM;
            if (!g) throw Error('Illegal wire type for field ' + this.toString(!0) + ': ' + b + ' (' + this.type.wireType + ' expected)');

            if (b == a.WIRE_TYPES.LDELIM && this.repeated && this.options.packed && a.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0 && !d) {
              for (f = c.readVarint32(), f = c.offset + f, h = []; c.offset < f;) {
                h.push(this.decode(this.type.wireType, c, !0));
              }

              return h;
            }

            if (this.map) {
              if (j = i.defaultFieldValue(this.keyType), e = i.defaultFieldValue(this.type), f = c.readVarint32(), c.remaining() < f) throw Error('Illegal number of bytes for ' + this.toString(!0) + ': ' + f + ' required but got only ' + c.remaining());

              for (k = c.clone(), k.limit = k.offset + f, c.offset += f; k.remaining() > 0;) {
                if (l = k.readVarint32(), b = 7 & l, m = l >>> 3, m === 1) j = this.keyElement.decode(k, b, m);else {
                  if (m !== 2) throw Error('Unexpected tag in map field key/value submessage');
                  e = this.element.decode(k, b, m);
                }
              }

              return [j, e];
            }

            return this.element.decode(c, b, this.id);
          }, c.Message.Field = p, r = function r(a, b, c, d, e, f, g) {
            p.call(this, a, b, c, null, d, e, f, g), this.extension;
          }, r.prototype = Object.create(p.prototype), c.Message.ExtensionField = r, s = function s(a, b, c) {
            d.call(this, a, b, c), this.fields = [];
          }, c.Message.OneOf = s, t = function t(a, b, c, d, e) {
            g.call(this, a, b, c, d, e), this.className = 'Enum', this.object = null;
          }, t.getName = function (a, b) {
            var e;
            var d;
            var c = Object.keys(a);

            for (d = 0; d < c.length; ++d) {
              if (a[e = c[d]] === b) return e;
            }

            return null;
          }, u = t.prototype = Object.create(g.prototype), u.build = function (b) {
            var c, d, e, f;
            if (this.object && !b) return this.object;

            for (c = new a.Builder.Enum(), d = this.getChildren(t.Value), e = 0, f = d.length; f > e; ++e) {
              c[d[e].name] = d[e].id;
            }

            return Object.defineProperty && Object.defineProperty(c, '$options', {
              value: this.buildOpt(),
              enumerable: !1
            }), this.object = c;
          }, c.Enum = t, v = function v(a, b, c, e) {
            d.call(this, a, b, c), this.className = 'Enum.Value', this.id = e;
          }, v.prototype = Object.create(d.prototype), c.Enum.Value = v, w = function w(a, b, c, e) {
            d.call(this, a, b, c), this.field = e;
          }, w.prototype = Object.create(d.prototype), c.Extension = w, x = function x(a, b, c, d) {
            g.call(this, a, b, c, d), this.className = 'Service', this.clazz = null;
          }, y = x.prototype = Object.create(g.prototype), y.build = function (b) {
            return this.clazz && !b ? this.clazz : this.clazz = function (a, b) {
              var g;

              var c = function c(b) {
                a.Builder.Service.call(this), this.rpcImpl = b || function (a, b, c) {
                  setTimeout(c.bind(this, Error('Not implemented, see: https://github.com/dcodeIO/ProtoBuf.js/wiki/Services')), 0);
                };
              };

              var d = c.prototype = Object.create(a.Builder.Service.prototype);
              var e = b.getChildren(a.Reflect.Service.RPCMethod);

              for (g = 0; g < e.length; g++) {
                !function (a) {
                  d[a.name] = function (c, d) {
                    try {
                      try {
                        c = a.resolvedRequestType.clazz.decode(f.wrap(c));
                      } catch (e) {
                        if (!(e instanceof TypeError)) throw e;
                      }

                      if (c === null || _typeof(c) !== 'object') throw Error('Illegal arguments');
                      c instanceof a.resolvedRequestType.clazz || (c = new a.resolvedRequestType.clazz(c)), this.rpcImpl(a.fqn(), c, function (c, e) {
                        if (c) return d(c), void 0;

                        try {
                          e = a.resolvedResponseType.clazz.decode(e);
                        } catch (f) {}

                        return e && e instanceof a.resolvedResponseType.clazz ? (d(null, e), void 0) : (d(Error('Illegal response type received in service method ' + b.name + '#' + a.name)), void 0);
                      });
                    } catch (e) {
                      setTimeout(d.bind(this, e), 0);
                    }
                  }, c[a.name] = function (b, d, e) {
                    new c(b)[a.name](d, e);
                  }, Object.defineProperty && (Object.defineProperty(c[a.name], '$options', {
                    value: a.buildOpt()
                  }), Object.defineProperty(d[a.name], '$options', {
                    value: c[a.name].$options
                  }));
                }(e[g]);
              }

              return Object.defineProperty && (Object.defineProperty(c, '$options', {
                value: b.buildOpt()
              }), Object.defineProperty(d, '$options', {
                value: c.$options
              }), Object.defineProperty(c, '$type', {
                value: b
              }), Object.defineProperty(d, '$type', {
                value: b
              })), c;
            }(a, this);
          }, c.Service = x, z = function z(a, b, c, e) {
            d.call(this, a, b, c), this.className = 'Service.Method', this.options = e || {};
          }, A = z.prototype = Object.create(d.prototype), A.buildOpt = h.buildOpt, c.Service.Method = z, B = function B(a, b, c, d, e, f, g, h) {
            z.call(this, a, b, c, h), this.className = 'Service.RPCMethod', this.requestName = d, this.responseName = e, this.requestStream = f, this.responseStream = g, this.resolvedRequestType = null, this.resolvedResponseType = null;
          }, B.prototype = Object.create(z.prototype), c.Service.RPCMethod = B, c;
        }(e), e.Builder = function (a, b, c) {
          function f(a) {
            a.messages && a.messages.forEach(function (b) {
              b.syntax = a.syntax, f(b);
            }), a.enums && a.enums.forEach(function (b) {
              b.syntax = a.syntax;
            });
          }

          var d = function d(a) {
            this.ns = new c.Namespace(this, null, ''), this.ptr = this.ns, this.resolved = !1, this.result = null, this.files = {}, this.importRoot = null, this.options = a || {};
          };

          var e = d.prototype;
          return d.isMessage = function (a) {
            return typeof a.name !== 'string' ? !1 : typeof a.values !== 'undefined' || typeof a.rpc !== 'undefined' ? !1 : !0;
          }, d.isMessageField = function (a) {
            return typeof a.rule !== 'string' || typeof a.name !== 'string' || typeof a.type !== 'string' || typeof a.id === 'undefined' ? !1 : !0;
          }, d.isEnum = function (a) {
            return typeof a.name !== 'string' ? !1 : typeof a.values !== 'undefined' && Array.isArray(a.values) && a.values.length !== 0 ? !0 : !1;
          }, d.isService = function (a) {
            return typeof a.name === 'string' && _typeof(a.rpc) === 'object' && a.rpc ? !0 : !1;
          }, d.isExtend = function (a) {
            return typeof a.ref !== 'string' ? !1 : !0;
          }, e.reset = function () {
            return this.ptr = this.ns, this;
          }, e.define = function (a) {
            if (typeof a !== 'string' || !b.TYPEREF.test(a)) throw Error('illegal namespace: ' + a);
            return a.split('.').forEach(function (a) {
              var b = this.ptr.getChild(a);
              b === null && this.ptr.addChild(b = new c.Namespace(this, this.ptr, a)), this.ptr = b;
            }, this), this;
          }, e.create = function (b) {
            var e, f, g, h, i;
            if (!b) return this;

            if (Array.isArray(b)) {
              if (b.length === 0) return this;
              b = b.slice();
            } else b = [b];

            for (e = [b]; e.length > 0;) {
              if (b = e.pop(), !Array.isArray(b)) throw Error('not a valid namespace: ' + JSON.stringify(b));

              for (; b.length > 0;) {
                if (f = b.shift(), d.isMessage(f)) {
                  if (g = new c.Message(this, this.ptr, f.name, f.options, f.isGroup, f.syntax), h = {}, f.oneofs && Object.keys(f.oneofs).forEach(function (a) {
                    g.addChild(h[a] = new c.Message.OneOf(this, g, a));
                  }, this), f.fields && f.fields.forEach(function (a) {
                    if (g.getChild(0 | a.id) !== null) throw Error('duplicate or invalid field id in ' + g.name + ': ' + a.id);
                    if (a.options && _typeof(a.options) !== 'object') throw Error('illegal field options in ' + g.name + '#' + a.name);
                    var b = null;
                    if (typeof a.oneof === 'string' && !(b = h[a.oneof])) throw Error('illegal oneof in ' + g.name + '#' + a.name + ': ' + a.oneof);
                    a = new c.Message.Field(this, g, a.rule, a.keytype, a.type, a.name, a.id, a.options, b, f.syntax), b && b.fields.push(a), g.addChild(a);
                  }, this), i = [], f.enums && f.enums.forEach(function (a) {
                    i.push(a);
                  }), f.messages && f.messages.forEach(function (a) {
                    i.push(a);
                  }), f.services && f.services.forEach(function (a) {
                    i.push(a);
                  }), f.extensions && (g.extensions = typeof f.extensions[0] === 'number' ? [f.extensions] : f.extensions), this.ptr.addChild(g), i.length > 0) {
                    e.push(b), b = i, i = null, this.ptr = g, g = null;
                    continue;
                  }

                  i = null;
                } else if (d.isEnum(f)) g = new c.Enum(this, this.ptr, f.name, f.options, f.syntax), f.values.forEach(function (a) {
                  g.addChild(new c.Enum.Value(this, g, a.name, a.id));
                }, this), this.ptr.addChild(g);else if (d.isService(f)) g = new c.Service(this, this.ptr, f.name, f.options), Object.keys(f.rpc).forEach(function (a) {
                  var b = f.rpc[a];
                  g.addChild(new c.Service.RPCMethod(this, g, a, b.request, b.response, !!b.request_stream, !!b.response_stream, b.options));
                }, this), this.ptr.addChild(g);else {
                  if (!d.isExtend(f)) throw Error('not a valid definition: ' + JSON.stringify(f));

                  if (g = this.ptr.resolve(f.ref, !0)) {
                    f.fields.forEach(function (b) {
                      var d, e, f, h;
                      if (g.getChild(0 | b.id) !== null) throw Error('duplicate extended field id in ' + g.name + ': ' + b.id);
                      if (g.extensions && (d = !1, g.extensions.forEach(function (a) {
                        b.id >= a[0] && b.id <= a[1] && (d = !0);
                      }), !d)) throw Error('illegal extended field id in ' + g.name + ': ' + b.id + ' (not within valid ranges)');
                      e = b.name, this.options.convertFieldsToCamelCase && (e = a.Util.toCamelCase(e)), f = new c.Message.ExtensionField(this, g, b.rule, b.type, this.ptr.fqn() + '.' + e, b.id, b.options), h = new c.Extension(this, this.ptr, b.name, f), f.extension = h, this.ptr.addChild(h), g.addChild(f);
                    }, this);
                  } else if (!/\.?google\.protobuf\./.test(f.ref)) throw Error('extended message ' + f.ref + ' is not defined');
                }

                f = null, g = null;
              }

              b = null, this.ptr = this.ptr.parent;
            }

            return this.resolved = !1, this.result = null, this;
          }, e.import = function (b, c) {
            var e;
            var g;
            var h;
            var i;
            var j;
            var k;
            var l;
            var m;
            var d = '/';

            if (typeof c === 'string') {
              if (a.Util.IS_NODE, this.files[c] === !0) return this.reset();
              this.files[c] = !0;
            } else if (_typeof(c) === 'object') {
              if (e = c.root, a.Util.IS_NODE, (e.indexOf('\\') >= 0 || c.file.indexOf('\\') >= 0) && (d = '\\'), g = e + d + c.file, this.files[g] === !0) return this.reset();
              this.files[g] = !0;
            }

            if (b.imports && b.imports.length > 0) {
              for (i = !1, _typeof(c) === 'object' ? (this.importRoot = c.root, i = !0, h = this.importRoot, c = c.file, (h.indexOf('\\') >= 0 || c.indexOf('\\') >= 0) && (d = '\\')) : typeof c === 'string' ? this.importRoot ? h = this.importRoot : c.indexOf('/') >= 0 ? (h = c.replace(/\/[^\/]*$/, ''), h === '' && (h = '/')) : c.indexOf('\\') >= 0 ? (h = c.replace(/\\[^\\]*$/, ''), d = '\\') : h = '.' : h = null, j = 0; j < b.imports.length; j++) {
                if (typeof b.imports[j] === 'string') {
                  if (!h) throw Error('cannot determine import root');
                  if (k = b.imports[j], k === 'google/protobuf/descriptor.proto') continue;
                  if (k = h + d + k, this.files[k] === !0) continue;
                  if (/\.proto$/i.test(k) && !a.DotProto && (k = k.replace(/\.proto$/, '.json')), l = a.Util.fetch(k), l === null) throw Error("failed to import '" + k + "' in '" + c + "': file not found");
                  /\.json$/i.test(k) ? this.import(JSON.parse(l + ''), k) : this.import(a.DotProto.Parser.parse(l), k);
                } else c ? /\.(\w+)$/.test(c) ? this.import(b.imports[j], c.replace(/^(.+)\.(\w+)$/, function (a, b, c) {
                  return b + '_import' + j + '.' + c;
                })) : this.import(b.imports[j], c + '_import' + j) : this.import(b.imports[j]);
              }

              i && (this.importRoot = null);
            }

            return b.package && this.define(b.package), b.syntax && f(b), m = this.ptr, b.options && Object.keys(b.options).forEach(function (a) {
              m.options[a] = b.options[a];
            }), b.messages && (this.create(b.messages), this.ptr = m), b.enums && (this.create(b.enums), this.ptr = m), b.services && (this.create(b.services), this.ptr = m), b.extends && this.create(b.extends), this.reset();
          }, e.resolveAll = function () {
            var d;
            if (this.ptr == null || _typeof(this.ptr.type) === 'object') return this;
            if (this.ptr instanceof c.Namespace) this.ptr.children.forEach(function (a) {
              this.ptr = a, this.resolveAll();
            }, this);else if (this.ptr instanceof c.Message.Field) {
              if (b.TYPE.test(this.ptr.type)) this.ptr.type = a.TYPES[this.ptr.type];else {
                if (!b.TYPEREF.test(this.ptr.type)) throw Error('illegal type reference in ' + this.ptr.toString(!0) + ': ' + this.ptr.type);
                if (d = (this.ptr instanceof c.Message.ExtensionField ? this.ptr.extension.parent : this.ptr.parent).resolve(this.ptr.type, !0), !d) throw Error('unresolvable type reference in ' + this.ptr.toString(!0) + ': ' + this.ptr.type);

                if (this.ptr.resolvedType = d, d instanceof c.Enum) {
                  if (this.ptr.type = a.TYPES.enum, this.ptr.syntax === 'proto3' && d.syntax !== 'proto3') throw Error('proto3 message cannot reference proto2 enum');
                } else {
                  if (!(d instanceof c.Message)) throw Error('illegal type reference in ' + this.ptr.toString(!0) + ': ' + this.ptr.type);
                  this.ptr.type = d.isGroup ? a.TYPES.group : a.TYPES.message;
                }
              }

              if (this.ptr.map) {
                if (!b.TYPE.test(this.ptr.keyType)) throw Error('illegal key type for map field in ' + this.ptr.toString(!0) + ': ' + this.ptr.keyType);
                this.ptr.keyType = a.TYPES[this.ptr.keyType];
              }
            } else if (this.ptr instanceof a.Reflect.Service.Method) {
              if (!(this.ptr instanceof a.Reflect.Service.RPCMethod)) throw Error('illegal service type in ' + this.ptr.toString(!0));
              if (d = this.ptr.parent.resolve(this.ptr.requestName, !0), !(d && d instanceof a.Reflect.Message)) throw Error('Illegal type reference in ' + this.ptr.toString(!0) + ': ' + this.ptr.requestName);
              if (this.ptr.resolvedRequestType = d, d = this.ptr.parent.resolve(this.ptr.responseName, !0), !(d && d instanceof a.Reflect.Message)) throw Error('Illegal type reference in ' + this.ptr.toString(!0) + ': ' + this.ptr.responseName);
              this.ptr.resolvedResponseType = d;
            } else if (!(this.ptr instanceof a.Reflect.Message.OneOf || this.ptr instanceof a.Reflect.Extension || this.ptr instanceof a.Reflect.Enum.Value)) throw Error('illegal object in namespace: ' + _typeof(this.ptr) + ': ' + this.ptr);
            return this.reset();
          }, e.build = function (a) {
            var b, c, d;
            if (this.reset(), this.resolved || (this.resolveAll(), this.resolved = !0, this.result = null), this.result === null && (this.result = this.ns.build()), !a) return this.result;

            for (b = typeof a === 'string' ? a.split('.') : a, c = this.result, d = 0; d < b.length; d++) {
              if (!c[b[d]]) {
                c = null;
                break;
              }

              c = c[b[d]];
            }

            return c;
          }, e.lookup = function (a, b) {
            return a ? this.ns.resolve(a, b) : this.ns;
          }, e.toString = function () {
            return 'Builder';
          }, d.Message = function () {}, d.Enum = function () {}, d.Service = function () {}, d;
        }(e, e.Lang, e.Reflect), e.Map = function (a, b) {
          function e(a) {
            var b = 0;
            return {
              next: function next() {
                return b < a.length ? {
                  done: !1,
                  value: a[b++]
                } : {
                  done: !0
                };
              }
            };
          }

          var c = function c(a, _c) {
            var d, e, f, g;
            if (!a.map) throw Error('field is not a map');
            if (this.field = a, this.keyElem = new b.Element(a.keyType, null, !0, a.syntax), this.valueElem = new b.Element(a.type, a.resolvedType, !1, a.syntax), this.map = {}, Object.defineProperty(this, 'size', {
              get: function get() {
                return Object.keys(this.map).length;
              }
            }), _c) for (d = Object.keys(_c), e = 0; e < d.length; e++) {
              f = this.keyElem.valueFromString(d[e]), g = this.valueElem.verifyValue(_c[d[e]]), this.map[this.keyElem.valueToString(f)] = {
                key: f,
                value: g
              };
            }
          };

          var d = c.prototype;
          return d.clear = function () {
            this.map = {};
          }, d.delete = function (a) {
            var b = this.keyElem.valueToString(this.keyElem.verifyValue(a));
            var c = (b in this.map);
            return delete this.map[b], c;
          }, d.entries = function () {
            var d;
            var c;
            var a = [];
            var b = Object.keys(this.map);

            for (c = 0; c < b.length; c++) {
              a.push([(d = this.map[b[c]]).key, d.value]);
            }

            return e(a);
          }, d.keys = function () {
            var c;
            var a = [];
            var b = Object.keys(this.map);

            for (c = 0; c < b.length; c++) {
              a.push(this.map[b[c]].key);
            }

            return e(a);
          }, d.values = function () {
            var c;
            var a = [];
            var b = Object.keys(this.map);

            for (c = 0; c < b.length; c++) {
              a.push(this.map[b[c]].value);
            }

            return e(a);
          }, d.forEach = function (a, b) {
            var e;
            var d;
            var c = Object.keys(this.map);

            for (d = 0; d < c.length; d++) {
              a.call(b, (e = this.map[c[d]]).value, e.key, this);
            }
          }, d.set = function (a, b) {
            var c = this.keyElem.verifyValue(a);
            var d = this.valueElem.verifyValue(b);
            return this.map[this.keyElem.valueToString(c)] = {
              key: c,
              value: d
            }, this;
          }, d.get = function (a) {
            var b = this.keyElem.valueToString(this.keyElem.verifyValue(a));
            return b in this.map ? this.map[b].value : void 0;
          }, d.has = function (a) {
            var b = this.keyElem.valueToString(this.keyElem.verifyValue(a));
            return b in this.map;
          }, c;
        }(e, e.Reflect), e.loadProto = function (a, b, c) {
          return (typeof b === 'string' || b && typeof b.file === 'string' && typeof b.root === 'string') && (c = b, b = void 0), e.loadJson(e.DotProto.Parser.parse(a), b, c);
        }, e.protoFromString = e.loadProto, e.loadProtoFile = function (a, b, c) {
          if (b && _typeof(b) === 'object' ? (c = b, b = null) : b && typeof b === 'function' || (b = null), b) return e.Util.fetch(typeof a === 'string' ? a : a.root + '/' + a.file, function (d) {
            if (d === null) return b(Error('Failed to fetch file')), void 0;

            try {
              b(null, e.loadProto(d, c, a));
            } catch (f) {
              b(f);
            }
          });
          var d = e.Util.fetch(_typeof(a) === 'object' ? a.root + '/' + a.file : a);
          return d === null ? null : e.loadProto(d, c, a);
        }, e.protoFromFile = e.loadProtoFile, e.newBuilder = function (a) {
          return a = a || {}, typeof a.convertFieldsToCamelCase === 'undefined' && (a.convertFieldsToCamelCase = e.convertFieldsToCamelCase), typeof a.populateAccessors === 'undefined' && (a.populateAccessors = e.populateAccessors), new e.Builder(a);
        }, e.loadJson = function (a, b, c) {
          return (typeof b === 'string' || b && typeof b.file === 'string' && typeof b.root === 'string') && (c = b, b = null), b && _typeof(b) === 'object' || (b = e.newBuilder()), typeof a === 'string' && (a = JSON.parse(a)), b.import(a, c), b.resolveAll(), b;
        }, e.loadJsonFile = function (a, b, c) {
          if (b && _typeof(b) === 'object' ? (c = b, b = null) : b && typeof b === 'function' || (b = null), b) return e.Util.fetch(typeof a === 'string' ? a : a.root + '/' + a.file, function (d) {
            if (d === null) return b(Error('Failed to fetch file')), void 0;

            try {
              b(null, e.loadJson(JSON.parse(d), c, a));
            } catch (f) {
              b(f);
            }
          });
          var d = e.Util.fetch(_typeof(a) === 'object' ? a.root + '/' + a.file : a);
          return d === null ? null : e.loadJson(JSON.parse(d), c, a);
        }, h = a, e.loadProto(h, void 0, '').build('Modules').probuf;
      }(d, c);

      return e;
    }

    var Codec = protobuf(SSMsg);

    Codec.getModule = function (pbName) {
      var modules = new Codec[pbName]();

      modules.getArrayData = function () {
        var data = modules.toArrayBuffer();
        data = isArrayBuffer(data) ? [].slice.call(new Int8Array(data)) : data;
        return data;
      };

      return modules;
    };

    var _a$1, _b, _c;
    var PublishTopic = {
      PRIVATE: 'ppMsgP',
      GROUP: 'pgMsgP',
      CHATROOM: 'chatMsg',
      CUSTOMER_SERVICE: 'pcMsgP',
      RECALL: 'recallMsg',
      RTC_MSG: 'prMsgS',
      NOTIFY_PULL_MSG: 's_ntf',
      RECEIVE_MSG: 's_msg',
      SYNC_STATUS: 's_stat',
      SERVER_NOTIFY: 's_cmd',
      SETTING_NOTIFY: 's_us'
    };
    var PublishStatusTopic = {
      PRIVATE: 'ppMsgS',
      GROUP: 'pgMsgS',
      CHATROOM: 'chatMsgS'
    };
    var QueryTopic = {
      GET_SYNC_TIME: 'qrySessionsAtt',
      PULL_MSG: 'pullMsg',
      GET_CONVERSATION_LIST: 'qrySessions',
      REMOVE_CONVERSATION_LIST: 'delSessions',
      DELETE_MESSAGES: 'delMsg',
      CLEAR_UNREAD_COUNT: 'updRRTime',
      PULL_USER_SETTING: 'pullUS',
      PULL_CHRM_MSG: 'chrmPull',
      JOIN_CHATROOM: 'joinChrm',
      JOIN_EXIST_CHATROOM: 'joinChrmR',
      QUIT_CHATROOM: 'exitChrm',
      GET_CHATROOM_INFO: 'queryChrmI',
      UPDATE_CHATROOM_KV: 'setKV',
      DELETE_CHATROOM_KV: 'delKV',
      UPDATE_CHATROOM_KVS: 'setKVS',
      DELETE_CHATROOM_KVS: 'delKVS',
      PULL_CHATROOM_KV: 'pullKV',
      GET_OLD_CONVERSATION_LIST: 'qryRelationR',
      REMOVE_OLD_CONVERSATION: 'delRelation',
      GET_CONVERSATION_STATUS: 'pullSeAtts',
      SET_CONVERSATION_STATUS: 'setSeAtt',
      GET_UPLOAD_FILE_TOKEN: 'qnTkn',
      GET_UPLOAD_FILE_URL: 'qnUrl',
      CLEAR_MESSAGES: {
        PRIVATE: 'cleanPMsg',
        GROUP: 'cleanGMsg',
        ULTRA_GROUP: 'cleanGMsg',
        CUSTOMER_SERVICE: 'cleanCMsg',
        SYSTEM: 'cleanSMsg'
      },
      JOIN_RTC_ROOM: 'rtcRJoin_data',
      QUIT_RTC_ROOM: 'rtcRExit',
      PING_RTC: 'rtcPing',
      SET_RTC_DATA: 'rtcSetData',
      USER_SET_RTC_DATA: 'userSetData',
      GET_RTC_DATA: 'rtcQryData',
      DEL_RTC_DATA: 'rtcDelData',
      SET_RTC_OUT_DATA: 'rtcSetOutData',
      GET_RTC_OUT_DATA: 'rtcQryUserOutData',
      GET_RTC_TOKEN: 'rtcToken',
      SET_RTC_STATE: 'rtcUserState',
      GET_RTC_ROOM_INFO: 'rtcRInfo',
      GET_RTC_USER_INFO_LIST: 'rtcUData',
      SET_RTC_USER_INFO: 'rtcUPut',
      DEL_RTC_USER_INFO: 'rtcUDel',
      GET_RTC_USER_LIST: 'rtcUList'
    };
    var QueryHistoryTopic = {
      PRIVATE: 'qryPMsg',
      GROUP: 'qryGMsg',
      CHATROOM: 'qryCHMsg',
      CUSTOMER_SERVICE: 'qryCMsg',
      SYSTEM: 'qrySMsg'
    };
    var PublishTopicToConversationType = (_a$1 = {}, _a$1[PublishTopic.PRIVATE] = ConversationType$1.PRIVATE, _a$1[PublishTopic.GROUP] = ConversationType$1.GROUP, _a$1[PublishTopic.CHATROOM] = ConversationType$1.CHATROOM, _a$1[PublishTopic.CUSTOMER_SERVICE] = ConversationType$1.CUSTOMER_SERVICE, _a$1);
    var ConversationTypeToQueryHistoryTopic = (_b = {}, _b[ConversationType$1.PRIVATE] = QueryHistoryTopic.PRIVATE, _b[ConversationType$1.GROUP] = QueryHistoryTopic.GROUP, _b[ConversationType$1.CHATROOM] = QueryHistoryTopic.CHATROOM, _b[ConversationType$1.CUSTOMER_SERVICE] = QueryHistoryTopic.CUSTOMER_SERVICE, _b[ConversationType$1.SYSTEM] = QueryHistoryTopic.SYSTEM, _b);
    var ConversationTypeToClearMessageTopic = (_c = {}, _c[ConversationType$1.PRIVATE] = QueryTopic.CLEAR_MESSAGES.PRIVATE, _c[ConversationType$1.GROUP] = QueryTopic.CLEAR_MESSAGES.GROUP, _c[ConversationType$1.ULTRA_GROUP] = QueryTopic.CLEAR_MESSAGES.ULTRA_GROUP, _c[ConversationType$1.CUSTOMER_SERVICE] = QueryTopic.CLEAR_MESSAGES.CUSTOMER_SERVICE, _c[ConversationType$1.SYSTEM] = QueryTopic.CLEAR_MESSAGES.SYSTEM, _c);
    var ConversationStatusConfig = {
      ENABLED: '1',
      DISABLED: '0'
    };
    var ConversationStatusType = {
      DO_NOT_DISTURB: 1,
      TOP: 2,
      TAGS: 3
    };

    var DataCodec = function () {
      function DataCodec(connectType) {
        this._codec = connectType === 'websocket' ? Codec : Codec$1;
        this._connectType = connectType;
      }

      DataCodec.prototype.decodeByPBName = function (data, pbName, option) {
        var _a;

        var self = this;
        var formatEventMap = (_a = {}, _a[PBName.DownStreamMessages] = self._formatSyncMessages, _a[PBName.DownStreamMessage] = self._formatReceivedMessage, _a[PBName.UpStreamMessage] = self._formatSentMessage, _a[PBName.HistoryMsgOuput] = self._formatHistoryMessages, _a[PBName.RelationsOutput] = self._formatConversationList, _a[PBName.QueryChatRoomInfoOutput] = self._formatChatRoomInfos, _a[PBName.RtcUserListOutput] = self._formatRTCUserList, _a[PBName.RtcQryOutput] = self._formatRTCData, _a[PBName.ChrmKVOutput] = self._formatChatRoomKVList, _a[PBName.PullUserSettingOutput] = self._formatUserSetting, _a[PBName.SessionStates] = self._formatConversationStatus, _a[PBName.GrpReadReceiptQryResp] = self._formatGrpReadReceiptQryResp, _a[PBName.SetUserSettingOutput] = self._formatSetUserSettingOutput, _a[PBName.UserSettingNotification] = self._formatUserSettingNotification, _a[PBName.MsgChangeList] = self._formatUltraMsgChangeList, _a[PBName.OperateStatusNotify] = self._formatUltraOperateStatusNotifyList, _a[PBName.MsgQueryAck] = self._formatUltraMsgList, _a[PBName.ChrmOutput] = self._formatChrmKVVersion, _a[PBName.RtcKVOutput] = self._formatRTCRoomKVList, _a[PBName.RtcTokenOutput] = self._formatRTCAuidenceJoinRoomData, _a[PBName.RtcQueryUserJoinedOutput] = self._formatRTCJoinedUserInfo, _a);
        var decodedData = data;
        var formatEvent = formatEventMap[pbName];

        try {
          var hasData = data.length > 0;
          decodedData = hasData && self._codec[pbName].decode(data);

          if (isObject(decodedData)) {
            decodedData = batchInt64ToTimestamp(decodedData);
          }

          if (isFunction(formatEvent)) {
            decodedData = formatEvent.call(this, decodedData, option);
          }
        } catch (e) {
          logger$1.error('PB parse error\n', e, data, pbName);
        }

        return decodedData;
      };

      DataCodec.prototype._readBytes = function (content) {
        var offset = content.offset,
            buffer = content.buffer,
            limit = content.limit;

        if (offset) {
          try {
            var content_1 = isArrayBuffer(buffer) ? new Uint8Array(buffer) : buffer;
            return BinaryHelper.readUTF(content_1.subarray(offset, limit));
          } catch (e) {
            logger$1.info('readBytes error\n', e);
          }
        }

        return content;
      };

      DataCodec.prototype._formatBytes = function (content) {
        if (!content) return content;

        var formatRes = this._readBytes(content);

        try {
          formatRes = JSON.parse(formatRes);
        } catch (e) {
          logger$1.info('formatBytes error\n', e);
        }

        return formatRes || content;
      };

      DataCodec.prototype._formatSyncMessages = function (data, option) {
        option = option || {};
        var self = this;
        var list = data.list,
            syncTime = data.syncTime,
            finished = data.finished;

        if (isUndefined(finished) || finished === null) {
          data.finished = true;
        }

        data.syncTime = int64ToTimestamp(syncTime);
        data.list = map(list, function (msgData) {
          var message = self._formatReceivedMessage(msgData, option);

          return message;
        });
        return data;
      };

      DataCodec.prototype._formatReceivedMessage = function (data, option) {
        if (!data) return data;
        option = option || {};
        var self = this;
        var currentUserId = option.currentUserId,
            connectedTime = option.connectedTime;
        var content = data.content,
            fromUserId = data.fromUserId,
            type = data.type,
            groupId = data.groupId,
            status = data.status,
            dataTime = data.dataTime,
            messageType = data.classname,
            messageUId = data.msgId,
            extraContent = data.extraContent,
            pushContent = data.pushContent,
            pushExt = data.pushExt,
            configFlag = data.configFlag,
            extStatus = data.extStatus;
            data.toUserId;
            data.groupUnpush;
        var direction = data.direction || MessageDirection$1.RECEIVE;
        var isSelfSend = direction === MessageDirection$1.SEND;

        var _b = getMessageOptionByStatus(status),
            isPersited = _b.isPersited,
            isCounted = _b.isCounted,
            isMentioned = _b.isMentioned,
            disableNotification = _b.disableNotification,
            receivedStatus = _b.receivedStatus,
            canIncludeExpansion = _b.canIncludeExpansion;

        var isInterrupt = !!((extStatus || 0) & 2);
        var isModifyMessage = !!((extStatus || 0) & 4);
        var targetId = [ConversationType$1.GROUP, ConversationType$1.CHATROOM, ConversationType$1.RTC_ROOM, ConversationType$1.ULTRA_GROUP].indexOf(type) > -1 ? groupId : fromUserId;
        var senderUserId = isSelfSend ? currentUserId : fromUserId;
        var sentTime = int64ToTimestamp(dataTime);
        var isOffLineMessage = sentTime < connectedTime;
        var isChatRoomMsg = type === ConversationType$1.CHATROOM;

        var utfContent = self._formatBytes(content);

        var _pushConfig = {};

        if (pushExt) {
          _pushConfig = pushJSONToConfigs(pushExt.pushConfigs, pushExt.pushId);
        }

        if (utfContent.user) {
          var _c = utfContent.user,
              portrait = _c.portrait,
              portraitUri = _c.portraitUri;
          var value = portrait || portraitUri;

          if (value) {
            utfContent.user.portrait = utfContent.user.portraitUri = value;
          }
        }

        var pushConfig = __assign(__assign({}, _pushConfig), {
          pushTitle: pushExt === null || pushExt === void 0 ? void 0 : pushExt.title,
          pushContent: pushContent,
          pushData: pushContent,
          disablePushTitle: configFlag ? Boolean(configFlag & 0x04) : false,
          forceShowDetailContent: configFlag ? Boolean(configFlag & 0x08) : false,
          templateId: pushExt === null || pushExt === void 0 ? void 0 : pushExt.templateId
        });

        var messageDirection = isSelfSend ? MessageDirection$1.SEND : MessageDirection$1.RECEIVE;

        if (isChatRoomMsg && fromUserId === currentUserId) {
          messageDirection = MessageDirection$1.SEND;
        }

        var expansion;

        if (extraContent) {
          expansion = {};
          expansion = formatExtraContent(extraContent);
        }

        var msg = {
          conversationType: type,
          targetId: targetId,
          senderUserId: senderUserId,
          messageType: messageType,
          messageUId: messageUId,
          isPersited: isPersited,
          isCounted: isCounted,
          isMentioned: isMentioned,
          sentTime: sentTime,
          messageDirection: messageDirection,
          receivedTime: DelayTimer.getTime(),
          disableNotification: disableNotification,
          receivedStatus: receivedStatus,
          canIncludeExpansion: canIncludeExpansion,
          content: utfContent,
          expansion: expansion,
          configFlag: configFlag,
          pushConfig: pushConfig,
          channelId: data.busChannel || '',
          isInterrupt: isInterrupt,
          isModifyMessage: isModifyMessage
        };

        if (type !== ConversationType$1.ULTRA_GROUP) {
          msg.isOffLineMessage = isOffLineMessage;
        }

        return msg;
      };

      DataCodec.prototype._formatSentMessage = function (data, option) {
        var self = this;
        var content = data.content,
            messageType = data.classname,
            sessionId = data.sessionId,
            messageUId = data.msgId,
            extraContent = data.extraContent,
            pushExt = data.pushExt,
            pushContent = data.pushContent,
            configFlag = data.configFlag,
            extStatus = data.extStatus;
        var signal = option.signal,
            currentUserId = option.currentUserId;
        var date = signal.date,
            topic = signal.topic,
            targetId = signal.targetId;
        var isInterrupt = !!((extStatus || 0) & 2);

        var _a = getUpMessageOptionBySessionId(sessionId),
            isPersited = _a.isPersited,
            isCounted = _a.isCounted,
            disableNotification = _a.disableNotification,
            canIncludeExpansion = _a.canIncludeExpansion;

        var type = PublishTopicToConversationType[topic] || ConversationType$1.PRIVATE;
        var isStatusMessage = isInObject(PublishStatusTopic, topic);

        var _content = self._formatBytes(content);

        var _targetId = targetId;

        if (messageType === MessageType$2.RECALL) {
          type = _content.conversationType || type;
          _targetId = _content.targetId || targetId;
        }

        var expansion;

        if (extraContent) {
          expansion = {};
          expansion = formatExtraContent(extraContent);
        }

        var _pushConfig = {};

        if (pushExt) {
          _pushConfig = pushJSONToConfigs(pushExt.pushConfigs, pushExt.pushId);
        }

        var pushConfig = __assign(__assign({}, _pushConfig), {
          pushTitle: pushExt === null || pushExt === void 0 ? void 0 : pushExt.title,
          pushContent: pushContent,
          pushData: pushContent,
          disablePushTitle: configFlag ? Boolean(configFlag & 0x04) : false,
          forceShowDetailContent: configFlag ? Boolean(configFlag & 0x08) : false,
          templateId: pushExt === null || pushExt === void 0 ? void 0 : pushExt.templateId
        });

        return {
          conversationType: type,
          targetId: _targetId,
          messageType: messageType,
          messageUId: messageUId,
          isPersited: isPersited,
          isCounted: isCounted,
          isStatusMessage: isStatusMessage,
          senderUserId: currentUserId,
          content: self._formatBytes(content),
          sentTime: date * 1000,
          receivedTime: DelayTimer.getTime(),
          messageDirection: MessageDirection$1.SEND,
          isOffLineMessage: false,
          disableNotification: disableNotification,
          canIncludeExpansion: canIncludeExpansion,
          expansion: expansion,
          pushConfig: pushConfig,
          channelId: data.busChannel || '',
          isInterrupt: isInterrupt
        };
      };

      DataCodec.prototype._formatHistoryMessages = function (data, option) {
        var _this = this;

        var conversation = option.conversation || {};
        var msgList = data.list,
            hasMsg = data.hasMsg;
        var targetId = conversation.targetId;
        var syncTime = int64ToTimestamp(data.syncTime);
        var list = [];
        forEach$1(msgList, function (msgData) {
          var msg = _this._formatReceivedMessage(msgData, option);

          if (conversation.conversationType === ConversationType$1.ULTRA_GROUP) {
            msg.targetId = msgData.groupId || conversation.targetId;
          } else {
            msg.targetId = targetId;
          }

          list.push(msg);
        }, {
          isReverse: true
        });
        return {
          syncTime: syncTime,
          list: list,
          hasMore: !!hasMsg
        };
      };

      DataCodec.prototype._formatUltraMsgChangeList = function (serverData) {
        var list = serverData.list,
            syncTime = serverData.syncTime,
            hasNext = serverData.hasNext;
        var newList = list && list.map(function (item) {
          var targetId = item.targetId,
              type = item.type,
              time = item.time,
              changeType = item.changeType,
              msgUID = item.msgUID,
              msgTime = item.msgTime,
              busChannel = item.busChannel,
              isAdmin = item.isAdmin,
              isDel = item.isDel,
              operatorId = item.operatorId;
          return {
            targetId: targetId,
            conversationType: type,
            changeType: changeType,
            messageUId: msgUID,
            changeTime: int64ToTimestamp(time),
            sendTime: int64ToTimestamp(msgTime),
            channelId: busChannel,
            isAdmin: isAdmin,
            isDel: isDel,
            operatorId: operatorId
          };
        });
        return {
          syncTime: syncTime,
          list: newList,
          hasNext: hasNext
        };
      };

      DataCodec.prototype._formatUltraOperateStatusNotifyList = function (serverData) {
        var conversationType = serverData.type,
            notifyType = serverData.notifyType,
            info = serverData.info,
            summary = serverData.summary;
        var infos = [];
        var summarys = [];
        var hasSummary = (notifyType & 0x02) === 2;
        var hasInfo = (notifyType & 0x01) === 1;

        if (hasInfo) {
          Array.isArray(info) && info.forEach(function (item) {
            var targetId = item.targetId,
                channelId = item.busChannel,
                userId = item.userId,
                operationType = item.opType,
                optime = item.optime;
            var operationTime = int64ToTimestamp(optime);
            infos.push({
              targetId: targetId,
              channelId: channelId,
              userId: userId,
              operationType: operationType,
              operationTime: operationTime
            });
          });
        }

        if (hasSummary) {
          Array.isArray(summary) && summary.forEach(function (item) {
            var targetId = item.targetId,
                channelId = item.busChannel,
                count = item.count,
                operationType = item.opType;
            summarys.push({
              targetId: targetId,
              channelId: channelId,
              count: count,
              operationType: operationType
            });
          });
        }

        return {
          conversationType: conversationType,
          info: infos,
          summary: summarys,
          hasInfo: hasInfo,
          hasSummary: hasSummary
        };
      };

      DataCodec.prototype._formatUltraMsgList = function (serverData, option) {
        var _this = this;

        var list = serverData.list;
        var newList = list && list.map(function (item) {
          return _this._formatReceivedMessage(item, option);
        });
        return {
          list: newList
        };
      };

      DataCodec.prototype._formatConversationList = function (serverData, option) {
        var self = this;
        var conversationList = serverData.info;

        var afterDecode = option.afterDecode || function () {};

        conversationList = map(conversationList, function (serverConversation) {
          var msg = serverConversation.msg,
              userId = serverConversation.userId,
              type = serverConversation.type,
              unreadCount = serverConversation.unreadCount,
              busChannel = serverConversation.busChannel,
              versionTime = serverConversation.versionTime,
              remindCount = serverConversation.remindCount;
          var latestMessage = null;

          if (msg) {
            latestMessage = self._formatReceivedMessage(msg, option);
            latestMessage.targetId = userId;
          }

          var conversation = {
            targetId: userId,
            conversationType: type,
            unreadMessageCount: int64ToTimestamp(unreadCount) || 0,
            latestMessage: latestMessage || {},
            channelId: busChannel || ''
          };

          if (type === ConversationType$1.ULTRA_GROUP) {
            conversation.versionTime = int64ToTimestamp(versionTime) || 0;
            conversation.unreadMentionedCount = int64ToTimestamp(remindCount) || 0;
          }

          return afterDecode(conversation) || conversation;
        });
        var result = {
          list: conversationList
        };
        var conversationType = (option === null || option === void 0 ? void 0 : option.conversationType) || ConversationType$1.NONE;
        if (conversationType === ConversationType$1.ULTRA_GROUP) result.isFinished = serverData.isFinished;
        return result;
      };

      DataCodec.prototype._formatSetUserSettingOutput = function (serverData) {
        return serverData;
      };

      DataCodec.prototype._formatChatRoomInfos = function (data) {
        var userTotalNums = data.userTotalNums,
            userInfos = data.userInfos;
        var chrmInfos = map(userInfos, function (user) {
          var id = user.id,
              time = user.time;
          var timestamp = int64ToTimestamp(time);
          return {
            id: id,
            time: timestamp
          };
        });
        return {
          userCount: userTotalNums,
          userInfos: chrmInfos
        };
      };

      DataCodec.prototype._formatChatRoomKVList = function (data) {
        var kvEntries = data.entries,
            isFullUpdate = data.bFullUpdate,
            syncTime = data.syncTime;
        kvEntries = kvEntries || [];
        kvEntries = map(kvEntries, function (kv) {
          var key = kv.key,
              value = kv.value,
              status = kv.status,
              timestamp = kv.timestamp,
              uid = kv.uid,
              version = kv.version;

          var _a = getChatRoomKVByStatus(status),
              isAutoDelete = _a.isAutoDelete,
              isOverwrite = _a.isOverwrite,
              type = _a.type;

          return {
            key: key,
            value: value,
            isAutoDelete: isAutoDelete,
            isOverwrite: isOverwrite,
            type: type,
            userId: uid,
            timestamp: int64ToTimestamp(timestamp),
            version: int64ToTimestamp(version)
          };
        });
        return {
          kvEntries: kvEntries,
          isFullUpdate: isFullUpdate,
          syncTime: syncTime
        };
      };

      DataCodec.prototype._formatUserSetting = function (data) {
        var _this = this;

        var items = data.items,
            version = data.version;
        var settings = {};
        forEach$1(items || [], function (setting) {
          var key = setting.key,
              version = setting.version,
              value = setting.value;
          setting.version = int64ToTimestamp(version);
          setting.value = _this._readBytes(value);

          if (key === 'Tag') {
            setting.tags.forEach(function (tag) {
              tag.createdTime = int64ToTimestamp(tag.createdTime);
              tag.tagName = tag.name;
            });
          }

          settings[key] = setting;
        });
        return {
          settings: settings,
          version: version
        };
      };

      DataCodec.prototype._formatConversationStatus = function (data) {
        var stateList = data.state;
        var statusList = [];
        forEach$1(stateList, function (session) {
          var type = session.type,
              targetId = session.channelId,
              updatedTime = session.time,
              stateItem = session.stateItem,
              busChannel = session.busChannel;
          var notificationStatus = NotificationStatus$1.CLOSE;
          var notificationLevel = NotificationLevel$1.NOT_SET;
          var isTop = false;
          var tags = [];
          forEach$1(stateItem, function (item) {
            var sessionStateType = item.sessionStateType,
                value = item.value,
                _tags = item.tags;

            switch (sessionStateType) {
              case ConversationStatusType.DO_NOT_DISTURB:
                notificationStatus = value === ConversationStatusConfig.ENABLED ? NotificationStatus$1.OPEN : NotificationStatus$1.CLOSE;
                notificationLevel = Number(value) || NotificationLevel$1.NOT_SET;
                break;

              case ConversationStatusType.TOP:
                isTop = value === ConversationStatusConfig.ENABLED;
                break;

              case ConversationStatusType.TAGS:
                tags = _tags;
                break;
            }
          });
          statusList.push({
            conversationType: type,
            type: type,
            targetId: targetId,
            notificationStatus: notificationStatus,
            notificationLevel: notificationLevel,
            isTop: isTop,
            updatedTime: int64ToTimestamp(updatedTime),
            tags: tags,
            channelId: busChannel || ''
          });
        });
        return statusList;
      };

      DataCodec.prototype._formatRTCUserList = function (rtcInfos) {
        var list = rtcInfos.users,
            token = rtcInfos.token,
            sessionId = rtcInfos.sessionId,
            roomInfo = rtcInfos.roomInfo,
            entries = rtcInfos.entries;
        var users = {};
        forEach$1(list, function (item) {
          var userId = item.userId,
              userData = item.userData;
          var tmpData = {};
          forEach$1(userData, function (data) {
            var key = data.key,
                value = data.value;
            tmpData[key] = value;
          });
          users[userId] = tmpData;
        });
        return {
          users: users,
          token: token,
          sessionId: sessionId,
          roomInfo: roomInfo,
          kvEntries: entries
        };
      };

      DataCodec.prototype._formatRTCData = function (data) {
        var list = data.outInfo;
        var props = {};
        forEach$1(list, function (item) {
          props[item.key] = item.value;
        });
        return props;
      };

      DataCodec.prototype._formatRTCRoomInfo = function (data) {
        var id = data.roomId,
            total = data.userCount,
            roomData = data.roomData;
        var room = {
          id: id,
          total: total
        };
        forEach$1(roomData, function (data) {
          room[data.key] = data.value;
        });
        return room;
      };

      DataCodec.prototype._formatGrpReadReceiptQryResp = function (data) {
        var totalMemberNum = data.totalMemberNum,
            list = data.list;
        list.forEach(function (item) {
          item.readTime = int64ToTimestamp(item.readTime);
        });
        return {
          totalMemberCount: totalMemberNum,
          list: list
        };
      };

      DataCodec.prototype._formatUserSettingNotification = function (data) {
        return data;
      };

      DataCodec.prototype._formatRTCRoomKVList = function (data) {
        var kvEntries = data.entries,
            isFullUpdate = data.bFullUpdate,
            syncTime = data.syncTime;
        kvEntries = kvEntries || [];
        kvEntries = kvEntries.map(function (entry) {
          var timestamp = entry.timestamp;
          return Object.assign(entry, {
            timestamp: int64ToTimestamp(timestamp)
          });
        });
        return {
          kvEntries: kvEntries,
          isFullUpdate: isFullUpdate,
          syncTime: syncTime
        };
      };

      DataCodec.prototype._formatChrmKVVersion = function (data) {
        return data;
      };

      DataCodec.prototype._formatRTCAuidenceJoinRoomData = function (data) {
        return data;
      };

      DataCodec.prototype._formatRTCJoinedUserInfo = function (data) {
        return (data.info || []).map(function (item) {
          return {
            deviceId: item.deviceId,
            roomId: item.roomId,
            joinTime: int64ToTimestamp(item.joinTime)
          };
        });
      };

      DataCodec.prototype.encodeServerConfParams = function () {
        var modules = this._codec.getModule(PBName.SessionsAttQryInput);

        modules.setNothing(1);
        return modules.getArrayData();
      };

      DataCodec.prototype._getUpMsgModule = function (conversation, option) {
        var _a, _b, _c;

        var isComet = this._connectType === 'comet';
        var type = conversation.conversationType;
        var messageType = option.messageType,
            isMentioned = option.isMentioned,
            mentionedType = option.mentionedType,
            mentionedUserIdList = option.mentionedUserIdList,
            content = option.content,
            pushContent = option.pushContent,
            pushData = option.pushData,
            directionalUserIdList = option.directionalUserIdList,
            isFilerWhiteBlacklist = option.isFilerWhiteBlacklist,
            isVoipPush = option.isVoipPush,
            canIncludeExpansion = option.canIncludeExpansion,
            expansion = option.expansion,
            pushConfig = option.pushConfig,
            channelId = option.channelId;
        [ConversationType$1.GROUP, ConversationType$1.ULTRA_GROUP].includes(type);

        var modules = this._codec.getModule(PBName.UpStreamMessage);

        var sessionId = getSessionId(option);

        var _d = pushConfig || {},
            pushTitle = _d.pushTitle,
            newPushContent = _d.pushContent,
            newPushData = _d.pushData,
            iOSConfig = _d.iOSConfig,
            androidConfig = _d.androidConfig,
            templateId = _d.templateId,
            disablePushTitle = _d.disablePushTitle,
            forceShowDetailContent = _d.forceShowDetailContent;

        var flag = 0;
        modules.setSessionId(sessionId);

        if (isMentioned && content) {
          content.mentionedInfo = {
            userIdList: ((_a = content.mentionedInfo) === null || _a === void 0 ? void 0 : _a.userIdList) || mentionedUserIdList || [],
            type: ((_b = content.mentionedInfo) === null || _b === void 0 ? void 0 : _b.type) || mentionedType || MentionedType$1.ALL,
            mentionedContent: ((_c = content.mentionedInfo) === null || _c === void 0 ? void 0 : _c.mentionedContent) || ''
          };
        }

        var _pushContent = newPushContent || pushContent || '';

        var _pushData = newPushData || pushData || '';

        _pushContent && modules.setPushText(_pushContent);
        _pushData && modules.setAppData(_pushData);
        directionalUserIdList && modules.setUserId(directionalUserIdList);
        flag |= isVoipPush ? 0x01 : 0;
        flag |= isFilerWhiteBlacklist ? 0x02 : 0;
        flag |= disablePushTitle ? 0x04 : 0;
        flag |= forceShowDetailContent ? 0x08 : 0;
        modules.setConfigFlag(flag);
        modules.setClassname(messageType);

        if (content.user && content.user.portraitUri) {
          content.user.portrait = content.user.portraitUri;
        }

        modules.setContent(JSON.stringify(content));

        if (canIncludeExpansion && expansion) {
          var extraContent_1 = {};
          forEach$1(expansion, function (val, key) {
            extraContent_1[key] = {
              v: val
            };
          });
          modules.setExtraContent(JSON.stringify(extraContent_1));
        }

        if (pushConfig) {
          var pushExtraModule = this._codec.getModule(PBName.PushExtra);

          pushTitle && pushExtraModule.setTitle(pushTitle);

          if (iOSConfig && androidConfig) {
            var pushConfigStr = pushConfigsToJSON(iOSConfig, androidConfig);
            pushExtraModule.setPushConfigs(pushConfigStr);
          }

          (androidConfig === null || androidConfig === void 0 ? void 0 : androidConfig.notificationId) && pushExtraModule.setPushId(androidConfig === null || androidConfig === void 0 ? void 0 : androidConfig.notificationId);
          pushExtraModule.setTemplateId(templateId || '');
          modules.setPushExt(isComet ? pushExtraModule.getArrayData() : pushExtraModule);
        }

        isUndefined(channelId) || modules.setBusChannel(channelId);
        return modules;
      };

      DataCodec.prototype.encodeUpMsg = function (conversation, option) {
        var modules = this._getUpMsgModule(conversation, option);

        return modules.getArrayData();
      };

      DataCodec.prototype.encodeSyncMsg = function (syncMsgArgs) {
        var sendboxTime = syncMsgArgs.sendboxTime,
            inboxTime = syncMsgArgs.inboxTime,
            broadcastSyncTime = syncMsgArgs.broadcastSyncTime;

        var modules = this._codec.getModule(PBName.SyncRequestMsg);

        modules.setIspolling(false);
        modules.setIsPullSend(true);
        modules.setSendBoxSyncTime(sendboxTime);
        modules.setSyncTime(inboxTime);
        modules.setBroadcastSyncTime(broadcastSyncTime);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeChrmSyncMsg = function (time, count) {
        time = time || 0;
        count = count || 0;

        var modules = this._codec.getModule(PBName.ChrmPullMsg);

        modules.setCount(count);
        modules.setSyncTime(time);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeGetHistoryMsg = function (targetId, option) {
        var count = option.count,
            order = option.order,
            timestamp = option.timestamp,
            channelId = option.channelId;

        var modules = this._codec.getModule(PBName.HistoryMsgInput);

        modules.setTargetId(targetId);
        modules.setTime(timestamp);
        modules.setCount(count);
        modules.setOrder(order);
        modules.setBusChannel(channelId || '');
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeSuperSyncMsg = function (syncTime) {
        var modules = this._codec.getModule(PBName.UltraGrpPullMsg);

        modules.setSyncTime(syncTime);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeGetConversationList = function (option) {
        option = option || {};
        var count = option.count,
            startTime = option.startTime;

        var modules = this._codec.getModule(PBName.RelationQryInput);

        modules.setType(1);
        modules.setCount(count);
        modules.setStartTime(startTime);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeOldConversationList = function (option) {
        option = option || {};
        var count = option.count,
            type = option.type,
            startTime = option.startTime,
            order = option.order;
        count = count || 0;
        startTime = startTime || 0;
        order = order || 0;

        var modules = this._codec.getModule(PBName.RelationQryInput);

        modules.setType(type);
        modules.setCount(count);
        modules.setStartTime(startTime);
        modules.setOrder(order);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeRemoveOldConversationList = function (conversation) {
        conversation = conversation || {};
        var conversationType = conversation.conversationType,
            channelId = conversation.channelId;

        var modules = this._codec.getModule(PBName.RelationsInput);

        modules.setType(conversationType);

        if (channelId) {
          modules.setBusChannel([channelId]);
        }

        return modules.getArrayData();
      };

      DataCodec.prototype.encodeRemoveConversationList = function (conversationList) {
        var _this = this;

        var modules = this._codec.getModule(PBName.DeleteSessionsInput);

        var sessions = [];
        forEach$1(conversationList, function (conversation) {
          var type = conversation.conversationType,
              targetId = conversation.targetId;

          var session = _this._codec.getModule(PBName.SessionInfo);

          session.setType(type);
          session.setChannelId(targetId);
          sessions.push(session);
        });
        modules.setSessions(sessions);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeDeleteMessages = function (conversationType, targetId, list, channelId) {
        var modules = this._codec.getModule(PBName.DeleteMsgInput);

        var encodeMsgs = [];
        forEach$1(list, function (message) {
          encodeMsgs.push({
            msgId: message.messageUId,
            msgDataTime: message.sentTime,
            direct: message.messageDirection
          });
        });
        modules.setType(conversationType);
        modules.setConversationId(targetId);
        modules.setMsgs(encodeMsgs);
        modules.setBusChannel(channelId);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeClearMessages = function (targetId, timestamp, channelId, conversationType) {
        var modules = this._codec.getModule(PBName.CleanHisMsgInput);

        timestamp = timestamp || new Date().getTime();
        modules.setDataTime(timestamp);
        modules.setTargetId(targetId);
        modules.setBusChannel(channelId);
        modules.setConversationType(conversationType);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeClearUnreadCount = function (conversation, option) {
        var type = conversation.conversationType,
            targetId = conversation.targetId,
            channelId = conversation.channelId;
        var timestamp = option.timestamp;

        var modules = this._codec.getModule(PBName.SessionMsgReadInput);

        timestamp = timestamp || +new Date();
        modules.setType(type);
        modules.setChannelId(targetId);
        modules.setMsgTime(timestamp);
        modules.setBusChannel(channelId);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeExpandUltraMessage = function (option, userId) {
        var targetId = option.targetId,
            type = option.conversationType,
            busChannel = option.channelId,
            msgUID = option.messageUId,
            msgTime = option.sendTime,
            keys = option.keys,
            expansion = option.expansion,
            removeAll = option.removeAll;
        var content = {
          mid: msgUID,
          put: expansion,
          del: keys,
          clear: removeAll ? 1 : 0
        };

        var modules = this._codec.getModule(PBName.MsgChangeReq);

        modules.setFromUserId(userId);
        modules.setTargetId(targetId);
        modules.setType(type);
        modules.setBusChannel(busChannel || '');
        modules.setMsgUID(msgUID);
        modules.setMsgTime(msgTime);
        modules.setContent(JSON.stringify(content));
        return modules.getArrayData();
      };

      DataCodec.prototype.encodemodifyMessage = function (option, userId) {
        var targetId = option.targetId,
            type = option.conversationType,
            busChannel = option.channelId,
            msgUID = option.messageUId,
            msgTime = option.sendTime,
            content = option.content;

        var modules = this._codec.getModule(PBName.MsgChangeReq);

        modules.setFromUserId(userId);
        modules.setTargetId(targetId);
        modules.setType(type);
        modules.setBusChannel(busChannel || '');
        modules.setMsgUID(msgUID);
        modules.setMsgTime(msgTime);
        modules.setContent(JSON.stringify(content));
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeQueryMsgChange = function (time) {
        var modules = this._codec.getModule(PBName.QueryMsgChange);

        modules.setSyncTime(time);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeMsgQuery = function (option) {
        var targetId = option.targetId,
            type = option.conversationType,
            messages = option.messages;

        var modules = this._codec.getModule(PBName.MsgQuery);

        var query = messages.map(function (item) {
          var sendTime = item.sendTime,
              messageUId = item.messageUId,
              channelId = item.channelId;
          return {
            msgTime: sendTime,
            msgUID: messageUId,
            busChannel: channelId
          };
        });
        modules.setTargetId(targetId);
        modules.setType(type);
        modules.setQuery(query);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeOperateStatus = function (targetId, conversationType, channelId, operationType) {
        var modules = this._codec.getModule(PBName.OperateStatus);

        modules.setTargetId(targetId);
        modules.setType(conversationType);
        modules.setBusChannel(channelId);
        modules.setOpType(operationType);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeJoinOrQuitChatRoom = function () {
        var modules = this._codec.getModule(PBName.ChrmInput);

        modules.setNothing(1);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeGetChatRoomInfo = function (count, order) {
        var modules = this._codec.getModule(PBName.QueryChatRoomInfoInput);

        modules.setCount(count);
        modules.setOrder(order);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeSetUltraGroupDefaultNotificationLevel = function (notificationLevel, channelId) {
        var modules = this._codec.getModule(PBName.GroupUnpushSet);

        modules.setUnpushLevel(notificationLevel);
        modules.setBusChannel(channelId);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeGetUltraGroupDefaultNotificationLevel = function (channelId) {
        var modules = this._codec.getModule(PBName.GroupUnpushQuery);

        modules.setBusChannel(channelId);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeGetFileToken = function (fileType, fileName, httpMethod, queryString) {
        var modules = this._codec.getModule(PBName.GetQNupTokenInput);

        modules.setType(fileType);
        modules.setKey(fileName);
        modules.setHttpMethod(httpMethod);
        modules.setQueryString(queryString);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeGetFileUrl = function (inputPBName, fileType, fileName, originName) {
        var modules = this._codec.getModule(inputPBName);

        modules.setType(fileType);
        modules.setKey(fileName);

        if (originName) {
          modules.setFileName(originName);
        }

        return modules.getArrayData();
      };

      DataCodec.prototype.encodeModifyChatRoomKV = function (chrmId, entry, currentUserId) {
        var isComet = this._connectType === 'comet';

        var modules = this._codec.getModule(PBName.SetChrmKV);

        var key = entry.key,
            value = entry.value,
            extra = entry.notificationExtra,
            isSendNotification = entry.isSendNotification,
            type = entry.type,
            timestamp = entry.timestamp;
        var action = type || ChatroomEntryType$1.UPDATE;
        var status = getChatRoomKVOptStatus(entry, action);
        var serverEntry = {
          key: key,
          value: value || '',
          uid: currentUserId,
          version: timestamp
        };

        if (!isUndefined(status)) {
          serverEntry.status = status;
        }

        modules.setEntry(serverEntry);

        if (isSendNotification) {
          var conversation = {
            conversationType: ConversationType$1.CHATROOM,
            targetId: chrmId
          };
          var msgContent = {
            key: key,
            value: value,
            extra: extra,
            type: action
          };

          var msgModule = this._getUpMsgModule(conversation, {
            messageType: MessageType$2.CHRM_KV_NOTIFY,
            content: msgContent,
            isPersited: false,
            isCounted: false
          });

          isComet ? modules.setNotification(msgModule.getArrayData()) : modules.setNotification(msgModule);
          modules.setBNotify(true);
          modules.setType(ConversationType$1.CHATROOM);
        }

        return modules.getArrayData();
      };

      DataCodec.prototype.encodeModifyChatRoomKVS = function (chrmId, entryOptions, currentUserId) {
        this._connectType === 'comet';

        var modules = this._codec.getModule(PBName.SetChrmKVS);

        var entries = entryOptions.entries,
            type = entryOptions.type;
        var action = type || ChatroomEntryType$1.UPDATE;
        var status = getChatRoomKVOptStatus(entryOptions, action);
        var serverEntries = [];
        entries.forEach(function (one) {
          var serverEntry = {
            key: one.key,
            value: one.value || '',
            uid: currentUserId,
            version: one.timestamp
          };

          if (!isUndefined(status)) {
            serverEntry.status = status;
          }

          serverEntries.push(serverEntry);
        });
        modules.setEntry(serverEntries);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodePullChatRoomKV = function (time) {
        var modules = this._codec.getModule(PBName.QueryChrmKV);

        modules.setTimestamp(time);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodePullUserSetting = function (version) {
        var modules = this._codec.getModule(PBName.PullUserSettingInput);

        modules.setVersion(version);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeGetConversationStatus = function (time) {
        var modules = this._codec.getModule(PBName.SessionReq);

        modules.setTime(time);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeSetConversationStatus = function (statusList) {
        var _this = this;

        var isComet = this._connectType === 'comet';

        var modules = this._codec.getModule(PBName.SessionStateModifyReq);

        var currentTime = DelayTimer.getTime();
        var stateModuleList = [];
        forEach$1(statusList, function (status) {
          var stateModules = _this._codec.getModule(PBName.SessionState);

          var type = status.conversationType,
              targetId = status.targetId,
              notificationStatus = status.notificationStatus,
              isTop = status.isTop,
              channelId = status.channelId,
              notificationLevel = status.notificationLevel;
          var stateItemModuleList = [];
          stateModules.setType(type);
          stateModules.setChannelId(targetId);
          stateModules.setTime(currentTime);
          stateModules.setBusChannel(channelId);
          var isNotDisturb = notificationStatus === NotificationStatus$1.OPEN;
          var TypeToVal = {};

          if (!isUndefined(notificationStatus)) {
            TypeToVal[ConversationStatusType.DO_NOT_DISTURB] = isNotDisturb;
          }

          if (!isUndefined(notificationLevel)) {
            TypeToVal[ConversationStatusType.DO_NOT_DISTURB] = notificationLevel;
          }

          if (!isUndefined(isTop)) {
            TypeToVal[ConversationStatusType.TOP] = isTop;
          }

          forEach$1(TypeToVal, function (val, type) {
            if (!isUndefined(val)) {
              var stateItemModules = _this._codec.getModule(PBName.SessionStateItem);

              val = val ? ConversationStatusConfig.ENABLED : ConversationStatusConfig.DISABLED;

              if (!isUndefined(notificationLevel) && Number(type) === ConversationStatusType.DO_NOT_DISTURB) {
                val = String(notificationLevel);
              }

              stateItemModules.setSessionStateType(Number(type));
              stateItemModules.setValue(val);
              var stateItemModulesData = isComet ? stateItemModules.getArrayData() : stateItemModules;
              stateItemModuleList.push(stateItemModulesData);
            }
          });
          stateModules.setStateItem(stateItemModuleList);
          var stateModulesData = isComet ? stateModules.getArrayData() : stateModules;
          stateModuleList.push(stateModulesData);
        });
        modules.setVersion(currentTime);
        modules.setState(stateModuleList);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeReadReceipt = function (messageUIds, channelId) {
        var modules = this._codec.getModule(PBName.GrpReadReceiptMsg);

        modules.setMsgId(messageUIds);
        channelId && modules.setChannelId(channelId);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeCreateTag = function (tags, version) {
        var _this = this;

        var isComet = this._connectType === 'comet';

        var modules = this._codec.getModule(PBName.SessionTagAddInput);

        var itemListModules = [];
        tags.forEach(function (tag) {
          var itemModule = _this._codec.getModule(PBName.SessionTagItem);

          itemModule.setTagId(tag.tagId);
          itemModule.setName(tag.tagName);
          itemListModules.push(isComet ? itemModule.getArrayData() : itemModule);
        });
        modules.setTags(itemListModules);
        modules.setVersion(version);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeMessageReader = function (messageUId, channelId) {
        var modules = this._codec.getModule(PBName.GrpReadReceiptMsg);

        modules.setMsgId(messageUId);
        channelId && modules.setChannelId(channelId);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeRemoveTag = function (tagIds, version) {
        var _this = this;

        var isComet = this._connectType === 'comet';

        var modules = this._codec.getModule(PBName.SessionTagDelInput);

        var itemListModules = [];
        tagIds.forEach(function (tagId) {
          var itemModule = _this._codec.getModule(PBName.SessionTagItem);

          itemModule.setTagId(tagId);
          itemListModules.push(isComet ? itemModule.getArrayData() : itemModule);
        });
        modules.setTags(itemListModules);
        modules.setVersion(version);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeDisConversationTag = function (tagIds) {
        var modules = this._codec.getModule(PBName.SessionDisTagReq);

        modules.setTagId(tagIds);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeUpdateConversationTag = function (tags, conversations) {
        var _this = this;

        var isComet = this._connectType === 'comet';

        var modules = this._codec.getModule(PBName.SessionStateModifyReq);

        var sessionStateModule = [];
        conversations.forEach(function (_conversation) {
          var SessionState = _this._codec.getModule(PBName.SessionState);

          var SessionStateItem = _this._codec.getModule(PBName.SessionStateItem);

          var SessionTagItemModules = [];
          tags.forEach(function (tag) {
            var SessionTagItem = _this._codec.getModule(PBName.SessionTagItem);

            SessionTagItem.setTagId(tag.tagId);

            if (!isUndefined(tag.isTop)) {
              SessionTagItem.setIsTop(tag.isTop);
            }

            SessionTagItemModules.push(isComet ? SessionTagItem.getArrayData() : SessionTagItem);
          });
          SessionStateItem.setSessionStateType(ConversationStatusType.TAGS);
          SessionStateItem.setValue(JSON.stringify(SessionTagItemModules));
          SessionStateItem.setTags(SessionTagItemModules);
          SessionState.setType(_conversation.conversationType);
          SessionState.setChannelId(_conversation.targetId);
          SessionState.setTime(Date.now());
          SessionState.setStateItem([isComet ? SessionStateItem.getArrayData() : SessionStateItem]);
          sessionStateModule.push(isComet ? SessionState.getArrayData() : SessionState);
        });
        modules.setState(sessionStateModule);
        modules.setVersion(DelayTimer.getTime());
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeReportSDKInfo = function (info) {
        var modules = this._codec.getModule(PBName.ReportSDKInput);

        modules.setSdkInfo(info);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeUltraGroup = function (syncTime, isEraseMsgContent) {
        var modules = this._codec.getModule(PBName.UltraGrpPullSes);

        modules.setSyncTime(syncTime);
        modules.setIsEraseMsgContent(isEraseMsgContent);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeJoinRTCRoom = function (mode, broadcastType, joinType, innerUserDatas, outerUserDatas) {
        var _this = this;

        var isComet = this._connectType === 'comet';

        var modules = this._codec.getModule(PBName.RtcInput);

        mode = mode || 0;
        modules.setRoomType(mode);
        isUndefined(broadcastType) || modules.setBroadcastType(broadcastType);
        isUndefined(joinType) || modules.setJoinType(joinType);

        if (innerUserDatas) {
          var innerDataModule = [];

          var innerData = this._codec.getModule(PBName.RtcValueInfo);

          for (var key in innerUserDatas) {
            innerData.setKey(key);
            innerData.setValue(innerUserDatas[key]);
            isComet ? innerDataModule.push(innerData.getArrayData()) : innerDataModule.push(innerData);
          }

          modules.setInnerDatas(innerDataModule);
        }

        if (outerUserDatas) {
          var outerDataModule_1 = [];
          Object.keys(outerUserDatas).forEach(function (key) {
            var outerData = _this._codec.getModule(PBName.RtcValueInfo);

            outerData.setKey(key);
            outerData.setValue(outerUserDatas[key]);
            isComet ? outerDataModule_1.push(outerData.getArrayData()) : outerDataModule_1.push(outerData);
          });
          modules.setOuterDatas(outerDataModule_1);
        }

        return modules.getArrayData();
      };

      DataCodec.prototype.encodeQuitRTCRoom = function () {
        return this._codec.getModule(PBName.SetUserStatusInput).getArrayData();
      };

      DataCodec.prototype.encodeSetRTCData = function (key, value, isInner, apiType, message) {
        var modules = this._codec.getModule(PBName.RtcSetDataInput);

        modules.setInterior(isInner);
        modules.setTarget(apiType);
        modules.setKey(key);
        modules.setValue(value);

        if (message) {
          message.name && modules.setObjectName(message.name);
          var content = message.content;

          if (content) {
            if (isObject(content)) {
              content = JSON.stringify(content);
            }

            modules.setContent(content);
          }
        }

        return modules.getArrayData();
      };

      DataCodec.prototype.encodeUserSetRTCData = function (message, valueInfo, objectName, mcuValInfo) {
        var _this = this;

        var isComet = this._connectType === 'comet';

        var modules = this._codec.getModule(PBName.RtcUserSetDataInput);

        modules.setObjectName(objectName);

        var val = this._codec.getModule(PBName.RtcValueInfo);

        val.setKey(message.name);
        val.setValue(message.content);
        isComet ? modules.setContent(val.getArrayData()) : modules.setContent(val);
        var valInfoKeys = ['uris', 'mcu_uris'];
        var valInfosModule = [];
        valInfoKeys.forEach(function (item) {
          var valueInfoModule = _this._codec.getModule(PBName.RtcValueInfo);

          valueInfoModule.setKey(item);
          var value = item === 'uris' ? valueInfo : mcuValInfo;
          valueInfoModule.setValue(value);
          isComet ? valInfosModule.push(valueInfoModule.getArrayData()) : valInfosModule.push(valueInfoModule);
        });
        modules.setValueInfo(valInfosModule);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeUserSetRTCCDNUris = function (objectName, CDNUris) {
        this._connectType === 'comet';

        var modules = this._codec.getModule(PBName.RtcUserSetDataInput);

        modules.setObjectName(objectName);

        var val = this._codec.getModule(PBName.RtcValueInfo);

        val.setKey('cdn_uris');
        val.setValue(CDNUris);
        modules.setValueInfo(val);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeGetRTCData = function (keys, isInner, apiType) {
        var modules = this._codec.getModule(PBName.RtcDataInput);

        modules.setInterior(isInner);
        modules.setTarget(apiType);
        modules.setKey(keys);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeRemoveRTCData = function (keys, isInner, apiType, message) {
        var modules = this._codec.getModule(PBName.RtcDataInput);

        modules.setInterior(isInner);
        modules.setTarget(apiType);
        modules.setKey(keys);
        message = message || {};
        var name = message.name,
            content = message.content;
        !isUndefined(name) && modules.setObjectName(name);

        if (!isUndefined(content)) {
          if (isObject(content)) {
            content = JSON.stringify(content);
          }

          modules.setContent(content);
        }

        return modules.getArrayData();
      };

      DataCodec.prototype.encodeSetRTCOutData = function (data, type, message) {
        var modules = this._codec.getModule(PBName.RtcSetOutDataInput);

        modules.setTarget(type);

        if (!isArray(data)) {
          data = [data];
        }

        forEach$1(data, function (item, index) {
          item.key = item.key ? item.key.toString() : item.key;
          item.value = item.value ? item.value.toString() : item.value;
          data[index] = item;
        });
        modules.setValueInfo(data);
        message = message || {};
        var name = message.name,
            content = message.content;
        !isUndefined(name) && modules.setObjectName(name);

        if (!isUndefined(content)) {
          if (isObject(content)) {
            content = JSON.stringify(content);
          }

          modules.setContent(content);
        }

        return modules.getArrayData();
      };

      DataCodec.prototype.ecnodeGetRTCOutData = function (userIds) {
        var modules = this._codec.getModule(PBName.RtcQryUserOutDataInput);

        modules.setUserId(userIds);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeSetRTCState = function (report) {
        var modules = this._codec.getModule(PBName.MCFollowInput);

        modules.setState(report);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeGetRTCRoomInfo = function () {
        var modules = this._codec.getModule(PBName.RtcQueryListInput);

        modules.setOrder(2);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeSetRTCUserInfo = function (key, value) {
        var modules = this._codec.getModule(PBName.RtcValueInfo);

        modules.setKey(key);
        modules.setValue(value);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeRemoveRTCUserInfo = function (keys) {
        var modules = this._codec.getModule(PBName.RtcKeyDeleteInput);

        modules.setKey(keys);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeIdentityChangeInfo = function (changeType, broadcastType, needSyncChrm) {
        if (needSyncChrm === void 0) {
          needSyncChrm = false;
        }

        var modules = this._codec.getModule(PBName.RtcInput);

        modules.setRoomType(RTCMode.LIVE);
        broadcastType && modules.setBroadcastType(broadcastType);
        modules.setIdentityChangeType(changeType);
        modules.setNeedSysChatroom(needSyncChrm);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodePullRTCRoomKV = function (roomId, timestamp) {
        var modules = this._codec.getModule(PBName.RtcPullKV);

        modules.setTimestamp(timestamp);
        modules.setRoomId(roomId);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeQueryUserJoinedInfo = function (userId) {
        var modules = this._codec.getModule(PBName.RtcQueryUserJoinedInput);

        modules.setUserId(userId);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeRequestRoomPK = function (options) {
        var invitedRoomId = options.invitedRoomId,
            invitedUserId = options.invitedUserId,
            inviteSessionId = options.inviteSessionId,
            inviteTimeout = options.inviteTimeout,
            inviteInfo = options.inviteInfo;

        var modules = this._codec.getModule(PBName.RtcInviteInput);

        modules.setInvitedRoomId(invitedRoomId);
        modules.setInvitedUserId(invitedUserId);
        modules.setInviteSessionId(inviteSessionId);
        modules.setTimeoutTime(inviteTimeout);
        modules.setInviteInfo(inviteInfo);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeCancelRoomPK = function (options) {
        var invitedRoomId = options.invitedRoomId,
            invitedUserId = options.invitedUserId,
            inviteSessionId = options.inviteSessionId,
            inviteInfo = options.inviteInfo;

        var modules = this._codec.getModule(PBName.RtcCancelInviteInput);

        modules.setInvitedRoomId(invitedRoomId);
        modules.setInvitedUserId(invitedUserId);
        modules.setInviteSessionId(inviteSessionId);
        modules.setInviteInfo(inviteInfo);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeResponseRoomPK = function (options) {
        var inviteUserId = options.inviteUserId,
            inviteRoomId = options.inviteRoomId,
            inviteSessionId = options.inviteSessionId,
            content = options.content,
            key = options.key,
            value = options.value,
            agree = options.agree;
        var answerCode = agree ? 1 : 0;

        var modules = this._codec.getModule(PBName.RtcInviteAnswerInput);

        modules.setInviteUserId(inviteUserId);
        modules.setInviteRoomId(inviteRoomId);
        modules.setInviteSessionId(inviteSessionId);
        modules.setContent(content);
        modules.setKey(key);
        modules.setValue(value);
        modules.setAnswerCode(answerCode);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodeEndRoomPK = function (options) {
        var endRoomId = options.endRoomId,
            sessionId = options.sessionId,
            content = options.content,
            keys = options.keys;

        var modules = this._codec.getModule(PBName.RtcEndInviteInput);

        modules.setInviteRoomId(endRoomId);
        modules.setInviteSessionId(sessionId);
        modules.setInviteContent(content);
        modules.setInviteRoomKeys(keys);
        return modules.getArrayData();
      };

      DataCodec.prototype.encodebindRTCRoomForChatroom = function (options) {
        var modules = this._codec.getModule(PBName.SetRtcRoomIdInput);

        modules.setRtcRoomId(options.rtcRoomId);
        return modules.getArrayData();
      };

      return DataCodec;
    }();

    var ADataChannel = function () {
      function ADataChannel(type, _watcher) {
        this._watcher = _watcher;
        this.codec = new DataCodec(type);
      }

      return ADataChannel;
    }();

    var HttpMethod;

    (function (HttpMethod) {
      HttpMethod["GET"] = "GET";
      HttpMethod["POST"] = "POST";
    })(HttpMethod || (HttpMethod = {}));

    var NetworkType;

    (function (NetworkType) {
      NetworkType["WIFI"] = "wifi";
      NetworkType["FOUR_G"] = "4g";
      NetworkType["THREE_G"] = "3g";
      NetworkType["TWO_G"] = "2g";
      NetworkType["FIVE_G"] = "2g";
      NetworkType["THREE_GENT"] = "3gnet";
      NetworkType["UNKONWN"] = "unknown";
    })(NetworkType || (NetworkType = {}));

    var getIdentifier = function getIdentifier(messageId, identifier) {
      if (messageId && identifier) {
        return identifier + '_' + messageId;
      } else if (messageId) {
        return messageId;
      } else {
        return Date.now();
      }
    };

    var BaseReader = function () {
      function BaseReader(header) {
        this.header = header;
        this._name = null;
        this.lengthSize = 0;
        this.messageId = 0;
        this.timestamp = 0;
        this.syncMsg = false;
        this.identifier = '';
      }

      BaseReader.prototype.getIdentifier = function () {
        var _a = this,
            messageId = _a.messageId,
            identifier = _a.identifier;

        return getIdentifier(messageId, identifier);
      };

      BaseReader.prototype.read = function (stream, length, protocolVer) {
        this.readMessage(stream, length, protocolVer);
      };

      BaseReader.prototype.readMessage = function (stream, length, protocolVer) {
        return {
          stream: stream,
          length: length
        };
      };

      return BaseReader;
    }();

    var BaseWriter = function () {
      function BaseWriter(headerType) {
        this.lengthSize = 0;
        this.messageId = 0;
        this.topic = '';
        this.targetId = '';
        this.identifier = '';
        this._header = new Header(headerType, false, QOS.AT_MOST_ONCE, false);
      }

      BaseWriter.prototype.getIdentifier = function () {
        var _a = this,
            messageId = _a.messageId,
            identifier = _a.identifier;

        return getIdentifier(messageId, identifier);
      };

      BaseWriter.prototype.write = function (stream) {
        var headerCode = this.getHeaderFlag();
        stream.write(headerCode);
        this.writeMessage(stream);
      };

      BaseWriter.prototype.setHeaderQos = function (qos) {
        this._header.qos = qos;
      };

      BaseWriter.prototype.getHeaderFlag = function () {
        return this._header.encode();
      };

      BaseWriter.prototype.getLengthSize = function () {
        return this.lengthSize;
      };

      BaseWriter.prototype.getBufferData = function () {
        var stream = new RongStreamWriter();
        this.write(stream);
        var val = stream.getBytesArray();
        var binary = new Int8Array(val);
        return binary;
      };

      BaseWriter.prototype.getCometData = function () {
        var data = this.data || {};
        return JSON.stringify(data);
      };

      return BaseWriter;
    }();

    var ConnAckReader = function (_super) {
      __extends(ConnAckReader, _super);

      function ConnAckReader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this._name = MessageName.CONN_ACK;
        _this.status = null;
        _this.userId = null;
        _this.timestamp = 0;
        return _this;
      }

      ConnAckReader.prototype.readMessage = function (stream, length, protocolVer) {
        stream.readByte();
        this.status = +stream.readByte();

        if (length <= ConnAckReader.MESSAGE_LENGTH) {
          return {
            stream: stream,
            length: length
          };
        }

        if (protocolVer === ConnAckProtocolVer.V4) {
          var flag = stream.readByte();

          if (flag & 0x01) {
            this.userId = stream.readUTF();
          }

          if (flag & 0x02) {
            stream.readUTF();
          }

          if (flag & 0x04) {
            this.timestamp = stream.readLong();
          }

          if (flag & 0x08) {
            this.messageId = stream.read2Byte();
          }
        } else {
          this.userId = stream.readUTF();
          var sessionId = stream.readUTF();
          logger$1.debug('server sessionId -> ' + sessionId);
          this.timestamp = stream.readLong();
        }

        return {
          stream: stream,
          length: length
        };
      };

      ConnAckReader.MESSAGE_LENGTH = 2;
      return ConnAckReader;
    }(BaseReader);

    var DisconnectReader = function (_super) {
      __extends(DisconnectReader, _super);

      function DisconnectReader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this._name = MessageName.DISCONNECT;
        _this.status = 0;
        return _this;
      }

      DisconnectReader.prototype.readMessage = function (stream, length) {
        stream.readByte();
        this.status = +stream.readByte();
        return {
          stream: stream,
          length: length
        };
      };

      DisconnectReader.MESSAGE_LENGTH = 2;
      return DisconnectReader;
    }(BaseReader);

    var PingReqWriter = function (_super) {
      __extends(PingReqWriter, _super);

      function PingReqWriter() {
        var _this = _super.call(this, OperationType.PING_REQ) || this;

        _this._name = MessageName.PING_REQ;
        return _this;
      }

      PingReqWriter.prototype.writeMessage = function (stream) {};

      return PingReqWriter;
    }(BaseWriter);

    var PingRespReader = function (_super) {
      __extends(PingRespReader, _super);

      function PingRespReader(header) {
        var _this = _super.call(this, header) || this;

        _this._name = MessageName.PING_RESP;
        return _this;
      }

      return PingRespReader;
    }(BaseReader);

    var RetryableReader = function (_super) {
      __extends(RetryableReader, _super);

      function RetryableReader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this.messageId = 0;
        return _this;
      }

      RetryableReader.prototype.readMessage = function (stream, length) {
        var msgId = stream.readByte() * 256 + stream.readByte();
        this.messageId = parseInt(msgId.toString(), 10);
        return {
          stream: stream,
          length: length
        };
      };

      return RetryableReader;
    }(BaseReader);

    var RetryableWriter = function (_super) {
      __extends(RetryableWriter, _super);

      function RetryableWriter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this.messageId = 0;
        return _this;
      }

      RetryableWriter.prototype.writeMessage = function (stream) {
        var id = this.messageId;
        var lsb = id & 255;
        var msb = (id & 65280) >> 8;
        stream.write(msb);
        stream.write(lsb);
      };

      return RetryableWriter;
    }(BaseWriter);

    var PublishReader = function (_super) {
      __extends(PublishReader, _super);

      function PublishReader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this._name = MessageName.PUBLISH;
        _this.topic = '';
        _this.targetId = '';
        _this.syncMsg = false;
        _this.identifier = IDENTIFIER.PUB;
        return _this;
      }

      PublishReader.prototype.readMessage = function (stream, length) {
        this.date = stream.readInt();
        this.topic = stream.readUTF();
        this.targetId = stream.readUTF();

        _super.prototype.readMessage.call(this, stream, length);

        this.data = stream.readAll();
        return {
          stream: stream,
          length: length
        };
      };

      return PublishReader;
    }(RetryableReader);

    var PublishWriter = function (_super) {
      __extends(PublishWriter, _super);

      function PublishWriter(topic, data, targetId) {
        var _this = _super.call(this, OperationType.PUBLISH) || this;

        _this._name = MessageName.PUBLISH;
        _this.syncMsg = false;
        _this.identifier = IDENTIFIER.PUB;
        _this.topic = topic;
        _this.data = isString(data) ? BinaryHelper.writeUTF(data) : data;
        _this.targetId = targetId;
        return _this;
      }

      PublishWriter.prototype.writeMessage = function (stream) {
        stream.writeUTF(this.topic);
        stream.writeUTF(this.targetId);

        _super.prototype.writeMessage.call(this, stream);

        stream.write(this.data);
      };

      return PublishWriter;
    }(RetryableWriter);

    var PubAckReader = function (_super) {
      __extends(PubAckReader, _super);

      function PubAckReader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this._name = MessageName.PUB_ACK;
        _this.status = 0;
        _this.date = 0;
        _this.millisecond = 0;
        _this.messageUId = '';
        _this.timestamp = 0;
        _this.identifier = IDENTIFIER.PUB;
        _this.topic = '';
        _this.targetId = '';
        return _this;
      }

      PubAckReader.prototype.readMessage = function (stream, length) {
        _super.prototype.readMessage.call(this, stream, length);

        this.date = stream.readInt();
        this.status = stream.readByte() * 256 + stream.readByte();
        this.millisecond = stream.readByte() * 256 + stream.readByte();
        this.timestamp = this.date * 1000 + this.millisecond;
        this.messageUId = stream.readUTF();
        return {
          stream: stream,
          length: length
        };
      };

      return PubAckReader;
    }(RetryableReader);

    var PubAckWriter = function (_super) {
      __extends(PubAckWriter, _super);

      function PubAckWriter(messageId) {
        var _this = _super.call(this, OperationType.PUB_ACK) || this;

        _this._name = MessageName.PUB_ACK;
        _this.status = 0;
        _this.date = 0;
        _this.millisecond = 0;
        _this.messageUId = '';
        _this.timestamp = 0;
        _this.messageId = messageId;
        return _this;
      }

      PubAckWriter.prototype.writeMessage = function (stream) {
        _super.prototype.writeMessage.call(this, stream);
      };

      return PubAckWriter;
    }(RetryableWriter);

    var QueryWriter = function (_super) {
      __extends(QueryWriter, _super);

      function QueryWriter(topic, data, targetId) {
        var _this = _super.call(this, OperationType.QUERY) || this;

        _this.name = MessageName.QUERY;
        _this.identifier = IDENTIFIER.QUERY;
        _this.topic = topic;
        _this.data = isString(data) ? BinaryHelper.writeUTF(data) : data;
        _this.targetId = targetId;
        return _this;
      }

      QueryWriter.prototype.writeMessage = function (stream) {
        stream.writeUTF(this.topic);
        stream.writeUTF(this.targetId);

        _super.prototype.writeMessage.call(this, stream);

        stream.write(this.data);
      };

      return QueryWriter;
    }(RetryableWriter);

    var QueryConWriter = function (_super) {
      __extends(QueryConWriter, _super);

      function QueryConWriter(messageId) {
        var _this = _super.call(this, OperationType.QUERY_CONFIRM) || this;

        _this._name = MessageName.QUERY_CON;
        _this.messageId = messageId;
        return _this;
      }

      return QueryConWriter;
    }(RetryableWriter);

    var QueryAckReader = function (_super) {
      __extends(QueryAckReader, _super);

      function QueryAckReader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this._name = MessageName.QUERY_ACK;
        _this.status = 0;
        _this.identifier = IDENTIFIER.QUERY;
        _this.topic = '';
        _this.targetId = '';
        return _this;
      }

      QueryAckReader.prototype.readMessage = function (stream, length) {
        _super.prototype.readMessage.call(this, stream, length);

        this.date = stream.readInt();
        this.status = stream.readByte() * 256 + stream.readByte();
        this.data = stream.readAll();
        return {
          stream: stream,
          length: length
        };
      };

      return QueryAckReader;
    }(RetryableReader);

    var getReaderByHeader = function getReaderByHeader(header) {
      var type = header.type;
      var msg;

      switch (type) {
        case OperationType.CONN_ACK:
          msg = new ConnAckReader(header);
          break;

        case OperationType.PUBLISH:
          msg = new PublishReader(header);
          msg.syncMsg = header.syncMsg;
          break;

        case OperationType.PUB_ACK:
          msg = new PubAckReader(header);
          break;

        case OperationType.QUERY_ACK:
          msg = new QueryAckReader(header);
          break;

        case OperationType.SUB_ACK:
        case OperationType.UNSUB_ACK:
        case OperationType.PING_RESP:
          msg = new PingRespReader(header);
          break;

        case OperationType.DISCONNECT:
          msg = new DisconnectReader(header);
          break;

        default:
          msg = new BaseReader(header);
          logger$1.error('No support for deserializing ' + type + ' messages');
      }

      return msg;
    };

    var readWSBuffer = function readWSBuffer(data, protocolVer) {
      var arr = new Uint8Array(data);
      var stream = new RongStreamReader(arr);
      var flags = stream.readByte();
      var header = new Header(flags);
      var msg = getReaderByHeader(header);
      msg.read(stream, arr.length - 1, protocolVer);
      return msg;
    };
    var readCometData = function readCometData(data) {
      var flags = data.headerCode;
      var header = new Header(flags);
      var msg = getReaderByHeader(header);

      for (var key in data) {
        msg[key] = data[key];
      }

      return msg;
    };

    var Topic;

    (function (Topic) {
      Topic[Topic["ppMsgP"] = 1] = "ppMsgP";
      Topic[Topic["ppMsgN"] = 2] = "ppMsgN";
      Topic[Topic["ppMsgS"] = 3] = "ppMsgS";
      Topic[Topic["pgMsgP"] = 4] = "pgMsgP";
      Topic[Topic["chatMsg"] = 5] = "chatMsg";
      Topic[Topic["pcMsgP"] = 6] = "pcMsgP";
      Topic[Topic["qryPMsg"] = 7] = "qryPMsg";
      Topic[Topic["qryGMsg"] = 8] = "qryGMsg";
      Topic[Topic["qryCHMsg"] = 9] = "qryCHMsg";
      Topic[Topic["qryCMsg"] = 10] = "qryCMsg";
      Topic[Topic["qrySMsg"] = 11] = "qrySMsg";
      Topic[Topic["recallMsg"] = 12] = "recallMsg";
      Topic[Topic["prMsgS"] = 13] = "prMsgS";
      Topic[Topic["rrMsg"] = 14] = "rrMsg";
      Topic[Topic["rrList"] = 15] = "rrList";
      Topic[Topic["s_ntf"] = 16] = "s_ntf";
      Topic[Topic["s_msg"] = 17] = "s_msg";
      Topic[Topic["s_stat"] = 18] = "s_stat";
      Topic[Topic["s_cmd"] = 19] = "s_cmd";
      Topic[Topic["s_us"] = 20] = "s_us";
      Topic[Topic["pullUS"] = 21] = "pullUS";
      Topic[Topic["pgMsgS"] = 22] = "pgMsgS";
      Topic[Topic["chatMsgS"] = 23] = "chatMsgS";
      Topic[Topic["qrySessionsAtt"] = 24] = "qrySessionsAtt";
      Topic[Topic["pullMsg"] = 25] = "pullMsg";
      Topic[Topic["qrySessions"] = 26] = "qrySessions";
      Topic[Topic["delSessions"] = 27] = "delSessions";
      Topic[Topic["delMsg"] = 28] = "delMsg";
      Topic[Topic["updRRTime"] = 29] = "updRRTime";
      Topic[Topic["chrmPull"] = 30] = "chrmPull";
      Topic[Topic["joinChrm"] = 31] = "joinChrm";
      Topic[Topic["joinChrmR"] = 32] = "joinChrmR";
      Topic[Topic["exitChrm"] = 33] = "exitChrm";
      Topic[Topic["queryChrmI"] = 34] = "queryChrmI";
      Topic[Topic["setKV"] = 35] = "setKV";
      Topic[Topic["delKV"] = 36] = "delKV";
      Topic[Topic["pullKV"] = 37] = "pullKV";
      Topic[Topic["qryRelation"] = 38] = "qryRelation";
      Topic[Topic["delRelation"] = 39] = "delRelation";
      Topic[Topic["pullSeAtts"] = 40] = "pullSeAtts";
      Topic[Topic["setSeAtt"] = 41] = "setSeAtt";
      Topic[Topic["qnTkn"] = 42] = "qnTkn";
      Topic[Topic["qnUrl"] = 43] = "qnUrl";
      Topic[Topic["aliUrl"] = 44] = "aliUrl";
      Topic[Topic["s3Url"] = 45] = "s3Url";
      Topic[Topic["stcUrl"] = 46] = "stcUrl";
      Topic[Topic["cleanPMsg"] = 47] = "cleanPMsg";
      Topic[Topic["cleanGMsg"] = 48] = "cleanGMsg";
      Topic[Topic["cleanCMsg"] = 49] = "cleanCMsg";
      Topic[Topic["cleanSMsg"] = 50] = "cleanSMsg";
      Topic[Topic["rtcRJoin_data"] = 51] = "rtcRJoin_data";
      Topic[Topic["rtcRExit"] = 52] = "rtcRExit";
      Topic[Topic["rtcPing"] = 53] = "rtcPing";
      Topic[Topic["rtcSetData"] = 54] = "rtcSetData";
      Topic[Topic["rtc_ntf"] = 55] = "rtc_ntf";
      Topic[Topic["viewerJoinR"] = 56] = "viewerJoinR";
      Topic[Topic["viewerExitR"] = 57] = "viewerExitR";
      Topic[Topic["rtcPullKv"] = 58] = "rtcPullKv";
      Topic[Topic["rtcIdentityChange"] = 59] = "rtcIdentityChange";
      Topic[Topic["userSetData"] = 60] = "userSetData";
      Topic[Topic["rtcQryData"] = 61] = "rtcQryData";
      Topic[Topic["rtcDelData"] = 62] = "rtcDelData";
      Topic[Topic["rtcSetOutData"] = 63] = "rtcSetOutData";
      Topic[Topic["rtcQryUserOutData"] = 64] = "rtcQryUserOutData";
      Topic[Topic["rtcToken"] = 65] = "rtcToken";
      Topic[Topic["rtcUserState"] = 66] = "rtcUserState";
      Topic[Topic["rtcRInfo"] = 67] = "rtcRInfo";
      Topic[Topic["rtcUData"] = 68] = "rtcUData";
      Topic[Topic["rtcUPut"] = 69] = "rtcUPut";
      Topic[Topic["rtcUDel"] = 70] = "rtcUDel";
      Topic[Topic["rtcUList"] = 71] = "rtcUList";
      Topic[Topic["rtcQueryJoined"] = 72] = "rtcQueryJoined";
      Topic[Topic["rtcInvite"] = 73] = "rtcInvite";
      Topic[Topic["rtcCancelInvite"] = 74] = "rtcCancelInvite";
      Topic[Topic["rtcInviteAnswer"] = 75] = "rtcInviteAnswer";
      Topic[Topic["rtcEndInvite"] = 76] = "rtcEndInvite";
      Topic[Topic["addSeTag"] = 77] = "addSeTag";
      Topic[Topic["delSeTag"] = 78] = "delSeTag";
      Topic[Topic["addTag"] = 79] = "addTag";
      Topic[Topic["delTag"] = 80] = "delTag";
      Topic[Topic["disTag"] = 81] = "disTag";
      Topic[Topic["reportsdk"] = 82] = "reportsdk";
      Topic[Topic["pullUgSes"] = 83] = "pullUgSes";
      Topic[Topic["pullUgMsg"] = 84] = "pullUgMsg";
      Topic[Topic["ugMsg"] = 85] = "ugMsg";
      Topic[Topic["qryUgMsg"] = 86] = "qryUgMsg";
      Topic[Topic["updUgRTime"] = 87] = "updUgRTime";
      Topic[Topic["upMsgEx"] = 88] = "upMsgEx";
      Topic[Topic["modifyMsg"] = 89] = "modifyMsg";
      Topic[Topic["qryMsgChange"] = 90] = "qryMsgChange";
      Topic[Topic["qryMsg"] = 91] = "qryMsg";
      Topic[Topic["operate"] = 92] = "operate";
      Topic[Topic["s_opNtf"] = 93] = "s_opNtf";
      Topic[Topic["ugUnpushQuery"] = 94] = "ugUnpushQuery";
      Topic[Topic["ugUnpushSet"] = 95] = "ugUnpushSet";
      Topic[Topic["setRtcRoomId"] = 96] = "setRtcRoomId";
    })(Topic || (Topic = {}));

    var Topic$1 = Topic;

    var formatWSUrl = function formatWSUrl(protocol, host, appkey, token, runtime, apiVersion, pid, protocolVer) {
      return "".concat(protocol, "://").concat(host, "/websocket?appId=").concat(appkey, "&token=").concat(encodeURIComponent(token), "&sdkVer=").concat(apiVersion, "&pid=").concat(pid, "&apiVer=").concat(runtime.isFromUniapp ? 'uniapp' : 'normal').concat(runtime.connectPlatform ? '&platform=' + runtime.connectPlatform : '').concat(protocolVer ? '&protocolVer=' + protocolVer : '');
    };
    var isStatusMessage = function isStatusMessage(topic) {
      return [Topic$1.ppMsgS, Topic$1.pgMsgS, Topic$1.chatMsgS].map(function (item) {
        return Topic$1[item];
      }).indexOf(topic) >= 0;
    };

    var DisconnectReason;

    (function (DisconnectReason) {
      DisconnectReason[DisconnectReason["REDIRECT"] = 0] = "REDIRECT";
      DisconnectReason[DisconnectReason["OTHER_DEVICE_LOGIN"] = 1] = "OTHER_DEVICE_LOGIN";
      DisconnectReason[DisconnectReason["BLOCK"] = 2] = "BLOCK";
      DisconnectReason[DisconnectReason["REMOTE_CLOSE"] = 3] = "REMOTE_CLOSE";
      DisconnectReason[DisconnectReason["LOGOUT"] = 4] = "LOGOUT";
      DisconnectReason[DisconnectReason["BLOCK_NEW"] = 5] = "BLOCK_NEW";
      DisconnectReason[DisconnectReason["REDIRECT_NEW"] = 6] = "REDIRECT_NEW";
    })(DisconnectReason || (DisconnectReason = {}));

    var StatisticsTag;

    (function (StatisticsTag) {
      StatisticsTag["IM_NAVI"] = "IM-stats_navi-S";
      StatisticsTag["IM_WEBSOCKET"] = "IM-stats_websocket-S";
      StatisticsTag["IM_COMET"] = "IM-stats_comet-S";
      StatisticsTag["IM_CONNECTION_DURATION"] = "IM-stats_con_dur-S";
    })(StatisticsTag || (StatisticsTag = {}));

    var sendWSData = function sendWSData(writer, socket) {
      logger$1.info("websocket send -> messageId: ".concat(writer.messageId, " topic: ").concat(writer.topic));
      var binary = writer.getBufferData();
      socket.send(binary.buffer);
    };

    function uploadWSStatisData(runtime) {
      return __awaiter(this, void 0, void 0, function () {
        var tag, _a, sdkPrivate, serverPrivate, bundleId, _b, protocol, startTime, endTime, code, host, networkType, error_1, duration, serverContent;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              tag = StatisticsTag.IM_WEBSOCKET;
              _a = logger$1.getStatisticsBaseData(), sdkPrivate = _a.sdkPrivate, serverPrivate = _a.serverPrivate, bundleId = _a.bundleId;
              _b = logger$1.getStatisticsData(tag), protocol = _b.protocol, startTime = _b.startTime, endTime = _b.endTime, code = _b.code, host = _b.host;
              networkType = NetworkType.UNKONWN;
              _c.label = 1;

            case 1:
              _c.trys.push([1, 3,, 4]);

              return [4, runtime.getNetworkType()];

            case 2:
              networkType = _c.sent();
              return [3, 4];

            case 3:
              error_1 = _c.sent();
              logger$1.info(error_1.message);
              return [3, 4];

            case 4:
              duration = 0;

              if (isNumber(startTime) && isNumber(endTime) && endTime > startTime && startTime) {
                duration = endTime - startTime;
              }

              serverContent = {
                spr: sdkPrivate,
                pr: serverPrivate,
                bid: bundleId,
                ptc: protocol,
                dur: duration,
                cod: code,
                hos: host,
                net: networkType
              };
              logger$1.reportStatisticsLog(tag, serverContent);
              return [2];
          }
        });
      });
    }

    var WebSocketChannel = function (_super) {
      __extends(WebSocketChannel, _super);

      function WebSocketChannel(_runtime, watcher) {
        var _this = _super.call(this, 'websocket', watcher) || this;

        _this._runtime = _runtime;
        _this._socket = null;
        _this._messageIds = {};
        _this._syncMessageIds = {};
        _this._failedCount = 0;
        _this.ALLOW_FAILED_TIMES = 2;
        _this._timer = null;
        _this._idCount = 0;

        _this._generateMessageId = function () {
          if (_this._idCount >= 65535) {
            _this._idCount = 0;
          }

          return ++_this._idCount;
        };

        return _this;
      }

      WebSocketChannel.prototype.connect = function (appkey, token, hosts, protocol, apiVersion, protocolVer) {
        return __awaiter(this, void 0, void 0, function () {
          var _this = this;

          return __generator(this, function (_a) {
            return [2, new Promise(function (resolve) {
              var _hosts = hosts.slice();

              var isConnecting = false;

              var loopConnect = function loopConnect() {
                return __awaiter(_this, void 0, void 0, function () {
                  var host, code, statisticsCode;
                  return __generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        if (_hosts.length === 0 || isConnecting) {
                          return [2];
                        }

                        isConnecting = true;
                        host = _hosts.shift();
                        logger$1.setStatisticsData(StatisticsTag.IM_WEBSOCKET, {
                          startTime: new Date().getTime(),
                          host: host,
                          protocol: ProtocalType.WS
                        });
                        return [4, this._connect(appkey, token, host, protocol, apiVersion, protocolVer)];

                      case 1:
                        code = _a.sent();
                        statisticsCode = code === ErrorCode$1.SUCCESS || code === ConnectResultCode.REDIRECT ? code : formatConnectResponseCode(code);
                        logger$1.setStatisticsData(StatisticsTag.IM_WEBSOCKET, {
                          endTime: new Date().getTime(),
                          code: statisticsCode
                        });
                        uploadWSStatisData(this._runtime);

                        if (code === ErrorCode$1.SUCCESS) {
                          this._checkAlive();

                          resolve(code);
                        } else if (code === ConnectResultCode.REDIRECT) {
                          resolve(code);
                        } else {
                          if (_hosts.length === 0) {
                            resolve(formatConnectResponseCode(code));
                            return [2];
                          }

                          isConnecting = false;
                          loopConnect();
                        }

                        return [2];
                    }
                  });
                });
              };

              apiVersion = matchVersion(apiVersion);

              _this._watcher.status(ConnectionStatus$1.CONNECTING);

              loopConnect();
            })];
          });
        });
      };

      WebSocketChannel.prototype._connect = function (appkey, token, host, protocol, apiVersion, protocolVer) {
        return __awaiter(this, void 0, void 0, function () {
          var wsProtocol, url, socket, disconnected, code;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                wsProtocol = protocol.replace('http', 'ws');
                url = formatWSUrl(wsProtocol, host, appkey, token, this._runtime, apiVersion, '', protocolVer);
                logger$1.info("conenct start -> ".concat(url));
                this.sendConnectTime = Date.now();
                socket = this._runtime.createWebSocket(url);

                disconnected = function disconnected(code) {
                  if (_this._timer) {
                    clearTimeout(_this._timer);
                    _this._timer = null;
                  }

                  if (_this._socket === socket) {
                    _this._socket = null;

                    _this._watcher.status(code);
                  }
                };

                return [4, new Promise(function (resolve) {
                  socket.onMessage(function (data) {
                    if (Object.prototype.toString.call(data) !== '[object ArrayBuffer]') {
                      logger$1.error('Socket received invalid data:', data);
                      return;
                    }

                    var signal = readWSBuffer(data, protocolVer);

                    if (signal instanceof PingRespReader && _this._pingResolve) {
                      _this._pingResolve(ErrorCode$1.SUCCESS);

                      _this._pingResolve = undefined;
                      return;
                    }

                    if (signal instanceof ConnAckReader) {
                      logger$1.info("recv connect ack -> ".concat(signal.status));

                      if (signal.status !== ConnectResultCode.ACCEPTED) {
                        logger$1.warn("connect failed: ".concat(signal.status));
                        resolve(signal.status);
                        return;
                      }

                      logger$1.info("connect success -> ".concat(url));
                      _this.connectedTime = signal.timestamp;
                      _this.userId = signal.userId || '';
                      _this._idCount = signal.messageId;
                      resolve(ErrorCode$1.SUCCESS);
                      return;
                    }

                    if (signal instanceof DisconnectReader) {
                      var status_1 = signal.status;
                      logger$1.warn("recv disconnect signal -> status: ".concat(status_1));

                      switch (status_1) {
                        case DisconnectReason.BLOCK_NEW:
                        case DisconnectReason.BLOCK:
                          _this._watcher.status(ConnectionStatus$1.BLOCKED);

                          break;

                        case DisconnectReason.OTHER_DEVICE_LOGIN:
                          _this._watcher.status(ConnectionStatus$1.KICKED_OFFLINE_BY_OTHER_CLIENT);

                          break;

                        case DisconnectReason.REDIRECT_NEW:
                        case DisconnectReason.REDIRECT:
                          _this._watcher.status(ConnectionStatus$1.REDIRECT);

                          break;

                        default:
                          _this._watcher.status(ConnectionStatus$1.DISCONNECT_BY_SERVER);

                          break;
                      }

                      return;
                    }

                    _this._onReceiveSignal(signal);
                  });
                  socket.onClose(function (code, reason) {
                    logger$1.warn('websocket closed! code:', code, 'reason:', reason);
                    disconnected(ConnectionStatus$1.CONNECTION_CLOSED);

                    for (var key in _this._messageIds) {
                      var _resolve = _this._messageIds[key];
                      delete _this._messageIds[key];

                      _resolve(ErrorCode$1.RC_NET_CHANNEL_INVALID);
                    }

                    resolve(code);
                  });
                  socket.onError(function (error) {
                    logger$1.error('websocket error!', error === null || error === void 0 ? void 0 : error.stack);
                    disconnected(ConnectionStatus$1.WEBSOCKET_ERROR);

                    for (var key in _this._messageIds) {
                      var _resolve = _this._messageIds[key];
                      delete _this._messageIds[key];

                      _resolve(ErrorCode$1.RC_NET_CHANNEL_INVALID);
                    }

                    resolve(ErrorCode$1.NETWORK_ERROR);
                  });
                  socket.onOpen(function () {
                    return logger$1.info('websocket open =>', url);
                  });
                  timerSetTimeout(function () {
                    resolve(ErrorCode$1.TIMEOUT);
                  }, WEB_SOCKET_TIMEOUT);
                })];

              case 1:
                code = _a.sent();

                if (code === ErrorCode$1.SUCCESS) {
                  this._socket = socket;
                } else {
                  logger$1.warn("connect result -> code: ".concat(code, ", url: ").concat(url));
                  socket.close();
                }

                return [2, code];
            }
          });
        });
      };

      WebSocketChannel.prototype._checkAlive = function () {
        var _a;

        return __awaiter(this, void 0, void 0, function () {
          var code;

          var _this = this;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._socket) {
                  return [2];
                }

                logger$1.info('send ping ->');
                this.sendOnly(new PingReqWriter());
                return [4, new Promise(function (resolve) {
                  _this._pingResolve = resolve;

                  if (_this._timer) {
                    clearTimeout(_this._timer);
                  }

                  _this._timer = setTimeout(function () {
                    _this._pingResolve = undefined;
                    resolve(ErrorCode$1.TIMEOUT);
                  }, IM_PING_TIMEOUT);
                })];

              case 1:
                code = _b.sent();

                if (code !== ErrorCode$1.SUCCESS) {
                  this._failedCount += 1;
                  logger$1.warn("ping failed count: ".concat(this._failedCount, ", code: ").concat(code));

                  if (this._failedCount >= this.ALLOW_FAILED_TIMES) {
                    this._failedCount = 0;
                    logger$1.warn('ping timeout, close current websocket to reconnect!');
                    (_a = this._socket) === null || _a === void 0 ? void 0 : _a.close();
                    this._socket = null;

                    this._watcher.status(ConnectionStatus$1.NETWORK_UNAVAILABLE);
                  } else {
                    this._checkAlive();
                  }

                  return [2];
                }

                logger$1.info('recv pong <-');
                this._failedCount = 0;
                setTimeout(function () {
                  return _this._checkAlive();
                }, IM_PING_INTERVAL_TIME);
                return [2];
            }
          });
        });
      };

      WebSocketChannel.prototype._onReceiveSignal = function (signal) {
        return __awaiter(this, void 0, void 0, function () {
          var messageId, isQosNeedAck, resolve, syncResolve, syncMsg, topic, ack;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                messageId = signal.messageId;
                isQosNeedAck = signal.header && signal.header.qos !== QOS.AT_MOST_ONCE;

                if (isQosNeedAck) {
                  if (signal instanceof PublishReader && !signal.syncMsg) {
                    logger$1.info("send pubAck -> ".concat(messageId, " ").concat(signal.topic));
                    this.sendOnly(new PubAckWriter(messageId));
                  }

                  if (signal instanceof QueryAckReader) {
                    logger$1.info("send queryCon -> ".concat(messageId, " ").concat(signal.topic));
                    this.sendOnly(new QueryConWriter(messageId));
                  }
                }

                if (messageId > 0 && (signal instanceof PubAckReader || signal instanceof QueryAckReader)) {
                  logger$1.info("recv ack -> messageId: ".concat(messageId, " ").concat(signal.topic));
                  resolve = this._messageIds[messageId];

                  if (resolve) {
                    resolve(signal);
                    delete this._messageIds[messageId];
                  }

                  syncResolve = this._syncMessageIds[messageId];

                  if (syncResolve) {
                    delete this._syncMessageIds[messageId];
                    syncResolve(signal);
                  }
                }

                if (!(signal instanceof PublishReader)) return [3, 2];
                syncMsg = signal.syncMsg, topic = signal.topic;
                logger$1.info("recv PublishReader -> messageId: ".concat(messageId, " ").concat(topic));

                if (topic === Topic$1[Topic$1.userSetData]) {
                  return [2];
                }

                if (!syncMsg || isStatusMessage(topic)) {
                  this._watcher.signal(signal);

                  return [2];
                }

                return [4, new Promise(function (resolve) {
                  _this._syncMessageIds[messageId] = resolve;
                })];

              case 1:
                ack = _a.sent();
                delete this._syncMessageIds[messageId];

                this._watcher.signal(signal, ack);

                _a.label = 2;

              case 2:
                return [2];
            }
          });
        });
      };

      WebSocketChannel.prototype.sendOnly = function (writer) {
        if (this._socket) {
          if (writer instanceof PublishWriter || writer instanceof QueryWriter) {
            writer.messageId = this._generateMessageId();
          }

          sendWSData(writer, this._socket);
        }
      };

      WebSocketChannel.prototype.send = function (writer, respPBName, option, timeout) {
        if (timeout === void 0) {
          timeout = IM_SIGNAL_TIMEOUT;
        }

        return __awaiter(this, void 0, void 0, function () {
          var messageId_1, respSignal, isDecodeData, data;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._socket) return [3, 2];
                messageId_1 = this._generateMessageId();
                writer.messageId = messageId_1;
                sendWSData(writer, this._socket);
                return [4, new Promise(function (resolve) {
                  _this._messageIds[messageId_1] = resolve;
                  setTimeout(function () {
                    if (_this._messageIds[messageId_1]) {
                      delete _this._messageIds[messageId_1];
                    }

                    resolve();
                  }, timeout);
                })];

              case 1:
                respSignal = _a.sent();

                if (!respSignal) {
                  logger$1.warn("send timeout -> message: ".concat(messageId_1, ", respPBName: ").concat(respPBName, ", timeout: ").concat(timeout));
                  return [2, {
                    code: ErrorCode$1.TIMEOUT
                  }];
                }

                if (!(respSignal instanceof QueryAckReader) && !(respSignal instanceof PubAckReader)) {
                  return [2, {
                    code: respSignal
                  }];
                }

                isDecodeData = respPBName && respSignal.data && [ErrorCode$1.SUCCESS, ErrorCode$1.CHATROOM_KV_STORE_NOT_ALL_SUCCESS].indexOf(respSignal.status) >= 0;
                data = isDecodeData ? this.codec.decodeByPBName(respSignal.data, respPBName, option) : respSignal;

                if (respSignal.status !== 0) {
                  logger$1.warn("send failed -> message: ".concat(messageId_1, ", respPBName: ").concat(respPBName, ", status: ").concat(respSignal.status));
                  return [2, {
                    code: respSignal.status,
                    data: respPBName && respSignal.data ? data : null
                  }];
                }

                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: data
                }];

              case 2:
                return [2, {
                  code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                }];
            }
          });
        });
      };

      WebSocketChannel.prototype.close = function () {
        if (this._socket) {
          this._socket.close();

          this._socket = null;

          this._watcher.status(ConnectionStatus$1.DISCONNECTED);
        }
      };

      return WebSocketChannel;
    }(ADataChannel);

    var isValidJSON = function isValidJSON(jsonStr) {
      if (isObject(jsonStr)) {
        return true;
      }

      var isValid = false;

      try {
        var obj = JSON.parse(jsonStr);
        var str = JSON.stringify(obj);
        isValid = str === jsonStr;
      } catch (e) {
        isValid = false;
      }

      return isValid;
    };

    function uploadCometStatisData(runtime) {
      return __awaiter(this, void 0, void 0, function () {
        var tag, _a, sdkPrivate, serverPrivate, bundleId, _b, protocol, startTime, endTime, code, host, networkType, error_1, duration, serverContent;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              tag = StatisticsTag.IM_COMET;
              _a = logger$1.getStatisticsBaseData(), sdkPrivate = _a.sdkPrivate, serverPrivate = _a.serverPrivate, bundleId = _a.bundleId;
              _b = logger$1.getStatisticsData(tag), protocol = _b.protocol, startTime = _b.startTime, endTime = _b.endTime, code = _b.code, host = _b.host;
              networkType = NetworkType.UNKONWN;
              _c.label = 1;

            case 1:
              _c.trys.push([1, 3,, 4]);

              return [4, runtime.getNetworkType()];

            case 2:
              networkType = _c.sent();
              return [3, 4];

            case 3:
              error_1 = _c.sent();
              logger$1.info(error_1.message);
              return [3, 4];

            case 4:
              duration = 0;

              if (isNumber(startTime) && isNumber(endTime) && endTime > startTime && startTime) {
                duration = endTime - startTime;
              }

              serverContent = {
                spr: sdkPrivate,
                pr: serverPrivate,
                bid: bundleId,
                ptc: protocol,
                dur: duration,
                cod: code,
                hos: host,
                net: networkType
              };
              logger$1.reportStatisticsLog(tag, serverContent);
              return [2];
          }
        });
      });
    }

    var CometChannel = function (_super) {
      __extends(CometChannel, _super);

      function CometChannel(_runtime, watcher) {
        var _this = _super.call(this, 'comet', watcher) || this;

        _this._runtime = _runtime;
        _this._messageIds = {};
        _this._syncMessageIds = {};
        _this._idCount = 0;

        _this._generateMessageId = function () {
          return ++_this._idCount;
        };

        _this._pid = encodeURIComponent(new Date().getTime() + Math.random() + '');
        return _this;
      }

      CometChannel.prototype.handleCometRes = function (res) {
        var _this = this;

        if (res.status !== 200 && res.status !== 202) {
          return false;
        }

        var data = isString(res.data) ? JSON.parse(res.data) : res.data;

        if (!data) {
          logger$1.error('received data is not a validJson', data);
          return false;
        }

        if (!isArray(data)) {
          return true;
        }

        forEach$1(data, function (item) {
          return __awaiter(_this, void 0, void 0, function () {
            var sessionid, signal, messageId, _header, status, isQosNeedAck, resolve, writer, writer, syncMsg, topic, ack;

            var _this = this;

            return __generator(this, function (_a) {
              switch (_a.label) {
                case 0:
                  sessionid = item.sessionid;

                  if (sessionid) {
                    this._sessionid = sessionid;
                  }

                  signal = readCometData(item);
                  messageId = signal.messageId, _header = signal._header, status = signal.status;
                  isQosNeedAck = _header && _header.qos !== QOS.AT_MOST_ONCE;

                  if (messageId && signal.getIdentifier) {
                    resolve = this._messageIds[messageId];
                    resolve && resolve(signal);
                    this._syncMessageIds[messageId] && this._syncMessageIds[messageId](signal);
                  }

                  if (isQosNeedAck) {
                    if (signal instanceof PublishReader && !signal.syncMsg) {
                      writer = new PubAckWriter(messageId);
                      this.sendOnly(writer);
                    }

                    if (signal instanceof QueryAckReader) {
                      writer = new QueryConWriter(messageId);
                      this.sendOnly(writer);
                    }
                  }

                  if (signal instanceof DisconnectReader) {
                    switch (status) {
                      case DisconnectReason.OTHER_DEVICE_LOGIN:
                        this._watcher.status(ConnectionStatus$1.KICKED_OFFLINE_BY_OTHER_CLIENT);

                        break;

                      case DisconnectReason.BLOCK:
                      case DisconnectReason.BLOCK_NEW:
                        this._watcher.status(ConnectionStatus$1.BLOCKED);

                        break;

                      case DisconnectReason.REDIRECT_NEW:
                      case DisconnectReason.REDIRECT:
                        this._watcher.status(ConnectionStatus$1.REDIRECT);

                        break;

                      default:
                        this._watcher.status(ConnectionStatus$1.DISCONNECT_BY_SERVER);

                        break;
                    }

                    return [2];
                  }

                  if (!(signal instanceof PublishReader)) return [3, 2];
                  syncMsg = signal.syncMsg, topic = signal.topic;

                  if (!syncMsg || isStatusMessage(topic)) {
                    this._watcher.signal(signal);

                    return [2, false];
                  }

                  return [4, new Promise(function (resolve) {
                    _this._syncMessageIds[messageId] = resolve;
                  })];

                case 1:
                  ack = _a.sent();
                  delete this._syncMessageIds[messageId];

                  this._watcher.signal(signal, ack);

                  _a.label = 2;

                case 2:
                  return [2];
              }
            });
          });
        });
        return true;
      };

      CometChannel.prototype._startPullSignal = function (protocol) {
        return __awaiter(this, void 0, void 0, function () {
          var timestamp, url, res, isSuccess;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                timestamp = new Date().getTime();
                url = "".concat(protocol, "://").concat(this._domain, "/pullmsg.js?sessionid=").concat(this._sessionid, "&timestrap=").concat(timestamp, "&pid=").concat(this._pid);
                return [4, this._runtime.httpReq({
                  url: url,
                  body: {
                    pid: this._pid
                  },
                  timeout: IM_COMET_PULLMSG_TIMEOUT
                })];

              case 1:
                res = _a.sent();
                isSuccess = this.handleCometRes(res);

                if (!this._isDisconnected) {
                  if (isSuccess) {
                    this._startPullSignal(protocol);
                  } else {
                    this._isDisconnected = true;

                    this._watcher.status(ConnectionStatus$1.NETWORK_UNAVAILABLE);
                  }
                }

                return [2];
            }
          });
        });
      };

      CometChannel.prototype.connect = function (appkey, token, hosts, protocol, apiVersion, protocolVer) {
        return __awaiter(this, void 0, void 0, function () {
          var _hosts, isConnecting;

          var _this = this;

          return __generator(this, function (_a) {
            apiVersion = matchVersion(apiVersion);
            this._protocol = protocol;
            this._isDisconnected = false;

            this._watcher.status(ConnectionStatus$1.CONNECTING);

            _hosts = hosts.slice();
            isConnecting = false;
            return [2, new Promise(function (resolve) {
              var loopConnect = function loopConnect() {
                return __awaiter(_this, void 0, void 0, function () {
                  var host, code, statisticsCode;
                  return __generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        if (_hosts.length === 0 || isConnecting) {
                          return [2];
                        }

                        isConnecting = true;
                        host = _hosts.shift();
                        logger$1.setStatisticsData(StatisticsTag.IM_COMET, {
                          startTime: new Date().getTime(),
                          host: host,
                          protocol: ProtocalType.NAVI
                        });
                        return [4, this._connect(appkey, token, host, protocol, apiVersion)];

                      case 1:
                        code = _a.sent();
                        statisticsCode = code === ErrorCode$1.SUCCESS || code === ConnectResultCode.REDIRECT ? code : formatConnectResponseCode(code);
                        logger$1.setStatisticsData(StatisticsTag.IM_COMET, {
                          endTime: new Date().getTime(),
                          code: statisticsCode
                        });
                        uploadCometStatisData(this._runtime);

                        if (code === ErrorCode$1.SUCCESS) {
                          this._startPullSignal(protocol);

                          resolve(code);
                        } else if (code === ConnectResultCode.REDIRECT) {
                          resolve(code);
                        } else {
                          if (_hosts.length === 0) {
                            resolve(formatConnectResponseCode(code));
                            return [2];
                          }

                          isConnecting = false;
                          loopConnect();
                        }

                        return [2];
                    }
                  });
                });
              };

              _this._watcher.status(ConnectionStatus$1.CONNECTING);

              loopConnect();
            })];
          });
        });
      };

      CometChannel.prototype._connect = function (appkey, token, host, protocol, apiVersion) {
        return __awaiter(this, void 0, void 0, function () {
          var handleConnectRes, url, res, response;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                handleConnectRes = function handleConnectRes(res) {
                  if (res.status !== 200 && res.status !== 202) {
                    logger$1.error("handle comet res -> res: ".concat(JSON.stringify(res || {})));
                    return false;
                  }

                  if (res.data) {
                    if (!isValidJSON(res.data)) {
                      logger$1.error('received data is not a validJson', res.data);
                      return false;
                    }

                    return isObject(res.data) ? res.data : JSON.parse(res.data);
                  }

                  return false;
                };

                url = formatWSUrl(protocol, host, appkey, token, this._runtime, apiVersion, this._pid);
                this.sendConnectTime = Date.now();
                logger$1.info("conenct start -> ".concat(url));
                return [4, this._runtime.httpReq({
                  url: url,
                  body: {
                    pid: this._pid
                  },
                  timeout: WEB_SOCKET_TIMEOUT
                })];

              case 1:
                res = _a.sent();
                response = handleConnectRes(res);
                this._domain = host;

                if (response && response.status === 0) {
                  this._sessionid = response.sessionid;
                  this.userId = response.userId;
                  this.connectedTime = response.timestamp;
                  logger$1.info("connect success -> userId: ".concat(response.userId, ", url: ").concat(url));
                } else {
                  logger$1.warn("connect result -> code: ".concat(response === null || response === void 0 ? void 0 : response.status, ", url: ").concat(url));
                }

                return [2, response === null || response === void 0 ? void 0 : response.status];
            }
          });
        });
      };

      CometChannel.prototype.sendCometData = function (writer, timeout) {

        return __awaiter(this, void 0, void 0, function () {
          var _a, _domain, _sessionid, _pid, messageId, topic, targetId, headerCode, url, res;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _a = this, _domain = _a._domain, _sessionid = _a._sessionid, _pid = _a._pid;
                messageId = writer.messageId, topic = writer.topic, targetId = writer.targetId;
                headerCode = writer.getHeaderFlag();

                if (topic) {
                  url = "".concat(this._protocol, "://").concat(_domain, "/websocket?messageid=").concat(messageId, "&header=").concat(headerCode, "&sessionid=").concat(_sessionid, "&topic=").concat(topic, "&targetid=").concat(targetId, "&pid=").concat(_pid);
                } else {
                  url = "".concat(this._protocol, "://").concat(_domain, "/websocket?messageid=").concat(messageId, "&header=").concat(headerCode, "&sessionid=").concat(_sessionid, "&pid=").concat(_pid);
                }

                return [4, this._runtime.httpReq({
                  url: url,
                  method: HttpMethod.POST,
                  body: writer.getCometData()
                })];

              case 1:
                res = _b.sent();
                this.handleCometRes(res);
                return [2];
            }
          });
        });
      };

      CometChannel.prototype.sendOnly = function (writer) {
        this.sendCometData(writer);
      };

      CometChannel.prototype.send = function (writer, respPBName, option, timeout) {
        if (timeout === void 0) {
          timeout = IM_SIGNAL_TIMEOUT;
        }

        return __awaiter(this, void 0, void 0, function () {
          var messageId, respSignal, isDecodeData, data;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                messageId = this._generateMessageId();
                writer.messageId = messageId;
                this.sendCometData(writer);
                return [4, new Promise(function (resolve) {
                  _this._messageIds[messageId] = resolve;
                  setTimeout(function () {
                    delete _this._messageIds[messageId];
                    resolve();
                  }, timeout);
                })];

              case 1:
                respSignal = _a.sent();

                if (!respSignal) {
                  return [2, {
                    code: ErrorCode$1.TIMEOUT
                  }];
                }

                isDecodeData = respPBName && respSignal.data && [ErrorCode$1.SUCCESS, ErrorCode$1.CHATROOM_KV_STORE_NOT_ALL_SUCCESS].indexOf(respSignal.status) >= 0;
                data = isDecodeData ? this.codec.decodeByPBName(respSignal.data, respPBName, option) : respSignal;

                if (respSignal.status !== 0) {
                  return [2, {
                    code: respSignal.status,
                    data: respPBName && respSignal.data ? data : null
                  }];
                }

                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: data
                }];
            }
          });
        });
      };

      CometChannel.prototype.close = function () {
        this._isDisconnected = true;

        this._watcher.status(ConnectionStatus$1.DISCONNECTED);
      };

      return CometChannel;
    }(ADataChannel);

    var AEngine = function () {
      function AEngine(runtime, _watcher, _options) {
        this.runtime = runtime;
        this._watcher = _watcher;
        this._options = _options;
        this.currentUserId = '';
        this._appkey = this._options.appkey;
        this._apiVer = this._options.apiVersion;
        this.navi = this._createNavi();
      }

      return AEngine;
    }();

    var getKey = function getKey(appkey) {
      return ['navi', appkey].join('_');
    };

    var getNaviInfoFromCache = function getNaviInfoFromCache(appkey, token, storage) {
      var _a;

      var key = getKey(appkey);
      var caches;

      try {
        var jsonStr = storage.getItem(key);
        caches = jsonStr ? JSON.parse(jsonStr) : [];
      } catch (error) {
        caches = [];
      }

      var timestamp = Date.now();

      if (caches.length > 0) {
        caches = caches.filter(function (item) {
          return timestamp - item.timestamp < NAVI_CACHE_DURATION;
        });
      }

      caches.length === 0 ? storage.removeItem(key) : storage.setItem(key, JSON.stringify(caches));
      return ((_a = caches.find(function (item) {
        return item.token === token;
      })) === null || _a === void 0 ? void 0 : _a.naviInfo) || null;
    };

    var setNaviInfo2Cache = function setNaviInfo2Cache(appkey, token, naviInfo, storage) {
      var key = getKey(appkey);
      var caches;

      try {
        var jsonStr = storage.getItem(key);
        caches = jsonStr ? JSON.parse(jsonStr) : [];
      } catch (error) {
        caches = [];
      }

      var timestamp = Date.now();

      if (caches.length > 0) {
        caches = caches.filter(function (item) {
          return timestamp - item.timestamp < NAVI_CACHE_DURATION && token !== item.token;
        });
      }

      caches.push({
        timestamp: timestamp,
        naviInfo: naviInfo,
        token: token
      });
      storage.setItem(key, JSON.stringify(caches));
    };

    var clearCache = function clearCache(appkey, token, storage) {
      var key = getKey(appkey);
      var caches;

      try {
        var jsonStr = storage.getItem(key);
        caches = jsonStr ? JSON.parse(jsonStr) : [];
      } catch (error) {
        caches = [];
      }

      var timestamp = Date.now();

      if (caches.length > 0) {
        caches = caches.filter(function (item) {
          return timestamp - item.timestamp < NAVI_CACHE_DURATION && token !== item.token;
        });
      }

      caches.length === 0 ? storage.removeItem(key) : storage.setItem(key, JSON.stringify(caches));
    };

    var ANavi = function () {
      function ANavi(_runtime, _options) {
        this._runtime = _runtime;
        this._options = _options;
        this._naviInfo = null;
        this._appkey = this._options.appkey;
        this._apiVersion = matchVersion(this._options.apiVersion);
      }

      ANavi.prototype.getInfo = function (token, dynamicUris, force, checkCA) {
        return __awaiter(this, void 0, void 0, function () {
          var naviInfo, uris;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (force) {
                  this._clear(token);
                }

                naviInfo = getNaviInfoFromCache(this._appkey, token, this._runtime.localStorage);

                if (naviInfo) {
                  this._naviInfo = naviInfo;
                  return [2, naviInfo];
                }

                uris = this._options.navigators.slice();
                dynamicUris.length && dynamicUris.forEach(function (uri) {
                  uris.indexOf(uri) < 0 && uris.unshift(uri);
                });
                return [4, this._reqNavi(uris, this._appkey, token, checkCA)];

              case 1:
                naviInfo = _a.sent();

                if (naviInfo) {
                  this._naviInfo = naviInfo;
                  this.setNaviInfo2Cache(token, naviInfo);
                  return [2, naviInfo];
                }

                return [2, naviInfo];
            }
          });
        });
      };

      ANavi.prototype.setNaviInfo2Cache = function (token, naviInfo) {
        this._naviInfo = naviInfo;
        setNaviInfo2Cache(this._appkey, token, naviInfo, this._runtime.localStorage);
      };

      ANavi.prototype.getInfoFromCache = function (token) {
        return __assign({}, this._naviInfo);
      };

      ANavi.prototype._clear = function (token) {
        clearCache(this._appkey, token, this._runtime.localStorage);
      };

      return ANavi;
    }();

    var OUTBOX_KEY = 'outbox';
    var INBOX_KEY = 'inbox';
    var BROADCAST_KEY = 'broadcastbox';

    var generateKey$1 = function generateKey(prefix, appkey, userId) {
      return [prefix, appkey, userId].join('_');
    };

    var Letterbox = function () {
      function Letterbox(_runtime, _appkey) {
        this._runtime = _runtime;
        this._appkey = _appkey;
        this._users = {};
      }

      Letterbox.prototype._getMemData = function (userId) {
        return this._users[userId] || (this._users[userId] = {
          inboxTime: 0,
          outboxTime: 0,
          broadcastSyncTime: 0
        });
      };

      Letterbox.prototype.setInboxTime = function (timestamp, userId) {
        var data = this._getMemData(userId);

        if (data.inboxTime > timestamp) {
          return;
        }

        data.inboxTime = timestamp;
        var key = generateKey$1(INBOX_KEY, this._appkey, userId);

        this._runtime.localStorage.setItem(key, timestamp.toString());
      };

      Letterbox.prototype.getInboxTime = function (userId) {
        var data = this._getMemData(userId);

        if (data.inboxTime === 0) {
          var key = generateKey$1(INBOX_KEY, this._appkey, userId);
          data.inboxTime = parseInt(this._runtime.localStorage.getItem(key)) || 0;
        }

        return data.inboxTime;
      };

      Letterbox.prototype.setBroadcastSyncTime = function (timestamp, userId) {
        var data = this._getMemData(userId);

        if (data.broadcastSyncTime >= timestamp || isUndefined(timestamp)) {
          return;
        }

        data.broadcastSyncTime = timestamp;
        var key = generateKey$1(BROADCAST_KEY, this._appkey, userId);

        this._runtime.localStorage.setItem(key, timestamp.toString());
      };

      Letterbox.prototype.getBroadcastSyncTime = function (userId) {
        var data = this._getMemData(userId);

        if (!data || data.broadcastSyncTime === 0) {
          var key = generateKey$1(BROADCAST_KEY, this._appkey, userId);
          data.broadcastSyncTime = parseInt(this._runtime.localStorage.getItem(key)) || 1;
        }

        return data.broadcastSyncTime;
      };

      Letterbox.prototype.setOutboxTime = function (timestamp, userId) {
        var data = this._getMemData(userId);

        if (data.outboxTime >= timestamp) {
          return;
        }

        data.outboxTime = timestamp;
        var key = generateKey$1(OUTBOX_KEY, this._appkey, userId);

        this._runtime.localStorage.setItem(key, timestamp.toString());
      };

      Letterbox.prototype.getOutboxTime = function (userId) {
        var data = this._getMemData(userId);

        if (data.outboxTime === 0) {
          var key = generateKey$1(OUTBOX_KEY, this._appkey, userId);
          data.outboxTime = parseInt(this._runtime.localStorage.getItem(key)) || 0;
        }

        return data.outboxTime;
      };

      return Letterbox;
    }();

    var PullTimeCache = {
      _caches: {},
      set: function set(chrmId, time) {
        this._caches[chrmId] = time;
      },
      get: function get(chrmId) {
        return this._caches[chrmId] || 0;
      },
      clear: function clear(chrmId) {
        this._caches[chrmId] = 0;
      }
    };

    var KVStore = function () {
      function KVStore(chatroomId, currentUserId) {
        this._kvCaches = {};
        this._chatroomId = chatroomId;
        this._currentUserId = currentUserId;
      }

      KVStore.prototype._add = function (kv) {
        var key = kv.key;
        kv.isDeleted = false;
        this._kvCaches[key] = kv;
      };

      KVStore.prototype._remove = function (kv) {
        var key = kv.key;
        var cacheKV = this._kvCaches[key];

        if (cacheKV) {
          cacheKV.isDeleted = true;
          this._kvCaches[key] = cacheKV;
        }
      };

      KVStore.prototype._setEntry = function (data, isFullUpdate) {
        var key = data.key,
            type = data.type,
            isOverwrite = data.isOverwrite,
            userId = data.userId;

        var latestUserId = this._getSetUserId(key);

        var isDeleteOpt = type === ChatroomEntryType$1.DELETE;
        var isSameAtLastSetUser = latestUserId === userId;
        var isKeyNotExist = !this._isExisted(key);
        var event = isDeleteOpt ? this._remove : this._add;

        if (isFullUpdate) {
          event.call(this, data);
        } else if (isOverwrite || isSameAtLastSetUser || isKeyNotExist) {
          event.call(this, data);
        } else ;
      };

      KVStore.prototype.getValue = function (key) {
        var kv = this._kvCaches[key] || {};
        var isDeleted = kv.isDeleted;
        return isDeleted ? null : kv.value;
      };

      KVStore.prototype.getVersion = function (key) {
        var kv = this._kvCaches[key] || {};
        var isDeleted = kv.isDeleted;
        return isDeleted ? null : kv.version;
      };

      KVStore.prototype.getAllValue = function () {
        var entries = {};

        for (var key in this._kvCaches) {
          if (!this._kvCaches[key].isDeleted) {
            entries[key] = this._kvCaches[key].value;
          }
        }

        return entries;
      };

      KVStore.prototype._getSetUserId = function (key) {
        var cache = this._kvCaches[key] || {};
        return cache.userId;
      };

      KVStore.prototype._isExisted = function (key) {
        var cache = this._kvCaches[key] || {};
        var value = cache.value,
            isDeleted = cache.isDeleted;
        return value && !isDeleted;
      };

      KVStore.prototype.setEntries = function (data) {
        var _this = this;

        var kvEntries = data.kvEntries,
            isFullUpdate = data.isFullUpdate;
        kvEntries = kvEntries || [];
        isFullUpdate = isFullUpdate || false;
        isFullUpdate && this.clear();
        kvEntries.forEach(function (kv) {
          _this._setEntry(kv, isFullUpdate);
        });
        logger$1.debug('end setEntries');
      };

      KVStore.prototype.clear = function () {
        this._kvCaches = {};
      };

      return KVStore;
    }();

    var ChrmEntryHandler = function () {
      function ChrmEntryHandler(engine) {
        this._pullQueue = [];
        this._isPulling = false;
        this._storeCaches = {};
        this._engine = engine;
      }

      ChrmEntryHandler.prototype._startPull = function () {
        return __awaiter(this, void 0, void 0, function () {
          var _a, chrmId, timestamp, pulledUpTime, _b, code, data;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                if (this._isPulling || this._pullQueue.length === 0) {
                  return [2];
                }

                this._isPulling = true;
                _a = this._pullQueue.splice(0, 1)[0], chrmId = _a.chrmId, timestamp = _a.timestamp;
                pulledUpTime = PullTimeCache.get(chrmId);

                if (pulledUpTime > timestamp) {
                  this._isPulling = false;

                  this._startPull();

                  return [2];
                }

                return [4, this._engine.pullChatroomEntry(chrmId, pulledUpTime)];

              case 1:
                _b = _c.sent(), code = _b.code, data = _b.data;
                this._isPulling = false;

                if (code === ErrorCode$1.SUCCESS) {
                  PullTimeCache.set(chrmId, data.syncTime || 0);

                  this._startPull();
                } else {
                  this._startPull();
                }

                return [2];
            }
          });
        });
      };

      ChrmEntryHandler.prototype.reset = function (chrmId) {
        PullTimeCache.clear(chrmId);
        var kvStore = this._storeCaches[chrmId];
        kvStore && kvStore.clear();
      };

      ChrmEntryHandler.prototype.pullEntry = function (chrmId, timestamp) {
        this._pullQueue.push({
          chrmId: chrmId,
          timestamp: timestamp
        });

        this._startPull();
      };

      ChrmEntryHandler.prototype.setLocal = function (chrmId, data, userId) {
        var kvStore = this._storeCaches[chrmId];

        if (!notEmptyObject(kvStore)) {
          kvStore = new KVStore(chrmId, userId);
        }

        kvStore.setEntries(data);
        this._storeCaches[chrmId] = kvStore;
      };

      ChrmEntryHandler.prototype.getValue = function (chrmId, key) {
        var kvStore = this._storeCaches[chrmId];
        return kvStore ? kvStore.getValue(key) : null;
      };

      ChrmEntryHandler.prototype.getVersion = function (chrmId, key) {
        var kvStore = this._storeCaches[chrmId];
        return kvStore ? kvStore.getVersion(key) : null;
      };

      ChrmEntryHandler.prototype.getAll = function (chrmId) {
        var kvStore = this._storeCaches[chrmId];
        var entries = {};

        if (kvStore) {
          entries = kvStore.getAllValue();
        }

        return entries;
      };

      return ChrmEntryHandler;
    }();

    var JoinedChrmManager = function () {
      function JoinedChrmManager(_runtime, _appkey, _userId, _canJoinMulipleChrm) {
        this._runtime = _runtime;
        this._appkey = _appkey;
        this._userId = _userId;
        this._canJoinMulipleChrm = _canJoinMulipleChrm;
        this._sessionKey = '';
        this._joinedChrmsInfo = {};
        this._sessionKey = "sync-chrm-".concat(this._appkey, "-").concat(this._userId);
      }

      JoinedChrmManager.prototype.set = function (chrmId, count) {
        if (count === void 0) {
          count = 10;
        }

        !this._canJoinMulipleChrm && (this._joinedChrmsInfo = {});
        this._joinedChrmsInfo[chrmId] = count;

        this._runtime.sessionStorage.setItem(this._sessionKey, JSON.stringify(this._joinedChrmsInfo));
      };

      JoinedChrmManager.prototype.get = function () {
        var infos;
        var data;

        try {
          data = this._runtime.sessionStorage.getItem(this._sessionKey);
          infos = JSON.parse(data || '{}');
        } catch (err) {
          logger$1.error("parse rejoined chrm infos error -> ".concat(data));
          infos = {};
        }

        return infos;
      };

      JoinedChrmManager.prototype.remove = function (chrmId) {
        delete this._joinedChrmsInfo[chrmId];

        if (notEmptyObject(this._joinedChrmsInfo)) {
          this._runtime.sessionStorage.setItem(this._sessionKey, JSON.stringify(this._joinedChrmsInfo));
        } else {
          this.clear();
        }
      };

      JoinedChrmManager.prototype.clear = function () {
        this._joinedChrmsInfo = {};

        this._runtime.sessionStorage.removeItem(this._sessionKey);
      };

      return JoinedChrmManager;
    }();

    var EventName$1 = {
      STATUS_CHANGED: 'converStatusChanged'
    };

    var ConversationStatus = function () {
      function ConversationStatus(engine, appkey, currentUserId) {
        this._eventEmitter = new EventEmitter();
        this._pullQueue = [];
        this._isPulling = false;
        this._storage = createRootStorage(engine.runtime);
        this._appkey = appkey;
        this._currentUserId = currentUserId;
        this._engine = engine;
        this._storagePullTimeKey = "con-s-".concat(appkey, "-").concat(currentUserId);
      }

      ConversationStatus.prototype._set = function (list) {
        var _this = this;

        if (isUndefined(list) || !Array.isArray(list)) {
          return;
        }

        var localTime = this._storage.get(this._storagePullTimeKey) || 0;
        var listCount = list.length;
        list.forEach(function (statusItem, index) {
          var updatedTime = statusItem.updatedTime || 0;
          localTime = updatedTime > localTime ? updatedTime : localTime;
          statusItem.conversationType = statusItem.type;

          _this._eventEmitter.emit(EventName$1.STATUS_CHANGED, {
            statusItem: statusItem,
            isLastPull: index === listCount - 1
          });
        });

        this._storage.set(this._storagePullTimeKey, localTime);
      };

      ConversationStatus.prototype._startPull = function () {
        return __awaiter(this, void 0, void 0, function () {
          var time, _a, code, data;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (this._isPulling || this._pullQueue.length === 0) {
                  return [2];
                }

                this._isPulling = true;
                time = this._pullQueue.splice(0, 1)[0];
                return [4, this._engine.pullConversationStatus(time)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code === ErrorCode$1.SUCCESS) {
                  this._isPulling = false;

                  this._set(data);

                  this._startPull();
                } else {
                  this._startPull();
                }

                return [2];
            }
          });
        });
      };

      ConversationStatus.prototype.pull = function (newPullTime) {
        var time = this._storage.get(this._storagePullTimeKey) || 0;

        if (newPullTime > time || newPullTime === 0) {
          this._pullQueue.push(time);

          this._startPull();
        }
      };

      ConversationStatus.prototype.watch = function (event) {
        this._eventEmitter.on(EventName$1.STATUS_CHANGED, function (data) {
          event(data);
        });
      };

      ConversationStatus.prototype.unwatch = function () {
        this._eventEmitter.off(EventName$1.STATUS_CHANGED, function (data) {});
      };

      return ConversationStatus;
    }();

    var StorageKey2ConversationKey$1 = {
      c: {
        keyName: 'unreadMessageCount',
        defaultVal: 0
      },
      hm: {
        keyName: 'hasMentioned',
        defaultVal: false
      },
      m: {
        keyName: 'mentionedInfo',
        defaultVal: null
      },
      t: {
        keyName: 'lastUnreadTime',
        defaultVal: 0
      },
      nc: {
        keyName: 'notificationStatus',
        defaultVal: 2
      },
      nl: {
        keyName: 'notificationLevel',
        defaultVal: 0
      },
      to: {
        keyName: 'isTop',
        defaultVal: false
      },
      tg: {
        keyName: 'tags',
        defaultVal: {}
      },
      mc: {
        keyName: 'unreadMentionedCount',
        defaultVal: 0
      }
    };
    var ConversationKey2StorageKey$1 = {};

    for (var key$1 in StorageKey2ConversationKey$1) {
      var keyName$1 = StorageKey2ConversationKey$1[key$1].keyName;
      ConversationKey2StorageKey$1[keyName$1] = key$1;
    }

    var ConversationStore = function () {
      function ConversationStore(runtime, _appkey, _currentUserId) {
        this._appkey = _appkey;
        this._currentUserId = _currentUserId;
        var suffix = "con-".concat(_appkey, "-").concat(_currentUserId);
        this.storage = new AppStorage(runtime, suffix);
        this._localStore = new AppStorage(runtime, "CONVER-".concat(_appkey, "-").concat(_currentUserId));
      }

      ConversationStore.prototype._getStoreKey = function (type, targetId, channelId) {
        return "".concat(channelId, "_").concat(type, "_").concat(targetId);
      };

      ConversationStore.prototype._getConOptionByKey = function (key) {
        key = key || '';
        var arr = key.split('_');

        if (arr.length >= 2) {
          var channelId = arr.shift();
          var conversationType = arr.shift();
          var targetId = arr.join('_');
          return {
            conversationType: Number(conversationType),
            targetId: targetId,
            channelId: channelId
          };
        } else {
          return {
            conversationType: ConversationType$1.PRIVATE,
            targetId: '',
            channelId: ''
          };
        }
      };

      ConversationStore.prototype.updateMentionedData = function (message) {
        var _this = this;

        var conversationType = message.conversationType,
            targetId = message.targetId,
            messageType = message.messageType,
            isMentioned = message.isMentioned,
            content = message.content,
            senderUserId = message.senderUserId,
            channelId = message.channelId;

        var key = this._getStoreKey(conversationType, targetId, channelId);

        var local = this._localStore.get(key) || {};
        var storageMetionedInfoKey = ConversationKey2StorageKey$1.mentionedInfo;
        var storageHasMentionedKey = ConversationKey2StorageKey$1.hasMentioned;
        var localMentionedInfo = local[storageMetionedInfoKey] || {};
        var localUserIdList = localMentionedInfo.userIdList || [];
        var mentionedInfo = content.mentionedInfo;

        if (!mentionedInfo) {
          return;
        }

        if (isMentioned && conversationType === ConversationType$1.GROUP) {
          var receiveUserIdList = mentionedInfo.userIdList || [];
          receiveUserIdList.forEach(function (userId) {
            if (userId === _this._currentUserId && localUserIdList.indexOf(senderUserId) < 0) {
              localUserIdList.push(senderUserId);
            }
          });

          if (mentionedInfo.type === MentionedType$1.ALL && localUserIdList.indexOf(senderUserId) < 0) {
            localUserIdList.push(senderUserId);
          }
        }

        if (messageType === MessageType$2.RECALL && conversationType === ConversationType$1.GROUP) {
          var index = localUserIdList.indexOf(senderUserId);

          if (index >= 0) {
            localUserIdList.splice(index, 1);
          }
        }

        mentionedInfo = {
          userIdList: localUserIdList,
          type: (mentionedInfo === null || mentionedInfo === void 0 ? void 0 : mentionedInfo.type) || localMentionedInfo.type
        };

        if (localUserIdList.length !== 0) {
          local[storageMetionedInfoKey] = mentionedInfo;
          local[storageHasMentionedKey] = true;
        } else {
          delete local[storageMetionedInfoKey];
          delete local[storageHasMentionedKey];
        }

        if (notEmptyObject(local)) {
          this._localStore.set(key, local);
        } else {
          this._localStore.remove(key);
        }
      };

      ConversationStore.prototype.set = function (type, targetId, conversation, channelId) {
        var key = this._getStoreKey(type, targetId, channelId);

        var local = this._localStore.get(key) || {};

        for (var key_1 in conversation) {
          var storageKey = ConversationKey2StorageKey$1[key_1];
          var val = conversation[key_1];

          if (isUndefined(storageKey) || isUndefined(val) || key_1 === 'hasMentioned' || key_1 === 'MentionedInfo') {
            continue;
          }

          var defaultVal = StorageKey2ConversationKey$1[storageKey].defaultVal;

          if (val === defaultVal || key_1 === 'tags' && !notEmptyObject(val)) {
            delete local[storageKey];
          } else if (key_1 === 'tags') {
            var _val = val;

            for (var key_2 in _val) {
              if (!_val[key_2].isTop) {
                delete _val[key_2].isTop;
              }
            }

            local[storageKey] = val;
          } else {
            local[storageKey] = val;
          }

          if (!local.c) {
            delete local.t;
            delete local.hm;
            delete local.m;
            delete local.mc;
          }
        }

        if (notEmptyObject(local)) {
          this._localStore.set(key, local);
        } else {
          this._localStore.remove(key);
        }
      };

      ConversationStore.prototype.get = function (type, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        var key = this._getStoreKey(type, targetId, channelId);

        var local = this._localStore.get(key) || {};
        var conversation = {};

        for (var key_3 in StorageKey2ConversationKey$1) {
          var _a = StorageKey2ConversationKey$1[key_3],
              keyName = _a.keyName,
              defaultVal = _a.defaultVal;
          conversation[keyName] = local[key_3] || cloneByJSON(defaultVal);
        }

        return conversation;
      };

      ConversationStore.prototype.getValue = function (func) {

        var values = this._localStore.getValues() || {};
        var storageConversationList = [];

        for (var key in values) {
          var _a = this._getConOptionByKey(key),
              conversationType = _a.conversationType,
              targetId = _a.targetId,
              channelId = _a.channelId;

          var conversation = {
            conversationType: conversationType,
            targetId: targetId,
            channelId: channelId
          };
          var store = values[key];

          for (var storeKey in store) {
            var _b = StorageKey2ConversationKey$1[storeKey],
                keyName = _b.keyName,
                defaultVal = _b.defaultVal;
            conversation[keyName] = store[storeKey] || cloneByJSON(defaultVal);
          }

          conversation = func ? func(conversation) : conversation;
          storageConversationList.push(conversation);
        }

        return storageConversationList;
      };

      ConversationStore.prototype.getValueForTag = function () {
        var values = this._localStore.getValues() || {};
        var tagObj = {};

        for (var key in values) {
          var _a = this._getConOptionByKey(key),
              conversationType = _a.conversationType,
              targetId = _a.targetId;

          var conversation = {};
          var store = values[key];

          for (var storeKey in store) {
            var _b = StorageKey2ConversationKey$1[storeKey],
                keyName = _b.keyName,
                defaultVal = _b.defaultVal;
            conversation[keyName] = store[storeKey] || cloneByJSON(defaultVal);
          }

          for (var tagId in conversation.tags) {
            if (isUndefined(tagObj[tagId])) {
              tagObj[tagId] = [];
            }

            var _con = Object.assign({}, conversation, {
              conversationType: conversationType,
              targetId: targetId
            });

            delete _con.tags;
            tagObj[tagId].push(_con);
          }
        }

        return tagObj;
      };

      ConversationStore.prototype.adaptOldStore = function () {
        try {
          var oldData = this.storage.getValues();

          if (Object.keys(oldData).length === 0) {
            return;
          }

          for (var key in oldData) {
            var newKey = "_".concat(key);

            this._localStore.set(newKey, oldData[key]);
          }
        } catch (err) {
          logger$1.error("adaptOldStore error: ".concat(err.message));
        }
      };

      return ConversationStore;
    }();

    var saveConversationType = [ConversationType$1.PRIVATE, ConversationType$1.GROUP, ConversationType$1.SYSTEM, ConversationType$1.PUBLIC_SERVICE, ConversationType$1.APP_PUBLIC_SERVICE];
    var EventName = {
      CHANGED: 'conversationChanged',
      CON_TAG_STATUS_CHANGED: 'conTagStatusChanged'
    };

    var ConversationManager = function () {
      function ConversationManager(engine, appkey, userId, updatedConversationFunc, updatedConTagFunc) {
        var _this = this;

        this._updatedConversations = {};
        this._conTagStatusChanged = false;
        this._eventEmitter = new EventEmitter();
        this._draftMap = {};
        this._appkey = appkey;
        this._loginUserId = userId;
        this._store = new ConversationStore(engine.runtime, appkey, userId);
        this._statusManager = new ConversationStatus(engine, appkey, userId);

        this._statusManager.watch(function (data) {
          var statusItem = data.statusItem,
              isLastPull = data.isLastPull;

          _this.addStatus(statusItem, isLastPull);
        });

        this._eventEmitter.on(EventName.CHANGED, function (data) {
          updatedConversationFunc(data);
        });

        this._eventEmitter.on(EventName.CON_TAG_STATUS_CHANGED, function () {
          updatedConTagFunc();
        });
      }

      ConversationManager.prototype._calcUnreadCount = function (message, localConversation) {
        var content = message.content,
            messageType = message.messageType,
            sentTime = message.sentTime,
            isCounted = message.isCounted,
            messageDirection = message.messageDirection,
            senderUserId = message.senderUserId;
        var isSelfSend = messageDirection === MessageDirection$1.SEND && senderUserId === this._loginUserId;
        var isRecall = messageType === MessageType$2.RECALL;
        var hasContent = isObject(content);
        var hasChanged = false;
        var updateItems = {};
        var lastUnreadTime = localConversation.lastUnreadTime || 0;
        var unreadMessageCount = localConversation.unreadMessageCount || 0;
        var hasBeenAdded = lastUnreadTime > sentTime;

        if (hasBeenAdded || isSelfSend) {
          return {
            hasChanged: hasChanged,
            localConversation: localConversation,
            updateItems: updateItems
          };
        }

        if (isCounted) {
          localConversation.unreadMessageCount = unreadMessageCount + 1;
          localConversation.lastUnreadTime = sentTime;
          hasChanged = true;
        }

        if (isRecall && hasContent) {
          var isNotRead = lastUnreadTime >= content.sentTime;

          if (isNotRead && unreadMessageCount) {
            localConversation.unreadMessageCount = unreadMessageCount - 1;
            hasChanged = true;
          }
        }

        if (hasChanged) {
          updateItems.unreadMessageCount = {
            val: localConversation.unreadMessageCount,
            time: sentTime
          };
        }

        return {
          hasChanged: hasChanged,
          localConversation: localConversation,
          updateItems: updateItems
        };
      };

      ConversationManager.prototype._calcMentionedInfo = function (message, localConversation) {
        var content = message.content,
            messageDirection = message.messageDirection,
            isMentioned = message.isMentioned,
            sentTime = message.sentTime;
        messageDirection === MessageDirection$1.SEND;
        var hasContent = isObject(content);
        var hasChanged = false;
        var updateItems = {};

        if (isMentioned && hasContent && content.mentionedInfo) {
          localConversation.hasMentioned = true;
          hasChanged = true;
          updateItems.hasMentioned = {
            val: true,
            time: sentTime
          };
          updateItems.mentionedInfo = {
            val: content.mentionedInfo,
            time: sentTime
          };
        }

        return {
          hasChanged: hasChanged,
          localConversation: localConversation,
          updateItems: updateItems
        };
      };

      ConversationManager.prototype._calcMentionedCount = function (message, localConversation) {
        var content = message.content,
            messageDirection = message.messageDirection,
            isMentioned = message.isMentioned;
        var hasChanged = false;

        if (isMentioned && messageDirection === MessageDirection$1.RECEIVE && (content === null || content === void 0 ? void 0 : content.mentionedInfo)) {
          var _a = content.mentionedInfo,
              type = _a.type,
              userIdList = _a.userIdList;

          if (type === MentionedType$1.ALL || (userIdList || []).includes(this._loginUserId)) {
            hasChanged = true;
            var unreadMentionedCount = localConversation.unreadMentionedCount || 0;
            localConversation.unreadMentionedCount = unreadMentionedCount + 1;
          }
        }

        return {
          hasChanged: hasChanged,
          localConversation: localConversation
        };
      };

      ConversationManager.prototype._setUpdatedConversation = function (updatedConOptions) {
        if (isObject(updatedConOptions)) {
          var conversationType = updatedConOptions.conversationType,
              targetId = updatedConOptions.targetId,
              channelId = updatedConOptions.channelId;
          var key = "".concat(conversationType, "_").concat(targetId);
          var cacheConversation = this._store.get(conversationType, targetId, channelId) || {};
          this._updatedConversations[key] = Object.assign(cacheConversation, updatedConOptions);
        }
      };

      ConversationManager.prototype._setConTagStatusChanged = function (type, targetId, newTagStatus, channelId) {
        var cacheConversation = this._store.get(type, targetId, channelId) || {};
        var localTagStatus = cacheConversation.tags || {};

        if (Object.keys(localTagStatus).length !== Object.keys(newTagStatus).length) {
          this._conTagStatusChanged = true;
          return;
        }

        for (var key in localTagStatus) {
          if (!newTagStatus[key] || localTagStatus[key].isTop !== newTagStatus[key].isTop) {
            this._conTagStatusChanged = true;
            return;
          }
        }
      };

      ConversationManager.prototype.addStatus = function (statusItem, isLastPull) {
        var conversationType = statusItem.conversationType,
            targetId = statusItem.targetId,
            updatedTime = statusItem.updatedTime,
            notificationStatus = statusItem.notificationStatus,
            notificationLevel = statusItem.notificationLevel,
            isTop = statusItem.isTop,
            tags = statusItem.tags,
            channelId = statusItem.channelId;
        var tagValue = {};
        var updatedItems = {};
        if (conversationType === ConversationType$1.ULTRA_GROUP) return;

        if (!isUndefined(notificationStatus)) {
          updatedItems.notificationStatus = {
            time: updatedTime,
            val: notificationStatus
          };
        }

        if (!isUndefined(notificationLevel)) {
          updatedItems.notificationLevel = {
            time: updatedTime,
            val: notificationLevel
          };
        }

        if (!isUndefined(isTop)) {
          updatedItems.isTop = {
            time: updatedTime,
            val: isTop
          };
        }

        if (!isUndefined(tags)) {
          updatedItems.tags = {
            time: updatedTime,
            val: tags
          };
          tags === null || tags === void 0 ? void 0 : tags.forEach(function (tag) {
            tagValue[tag.tagId] = {
              isTop: tag.isTop
            };
          });
        }

        this._setConTagStatusChanged(conversationType, targetId, tagValue, channelId);

        this._store.set(conversationType, targetId, {
          notificationStatus: notificationStatus,
          notificationLevel: notificationLevel,
          isTop: isTop,
          tags: tagValue
        }, channelId);

        this._setUpdatedConversation({
          conversationType: conversationType,
          targetId: targetId,
          updatedItems: updatedItems,
          channelId: channelId
        });

        if (isLastPull) {
          this._notifyConversationChanged();
        }
      };

      ConversationManager.prototype._notifyConversationChanged = function () {
        var list = [];

        for (var key in this._updatedConversations) {
          list.push(this._updatedConversations[key]);
        }

        if (list.length === 0) return;

        this._eventEmitter.emit(EventName.CHANGED, list);

        this._updatedConversations = {};

        if (this._conTagStatusChanged) {
          this._eventEmitter.emit(EventName.CON_TAG_STATUS_CHANGED);

          this._conTagStatusChanged = false;
        }
      };

      ConversationManager.prototype.setConversationCacheByMessage = function (message, isPullMessageFinished) {
        var _this = this;

        var conversationType = message.conversationType,
            isPersited = message.isPersited,
            targetId = message.targetId,
            channelId = message.channelId;
        var isSaveConversationType = saveConversationType.indexOf(conversationType) >= 0;

        if (!isSaveConversationType) {
          return;
        }

        var hasChanged = false;

        var storageConversation = this._store.get(conversationType, targetId, channelId);

        var _updateItems = {};
        var CalcEvents = [this._calcUnreadCount, this._calcMentionedInfo, this._calcMentionedCount];
        CalcEvents.forEach(function (func) {
          var _a = func.call(_this, message, storageConversation),
              hasCaclChanged = _a.hasChanged,
              localConversation = _a.localConversation,
              updateItems = _a.updateItems;

          hasChanged = hasChanged || hasCaclChanged;
          _updateItems = __assign(__assign({}, _updateItems), updateItems);
          storageConversation = cloneByJSON(localConversation);
        });

        if (hasChanged) {
          this._store.set(conversationType, targetId, storageConversation, channelId);
        }

        this._store.updateMentionedData(message);

        if (isPersited) {
          var conversation = this._store.get(conversationType, targetId, channelId);

          conversation.updatedItems = __assign({
            latestMessage: {
              time: message.sentTime,
              val: message
            }
          }, _updateItems);
          conversation.latestMessage = message;
          var updateConOptions = Object.assign(conversation, {
            conversationType: conversationType,
            targetId: targetId,
            channelId: channelId
          });

          this._setUpdatedConversation(updateConOptions);
        }

        if (hasChanged || isPersited) {
          this._notifyConversationChanged();
        }
      };

      ConversationManager.prototype.get = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._store.get(conversationType, targetId, channelId);
      };

      ConversationManager.prototype.getAllUnreadCount = function (channelId, conversationTypes, includeMuted) {
        var conversationList = this._store.getValue();

        var totalCount = 0;
        conversationList.forEach(function (_a) {
          var unreadMessageCount = _a.unreadMessageCount,
              notificationStatus = _a.notificationStatus,
              notificationLevel = _a.notificationLevel,
              conversationType = _a.conversationType;
          unreadMessageCount = unreadMessageCount || 0;

          if (includeMuted || notificationStatus !== 1 || notificationLevel === NotificationLevel$1.NOT_SET || notificationLevel === NotificationLevel$1.ALL_MESSAGE) {
            if (conversationTypes.length > 0) {
              if (conversationTypes.includes(Number(conversationType))) {
                totalCount += Number(unreadMessageCount);
              }
            } else {
              totalCount += Number(unreadMessageCount);
            }
          }
        });
        return totalCount;
      };

      ConversationManager.prototype.getUnreadCountByTag = function (tagId, containMuted) {
        var tagAll = this._store.getValueForTag();

        var conversationList = tagAll[tagId] || [];
        var totalCount = 0;
        conversationList.forEach(function (_a) {
          var unreadMessageCount = _a.unreadMessageCount,
              notificationStatus = _a.notificationStatus,
              notificationLevel = _a.notificationLevel;

          if (containMuted || notificationStatus !== 1 || notificationLevel === -1 || notificationLevel === 0) {
            unreadMessageCount = unreadMessageCount || 0;
            totalCount += Number(unreadMessageCount);
          }
        });
        return totalCount;
      };

      ConversationManager.prototype.getUnreadCount = function (conversationType, targetId, channelId) {
        var conversation = this._store.get(conversationType, targetId, channelId);

        return conversation.unreadMessageCount || 0;
      };

      ConversationManager.prototype.clearUnreadCount = function (conversationType, targetId, channelId, isNotify) {
        if (isNotify === void 0) {
          isNotify = true;
        }

        var conversation = this._store.get(conversationType, targetId, channelId);

        var unreadMessageCount = conversation.unreadMessageCount,
            hasMentioned = conversation.hasMentioned;
        var updatedItems = {};

        if (unreadMessageCount) {
          conversation.unreadMessageCount = 0;
          updatedItems.unreadMessageCount = {
            val: 0,
            time: Date.now()
          };
        }

        if (hasMentioned) {
          conversation.hasMentioned = false;
          conversation.unreadMentionedCount = 0;
          conversation.mentionedInfo = undefined;
          updatedItems.hasMentioned = {
            val: false,
            time: Date.now()
          };
          updatedItems.mentionedInfo = {
            val: undefined,
            time: Date.now()
          };
        }

        this._store.set(conversationType, targetId, conversation, channelId);

        if (!isNotify) return;
        if (Object.keys(updatedItems).length === 0) return;
        var updateConOptions = Object.assign(conversation, {
          conversationType: conversationType,
          targetId: targetId,
          channelId: channelId,
          updatedItems: updatedItems
        });

        this._setUpdatedConversation(updateConOptions);

        this._notifyConversationChanged();
      };

      ConversationManager.prototype.clearAllUnreadCount = function () {
        var _this = this;

        var conversationList = this._store.getValue();

        conversationList.forEach(function (conversation) {
          if (conversation.unreadMessageCount) {
            conversation.unreadMessageCount = 0;

            _this._store.set(conversation.conversationType, conversation.targetId, conversation, conversation.channelId);
          }
        });
      };

      ConversationManager.prototype.startPullConversationStatus = function (time) {
        this._statusManager.pull(time);
      };

      ConversationManager.prototype.setDraft = function (conversationType, targetId, draft, channelId) {
        var key = "".concat(conversationType, "_").concat(targetId, "_").concat(channelId);
        this._draftMap[key] = draft;
      };

      ConversationManager.prototype.getDraft = function (conversationType, targetId, channelId) {
        var key = "".concat(conversationType, "_").concat(targetId, "_").concat(channelId);
        return this._draftMap[key];
      };

      ConversationManager.prototype.clearDraft = function (conversationType, targetId, channelId) {
        var key = "".concat(conversationType, "_").concat(targetId, "_").concat(channelId);
        delete this._draftMap[key];
      };

      ConversationManager.prototype.addTagStatus = function (conversationType, targetId, tags, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        var conversation = this._store.get(conversationType, targetId, channelId);

        var _tags = conversation.tags;
        _tags = Object.assign(_tags, tags);

        this._store.set(conversationType, targetId, {
          tags: _tags
        }, channelId);
      };

      ConversationManager.prototype.deleteTagStatus = function (conversationType, targetId, tagIds, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        var tags = this._store.get(conversationType, targetId, channelId).tags;

        tagIds.forEach(function (id) {
          delete tags[id];
        });

        this._store.set(conversationType, targetId, {
          tags: tags
        }, channelId);
      };

      ConversationManager.prototype.getConversationListForTag = function () {
        return this._store.getValueForTag();
      };

      ConversationManager.prototype.getBlockConversationList = function () {
        var allConverList = this._store.getValue();

        return allConverList.filter(function (item) {
          return item.notificationStatus === NotificationStatus$1.OPEN || item.notificationLevel !== -1 && item.notificationLevel !== 0;
        }).map(function (item) {
          return {
            conversationType: item.conversationType,
            targetId: item.targetId,
            channelId: item.channelId
          };
        });
      };

      ConversationManager.prototype.getTopConversationList = function () {
        var allConverList = this._store.getValue() || {};
        return allConverList.filter(function (item) {
          return item.isTop;
        }).map(function (item) {
          return {
            conversationType: item.conversationType,
            targetId: item.targetId,
            channelId: item.channelId
          };
        });
      };

      ConversationManager.prototype.adaptOldStore = function () {
        this._store.adaptOldStore();
      };

      ConversationManager.prototype.getUnreadMentionedCount = function (channelId, conversationType, targetId) {
        if (channelId === void 0) {
          channelId = '';
        }

        var localConversation = this.get(conversationType, targetId, channelId);
        return localConversation.unreadMentionedCount || 0;
      };

      ConversationManager.prototype.getAllUnreadMentionedCount = function () {
        var localConversations = this._store.getValue();

        var totalUnreadCount = 0;
        localConversations.forEach(function (_a) {
          var unreadMentionedCount = _a.unreadMentionedCount;
          unreadMentionedCount = unreadMentionedCount || 0;
          totalUnreadCount += Number(unreadMentionedCount);
        });
        return totalUnreadCount;
      };

      ConversationManager.prototype.getAllConversationState = function () {
        var localConversations = this._store.getValue();

        var list = localConversations.filter(function (item) {
          return item.unreadMessageCount || item.unreadMentionedCount;
        });
        return list.map(function (item) {
          return {
            conversationType: item.conversationType,
            targetId: item.targetId,
            channelId: item.channelId,
            unreadCount: item.unreadMessageCount || 0,
            unreadMentionedCount: item.unreadMentionedCount || 0
          };
        });
      };

      return ConversationManager;
    }();

    var UserSettingManager = function () {
      function UserSettingManager(engine, appKey, currentUserId, tagWatcherFunc) {
        this._pullQueue = [];
        this._isPulling = false;
        this._storageTagKey = "tag-".concat(appKey, "-").concat(currentUserId);
        this._storagePullTimeKey = "us-s-".concat(appKey, "-").concat(currentUserId);
        this._storage = createRootStorage(engine.runtime);
        this._engine = engine;
        this._tagWatcherFunc = tagWatcherFunc;
      }

      UserSettingManager.prototype._updateTag = function (tagsSetting) {
        var tags = tagsSetting.tags;
        var localTags = {};
        tags.forEach(function (tag) {
          localTags[tag.tagId] = {
            tagName: tag.tagName,
            createdTime: tag.createdTime
          };
        });

        this._storage.set(this._storageTagKey, localTags);

        this._tagWatcherFunc();
      };

      UserSettingManager.prototype.addTag = function (tags, version) {
        var localTags = this._storage.get(this._storageTagKey) || {};
        tags.forEach(function (tag) {
          var _a;

          var createdTime = ((_a = localTags[tag.tagId]) === null || _a === void 0 ? void 0 : _a.createdTime) || tag.createdTime || 0;
          localTags[tag.tagId] = {
            tagName: tag.tagName,
            createdTime: createdTime
          };
        });

        this._storage.set(this._storageTagKey, localTags);

        this._storage.set(this._storagePullTimeKey, version);
      };

      UserSettingManager.prototype.deleteTag = function (tagIds, version) {
        var localTags = this._storage.get(this._storageTagKey) || {};
        tagIds.forEach(function (tagId) {
          delete localTags[tagId];
        });

        this._storage.set(this._storageTagKey, localTags);

        this._storage.set(this._storagePullTimeKey, version);
      };

      UserSettingManager.prototype.getTagsInfo = function () {
        return this._storage.get(this._storageTagKey) || {};
      };

      UserSettingManager.prototype.getTags = function () {
        var localTags = this._storage.get(this._storageTagKey) || {};
        var list = [];

        for (var tagId in localTags) {
          list.push({
            tagId: tagId,
            tagName: localTags[tagId].tagName,
            createdTime: localTags[tagId].createdTime,
            conversationCount: 0
          });
        }

        function compare(a, b) {
          return (a.createdTime || 0) - (b.createdTime || 0);
        }

        return list.sort(compare);
      };

      UserSettingManager.prototype.getTagById = function (tagId) {
        var localTags = this._storage.get(this._storageTagKey) || {};
        return localTags[tagId] ? {
          tagId: tagId,
          tagName: localTags[tagId].tagName,
          createdTime: localTags[tagId].createdTime,
          conversationCount: 0
        } : null;
      };

      UserSettingManager.prototype._startPull = function () {
        return __awaiter(this, void 0, void 0, function () {
          var time, _a, code, data, _b, settings, version, tagsSetting;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                if (this._isPulling || this._pullQueue.length === 0) {
                  return [2];
                }

                this._isPulling = true;
                time = this._pullQueue.splice(0, 1)[0];
                return [4, this._engine.pullUserSettings(time)];

              case 1:
                _a = _c.sent(), code = _a.code, data = _a.data;

                if (code === ErrorCode$1.SUCCESS && !isUndefined(data)) {
                  _b = data, settings = _b.settings, version = _b.version;
                  tagsSetting = settings.Tag;

                  if (!isUndefined(tagsSetting)) {
                    this._updateTag(tagsSetting);
                  }

                  this._storage.set(this._storagePullTimeKey, version);

                  this._isPulling = false;

                  this._startPull();
                } else {
                  this._isPulling = false;

                  this._startPull();
                }

                return [2];
            }
          });
        });
      };

      UserSettingManager.prototype.pullUserSettings = function (newPullTime) {
        var time = this._storage.get(this._storagePullTimeKey) || 0;

        if (newPullTime > time || newPullTime === 0) {
          this._pullQueue.push(time);

          this._startPull();
        }
      };

      UserSettingManager.prototype.getVersion = function () {
        return this._storage.get(this._storagePullTimeKey) || 0;
      };

      return UserSettingManager;
    }();

    function uploadNaviStatisData(runtime) {
      return __awaiter(this, void 0, void 0, function () {
        var tag, _a, sdkPrivate, serverPrivate, bundleId, _b, protocol, startTime, endTime, code, host, networkType, error_1, duration, serverContent;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              tag = StatisticsTag.IM_NAVI;
              _a = logger$1.getStatisticsBaseData(), sdkPrivate = _a.sdkPrivate, serverPrivate = _a.serverPrivate, bundleId = _a.bundleId;
              _b = logger$1.getStatisticsData(tag), protocol = _b.protocol, startTime = _b.startTime, endTime = _b.endTime, code = _b.code, host = _b.host;
              networkType = NetworkType.UNKONWN;
              _c.label = 1;

            case 1:
              _c.trys.push([1, 3,, 4]);

              return [4, runtime.getNetworkType()];

            case 2:
              networkType = _c.sent();
              return [3, 4];

            case 3:
              error_1 = _c.sent();
              logger$1.debug(error_1.message);
              return [3, 4];

            case 4:
              duration = 0;

              if (isNumber(startTime) && isNumber(endTime) && endTime > startTime && startTime) {
                duration = endTime - startTime;
              }

              serverContent = {
                spr: sdkPrivate,
                pr: serverPrivate,
                bid: bundleId,
                ptc: protocol,
                dur: duration,
                cod: code,
                hos: host,
                net: networkType
              };
              logger$1.reportStatisticsLog(tag, serverContent);
              return [2];
          }
        });
      });
    }

    var JsNavi = function (_super) {
      __extends(JsNavi, _super);

      function JsNavi(_runtime, _options) {
        var _this = _super.call(this, _runtime, _options) || this;

        _this._miniConnectUrl = '';
        _this._connectType = _options.connectionType;
        return _this;
      }

      JsNavi.prototype._formatJSONPUrl = function (url, token, appkey, jsonpFunc) {
        var path = this._runtime.isSupportSocket() && this._connectType === 'websocket' ? 'navi' : 'cometnavi';
        var tmpUrl = "".concat(url, "/").concat(path, ".js?appId=").concat(appkey, "&token=").concat(encodeURIComponent(token), "&callBack=").concat(jsonpFunc, "&v=").concat(this._apiVersion, "&r=").concat(Date.now());
        return tmpUrl;
      };

      JsNavi.prototype.getInfo = function (token, dynamicUris, force) {
        var _a;

        return __awaiter(this, void 0, void 0, function () {
          var connectUrl;
          return __generator(this, function (_b) {
            if (!this._runtime.useNavi) {
              connectUrl = void 0;

              {
                if (this._runtime.isSupportSocket() && this._connectType === 'websocket') {
                  connectUrl = MINI_SOCKET_CONNECT_URIS.join(',');
                } else {
                  connectUrl = MINI_COMET_CONNECT_URIS.join(',');
                }
              }

              this._miniConnectUrl = ((_a = this._options.miniCMPProxy) === null || _a === void 0 ? void 0 : _a.length) ? this._options.miniCMPProxy.join(',') : connectUrl || '';
              dynamicUris = [];
            }

            return [2, _super.prototype.getInfo.call(this, token, dynamicUris, force)];
          });
        });
      };

      JsNavi.prototype._reqNavi = function (uris, appkey, token) {
        return __awaiter(this, void 0, void 0, function () {
          var jsonpFunc, i, len, url, res, endTime, code, matchResult, jsonStr, naviInfo, protocol, naviInfo;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                jsonpFunc = 'getServerEndpoint';
                i = 0, len = uris.length;
                _a.label = 1;

              case 1:
                if (!(i < len)) return [3, 4];
                url = this._formatJSONPUrl(uris[i], token, appkey, jsonpFunc);
                logger$1.debug("req navi => ".concat(url));
                return [4, this._runtime.httpReq({
                  url: url,
                  timeout: NAVI_REQ_TIMEOUT,
                  dataType: 'text'
                })];

              case 2:
                res = _a.sent();
                endTime = new Date().getTime();
                logger$1.setStatisticsData(StatisticsTag.IM_NAVI, {
                  endTime: endTime
                });

                if (res.status !== 200) {
                  code = void 0;

                  if (res.status === 403) {
                    code = ErrorCode$1.RC_CONN_USER_OR_PASSWD_ERROR;
                    logger$1.error('request navi error: ' + code);
                  } else if (res.status === 401) {
                    code = ErrorCode$1.RC_CONN_APP_BLOCKED_OR_DELETED;
                    logger$1.error('request navi error: ' + code);
                  }

                  logger$1.setStatisticsData(StatisticsTag.IM_NAVI, {
                    code: code
                  });
                  uploadNaviStatisData(this._runtime);
                  return [3, 3];
                }

                try {
                  matchResult = res.data.match(/{[\d\D]+}/);
                  jsonStr = matchResult && matchResult[0] ? matchResult[0] : '';

                  if (jsonStr.indexOf('{\\"code\\":') === 0) {
                    jsonStr = JSON.parse('"' + jsonStr + '"');
                  }

                  naviInfo = JSON.parse(jsonStr);
                  protocol = /^https/.test(url) ? 'https' : 'http';
                  naviInfo.protocol = protocol;

                  if (!this._runtime.useNavi) {
                    naviInfo.server = '';
                    naviInfo.backupServer = this._miniConnectUrl;
                    naviInfo.logSwitch = 0;
                  }

                  logger$1.updateStatisticsBaseData({
                    serverPrivate: naviInfo.type === EnterpriseType.PRIVATE ? EnterpriseType.PRIVATE : EnterpriseType.OPEN
                  });
                  logger$1.setStatisticsData(StatisticsTag.IM_NAVI, {
                    code: ErrorCode$1.SUCCESS
                  });

                  if (naviInfo.userId) {
                    logger$1.updateUploadLogAttr({
                      userId: naviInfo.userId
                    });
                    Logger.init(naviInfo.userId);
                  }

                  uploadNaviStatisData(this._runtime);
                  return [2, naviInfo];
                } catch (err) {
                  logger$1.error('parse navi err =>', err);
                }

                _a.label = 3;

              case 3:
                i += 1;
                return [3, 1];

              case 4:
                if (!this._runtime.useNavi) {
                  naviInfo = {
                    code: 200,
                    protocol: 'https',
                    server: '',
                    voipCallInfo: '',
                    kvStorage: 0,
                    openHttpDNS: false,
                    historyMsg: false,
                    chatroomMsg: false,
                    uploadServer: 'https://upload.qiniup.com',
                    bosAddr: 'https://gz.bcebos.com',
                    location: '',
                    monitor: 0,
                    joinMChrm: false,
                    openMp: 0,
                    openUS: 0,
                    grpMsgLimit: 0,
                    isFormatted: 0,
                    gifSize: 2048,
                    logSwitch: 0,
                    logPolicy: '',
                    compDays: 0,
                    msgAck: '',
                    activeServer: '',
                    qnAddr: '',
                    extkitSwitch: 0,
                    alone: false,
                    voipServer: '',
                    offlinelogserver: '',
                    backupServer: this._miniConnectUrl
                  };
                  logger$1.setStatisticsData(StatisticsTag.IM_NAVI, {
                    code: naviInfo.code,
                    startTime: 0,
                    endTime: 0,
                    host: ''
                  });
                  uploadNaviStatisData(this._runtime);
                  return [2, naviInfo];
                }

                return [2, null];
            }
          });
        });
      };

      return JsNavi;
    }(ANavi);

    var RTCEntryHandler = function () {
      function RTCEntryHandler(engine) {
        this._pullQueue = [];
        this._isPulling = false;
        this._pullTime = 0;
        this._engine = engine;
      }

      RTCEntryHandler.prototype._startPull = function () {
        return __awaiter(this, void 0, void 0, function () {
          var _a, roomId, timestamp, pulledUpTime, _b, code, data;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                if (this._isPulling || this._pullQueue.length === 0) {
                  return [2];
                }

                this._isPulling = true;
                _a = this._pullQueue.splice(0, 1)[0], roomId = _a.roomId, timestamp = _a.timestamp;
                pulledUpTime = this._pullTime;

                if (pulledUpTime > timestamp) {
                  this._isPulling = false;

                  this._startPull();

                  return [2];
                }

                return [4, this._engine.pullRTCRoomEntry(roomId, pulledUpTime)];

              case 1:
                _b = _c.sent(), code = _b.code, data = _b.data;

                if (code === ErrorCode$1.SUCCESS) {
                  this._isPulling = false;
                  this._pullTime = data.syncTime || 0;

                  this._startPull();
                } else {
                  this._startPull();
                }

                return [2];
            }
          });
        });
      };

      RTCEntryHandler.prototype.pullEntry = function (roomId, timestamp) {
        this._pullQueue.push({
          roomId: roomId,
          timestamp: timestamp
        });

        this._startPull();
      };

      RTCEntryHandler.prototype.reset = function () {
        this._pullTime = 0;
        this._isPulling = false;
      };

      return RTCEntryHandler;
    }();

    var generateKey = function generateKey(appkey, userId) {
      return ['send_msg', appkey, userId].join('_');
    };

    var SendMessageStore = function () {
      function SendMessageStore(_runtime, _appkey) {
        this._runtime = _runtime;
        this._appkey = _appkey;
        this._sendMessageMap = {};
        this._userId = '';
      }

      SendMessageStore.prototype.init = function (userId) {
        this._userId = userId;
        var key = generateKey(this._appkey, userId);
        this._sendMessageMap = this._getLocalInfo(key);
      };

      SendMessageStore.prototype._getLocalInfo = function (key) {
        var localInfo = this._runtime.localStorage.getItem(key);

        try {
          return localInfo ? JSON.parse(localInfo) : {};
        } catch (error) {
          return {};
        }
      };

      SendMessageStore.prototype.setMessage = function (messageUID, timestamp) {
        this._sendMessageMap[messageUID] = timestamp;
        var key = generateKey(this._appkey, this._userId);

        var localInfo = this._getLocalInfo(key);

        localInfo[messageUID] = timestamp;

        this._runtime.localStorage.setItem(key, JSON.stringify(localInfo));
      };

      SendMessageStore.prototype.getSendMessageMap = function () {
        return this._sendMessageMap;
      };

      SendMessageStore.prototype.removeByUID = function (messageUID) {
        delete this._sendMessageMap[messageUID];
      };

      SendMessageStore.prototype.removeByTimestamp = function (timestamp) {
        var key = generateKey(this._appkey, this._userId);

        var localInfo = this._getLocalInfo(key);

        Object.keys(localInfo).forEach(function (item) {
          if (localInfo[item] < timestamp) {
            delete localInfo[item];
          }
        });

        this._runtime.localStorage.setItem(key, JSON.stringify(localInfo));
      };

      return SendMessageStore;
    }();

    var _a;
    (_a = {}, _a[ConversationType$1.PRIVATE] = Topic$1.qryPMsg, _a[ConversationType$1.GROUP] = Topic$1.qryGMsg, _a[ConversationType$1.CHATROOM] = Topic$1.qryCHMsg, _a[ConversationType$1.CUSTOMER_SERVICE] = Topic$1.qryCMsg, _a[ConversationType$1.SYSTEM] = Topic$1.qrySMsg, _a);
    var UpStreamMessageTopics = [Topic$1[Topic$1.recallMsg], Topic$1[Topic$1.ppMsgS], Topic$1[Topic$1.pgMsgS], Topic$1[Topic$1.ppMsgP], Topic$1[Topic$1.pgMsgP], Topic$1[Topic$1.chatMsg], Topic$1[Topic$1.pcMsgP], Topic$1[Topic$1.prMsgS], Topic$1[Topic$1.updUgRTime]];

    var UltraGroupStore = function () {
      function UltraGroupStore(runtime, _appkey, _currentUserId) {
        this.ULTRA_GROUP_CONVERSATION = 'ultragroupconversation';
        var key = "".concat(this.ULTRA_GROUP_CONVERSATION, "-").concat(_appkey, "-").concat(_currentUserId);
        this._localStore = new AppStorage(runtime, key);
      }

      UltraGroupStore.prototype.set = function (type, targetId, conversation, channelId) {
        var key = this._getStoreKey(type, targetId, channelId);

        var local = this._localStore.get(key) || {};

        for (var key_1 in conversation) {
          var storageKey = ConversationKey2StorageKey[key_1];
          var val = conversation[key_1];

          if (isUndefined(storageKey) || isUndefined(val)) {
            continue;
          }

          var defaultVal = StorageKey2ConversationKey[storageKey].defaultVal;

          if (val === defaultVal) {
            delete local[storageKey];
          } else {
            local[storageKey] = val;
          }
        }

        if (notEmptyObject(local)) {
          this._localStore.set(key, local);
        } else {
          this._localStore.remove(key);
        }
      };

      UltraGroupStore.prototype.get = function (type, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        var key = this._getStoreKey(type, targetId, channelId);

        var local = this._localStore.get(key) || {};
        var conversation = {};

        for (var key_2 in StorageKey2ConversationKey) {
          var _a = StorageKey2ConversationKey[key_2],
              keyName = _a.keyName,
              defaultVal = _a.defaultVal;
          conversation[keyName] = local[key_2] || cloneByJSON(defaultVal);
        }

        return conversation;
      };

      UltraGroupStore.prototype._getStoreKey = function (type, targetId, channelId) {
        return "".concat(channelId, "_").concat(type, "_").concat(targetId);
      };

      return UltraGroupStore;
    }();
    var StorageKey2ConversationKey = {
      nc: {
        keyName: 'notificationStatus',
        defaultVal: 2
      },
      nl: {
        keyName: 'notificationLevel',
        defaultVal: 0
      }
    };
    var ConversationKey2StorageKey = {};

    for (var key in StorageKey2ConversationKey) {
      var keyName = StorageKey2ConversationKey[key].keyName;
      ConversationKey2StorageKey[keyName] = key;
    }

    var UltraGroupManager = function () {
      function UltraGroupManager(engine, _appkey, _currentUserId) {
        this._store = new UltraGroupStore(engine.runtime, _appkey, _currentUserId);
      }

      UltraGroupManager.prototype.addUltraGroupStatus = function (statusItem) {
        var conversationType = statusItem.conversationType,
            targetId = statusItem.targetId,
            notificationStatus = statusItem.notificationStatus,
            notificationLevel = statusItem.notificationLevel,
            channelId = statusItem.channelId;
        if (conversationType !== ConversationType$1.ULTRA_GROUP) return;

        this._store.set(conversationType, targetId, {
          notificationStatus: notificationStatus,
          notificationLevel: notificationLevel
        }, channelId);
      };

      UltraGroupManager.prototype.get = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._store.get(conversationType, targetId, channelId);
      };

      return UltraGroupManager;
    }();

    var getPubTopic = function getPubTopic(type) {
      var _a;

      return (_a = {}, _a[ConversationType$1.PRIVATE] = Topic$1.ppMsgP, _a[ConversationType$1.GROUP] = Topic$1.pgMsgP, _a[ConversationType$1.CHATROOM] = Topic$1.chatMsg, _a[ConversationType$1.CUSTOMER_SERVICE] = Topic$1.pcMsgP, _a[ConversationType$1.RTC_ROOM] = Topic$1.prMsgS, _a)[type];
    };

    var getStatPubTopic = function getStatPubTopic(type) {
      var _a;

      return (_a = {}, _a[ConversationType$1.PRIVATE] = Topic$1.ppMsgS, _a[ConversationType$1.GROUP] = Topic$1.pgMsgS, _a)[type];
    };

    var transSentAttrs2IReceivedMessage = function transSentAttrs2IReceivedMessage(conversationType, targetId, options, messageUId, sentTime, senderUserId) {
      return {
        conversationType: conversationType,
        targetId: targetId,
        senderUserId: senderUserId,
        messageDirection: MessageDirection$1.SEND,
        isCounted: !!options.isCounted,
        isMentioned: !!options.isMentioned,
        content: options.content,
        messageType: options.messageType,
        isOffLineMessage: false,
        isPersited: !!options.isPersited,
        messageUId: messageUId,
        sentTime: sentTime,
        receivedTime: 0,
        disableNotification: !!options.disableNotification,
        isStatusMessage: !!options.isStatusMessage,
        canIncludeExpansion: !!options.canIncludeExpansion,
        expansion: options.canIncludeExpansion ? options.expansion : null,
        receivedStatus: ReceivedStatus$1.UNREAD,
        pushConfig: options.pushConfig,
        channelId: options.channelId,
        isInterrupt: options.isInterrupt
      };
    };

    var handleInnerMsgOptions = function handleInnerMsgOptions(options, currentUserId) {
      var messageType = options.messageType;

      if (messageType === 'RC:SRSMsg') {
        Object.assign(options, {
          directionalUserIdList: [currentUserId]
        });
      }

      return options;
    };

    var conversationSort = function conversationSort(cons) {
      return cons.sort(function (item1, item2) {
        var _a, _b;

        var time1 = ((_a = item1.latestMessage) === null || _a === void 0 ? void 0 : _a.sentTime) || 0;
        var time2 = ((_b = item2.latestMessage) === null || _b === void 0 ? void 0 : _b.sentTime) || 0;
        return time2 - time1;
      });
    };

    var JSEngine = function (_super) {
      __extends(JSEngine, _super);

      function JSEngine(runtime, watcher, initOptions) {
        var _this = _super.call(this, runtime, watcher, initOptions) || this;

        _this._customMessageType = {};
        _this._reconnectTimer = -1;
        _this._pullOfflineFinished = false;
        _this._connectedTime = 0;
        _this._localConnectedTime = 0;
        _this._status = ConnectionStatus$1.DISCONNECTED;
        _this._pullingMsg = false;
        _this._pullQueue = [];
        _this._chrmsQueue = {};
        _this._latestSyncTimestamp = 0;
        _this._intervalTimer = -1;
        _this._pullChatroomEntryTimestamp = 0;
        _this._intervalTimerForChrmPull = -1;
        _this._lastSyncUltraMsgTimeStamp = 0;
        _this._lastSyncUltraMsgLocalTimeStamp = 0;
        _this._ultraGroupTimer = -1;
        _this._isUltraPulling = false;
        _this._ultraGroupTimeQue = [];
        _this._isUltraGroupListExist = false;
        _this._ultraGroupMap = {};
        _this._firstPullUltraGroupTime = 0;
        _this._ultraMsgMap = {};
        _this._pullUltraChangeMessageQue = [];
        _this._isPullingUltraChangeMessage = false;
        _this._lastPullingUltraChangeMessageTime = 0;
        _this._ultraMsgChangeMap = {};
        _this._letterbox = new Letterbox(runtime, initOptions.appkey);
        _this._sendMessageStore = new SendMessageStore(runtime, initOptions.appkey);
        _this._chrmEntryHandler = new ChrmEntryHandler(_this);
        return _this;
      }

      JSEngine.prototype._createNavi = function () {
        return new JsNavi(this.runtime, this._options);
      };

      JSEngine.prototype.getConnectedTime = function () {
        return this._connectedTime;
      };

      JSEngine.prototype.connect = function (token, naviInfo) {
        return __awaiter(this, void 0, void 0, function () {
          var hosts, backupServer, channel, protocolVer, code;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                hosts = [];
                this._naviInfo = naviInfo;

                if (naviInfo.server) {
                  hosts.push(naviInfo.server);
                } else {
                  logger$1.warn('navi.server is invalid');
                }

                backupServer = naviInfo.backupServer;
                backupServer && backupServer.split(',').forEach(function (host) {
                  if (hosts.indexOf(host) < 0) {
                    hosts.push(host);
                  }
                });

                if (hosts.length === 0) {
                  logger$1.error('navi invaild.', hosts);
                  return [2, ErrorCode$1.UNKNOWN];
                }

                channel = this.runtime.createDataChannel({
                  status: function status(_status) {
                    _this._connectionStatusHandler(_status, token, hosts, naviInfo.protocol);
                  },
                  signal: this._signalHandler.bind(this)
                }, this._options.connectionType);
                protocolVer = ConnAckProtocolVer.V3;

                if (naviInfo.openAnti === 1) {
                  protocolVer = ConnAckProtocolVer.V4;
                }

                return [4, channel.connect(this._appkey, token, hosts, naviInfo.protocol, this._apiVer, protocolVer)];

              case 1:
                code = _a.sent();

                if (code === ErrorCode$1.SUCCESS) {
                  this._channel = channel;
                  this.currentUserId = channel.userId;
                  this._connectedTime = channel.connectedTime;
                  this._localConnectedTime = Math.floor((Date.now() + channel.sendConnectTime) / 2);

                  this._watcher.status(ConnectionStatus$1.CONNECTED);

                  this._status = ConnectionStatus$1.CONNECTED;
                  this._pullOfflineFinished = false;
                  this._conversationManager = new ConversationManager(this, this._appkey, this.currentUserId, this._watcher.conversation, this._watcher.conversationTag);
                  this._ultraGroupManager = new UltraGroupManager(this, this._appkey, this.currentUserId);

                  this._conversationManager.startPullConversationStatus(0);

                  this._userSettingManager = new UserSettingManager(this, this._appkey, this.currentUserId, this._watcher.tag);

                  this._userSettingManager.pullUserSettings(0);

                  this._sendMessageStore.init(this.currentUserId);

                  this._conversationManager.adaptOldStore();

                  this._rtcKVManager = new RTCEntryHandler(this);
                  this._joinedChrmManager = new JoinedChrmManager(this.runtime, this._appkey, this.currentUserId, naviInfo.joinMChrm);

                  this._startSyncInterval();

                  if (naviInfo.ugMsg === 1) {
                    this._startUltraSyncInterval();
                  }
                } else {
                  channel.close();
                }

                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype._connectionStatusHandler = function (status, token, hosts, protocol) {
        logger$1.warn('connection status changed:', status);
        this._status = status;

        if (status === ConnectionStatus$1.CONNECTING) {
          this._watcher.status(status);

          return;
        }

        if (status === ConnectionStatus$1.CONNECTED) {
          this._watcher.status(status);

          return;
        }

        if (!this._channel || status === ConnectionStatus$1.DISCONNECTED) {
          this._watcher.status(status);

          return;
        }

        if (status === ConnectionStatus$1.BLOCKED || status === ConnectionStatus$1.KICKED_OFFLINE_BY_OTHER_CLIENT || status === ConnectionStatus$1.DISCONNECT_BY_SERVER) {
          this.disconnect();

          this._watcher.status(status);

          return;
        }

        if (status === ConnectionStatus$1.REDIRECT) {
          this._watcher.status(status);

          return;
        }

        this._watcher.status(status);

        this._try2Reconnect(token, hosts, protocol);
      };

      JSEngine.prototype._try2Reconnect = function (token, hosts, protocol) {
        return __awaiter(this, void 0, void 0, function () {
          var protocolVer, code;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2];
                }

                protocolVer = ConnAckProtocolVer.V3;

                if (this._naviInfo.openAnti === 1) {
                  protocolVer = ConnAckProtocolVer.V4;
                }

                return [4, this._channel.connect(this._appkey, token, hosts, protocol, this._apiVer, protocolVer)];

              case 1:
                code = _a.sent();

                if (code === ErrorCode$1.SUCCESS) {
                  this._pullOfflineFinished = false;

                  this._startSyncInterval();

                  this._watcher.status(ConnectionStatus$1.CONNECTED);

                  this._status = ConnectionStatus$1.CONNECTED;

                  if (this._naviInfo.ugMsg === 1) {
                    this._startUltraSyncInterval();
                  }

                  this._rejoinChrm();

                  logger$1.__insertLogIntoDatabase();

                  return [2];
                }

                this._watcher.status(ConnectionStatus$1.WEBSOCKET_UNAVAILABLE);

                this._status = ConnectionStatus$1.WEBSOCKET_UNAVAILABLE;
                this._reconnectTimer = setTimeout(function () {
                  _this._reconnectTimer = -1;

                  _this._try2Reconnect(token, hosts, protocol);
                }, 5000);
                return [2];
            }
          });
        });
      };

      JSEngine.prototype._signalHandler = function (signal, ack) {
        var syncMsg = signal.syncMsg,
            topic = signal.topic;

        if (syncMsg) {
          this._receiveSyncMsg(signal, ack);

          return;
        }

        var tmpTopic = Topic$1[topic];

        if (!tmpTopic) {
          logger$1.error('unknown topic:', topic);
          return;
        }

        switch (tmpTopic) {
          case Topic$1.s_ntf:
            logger$1.info("recv s_ntf -> signal.messageId: ".concat(signal.messageId));

            this._pullMsg(signal);

            break;

          case Topic$1.s_msg:
            this._receiveMsg(signal);

            break;

          case Topic$1.s_cmd:
            this._receiveStateNotify(signal);

            break;

          case Topic$1.s_us:
            this._receiveSettingNotify(signal);

            break;

          case Topic$1.rtc_ntf:
            this._receiveRtcKv(signal);

            break;

          case Topic$1.s_opNtf:
            this._pullOperateStatusNotify(signal);

            break;
        }
      };

      JSEngine.prototype._receiveStateNotify = function (signal) {
        var _a;

        var _b = (_a = this._channel) === null || _a === void 0 ? void 0 : _a.codec.decodeByPBName(signal.data, PBName.NotifyMsg),
            time = _b.time,
            type = _b.type,
            chrmId = _b.chrmId;

        switch (type) {
          case 2:
            this._chrmEntryHandler.pullEntry(chrmId, time);

            break;

          case 3:
            this._conversationManager.startPullConversationStatus(time);

            break;

          case 4:
            this._chrmEntryHandler.reset(chrmId);

            this._watcher.chatroom({
              chatroomDestroyed: signal.targetId
            });

            break;

          case 6:
            this._ultraGroupTimeQue.push(time);

            this._syncUltraMsg(this._lastSyncUltraMsgTimeStamp);

            break;

          case 7:
            this._pullUltraChangeMessageQue.push(time);

            this._pullUltraChangeMessageList(this._lastPullingUltraChangeMessageTime);

        }
      };

      JSEngine.prototype._receiveSettingNotify = function (signal) {
        var _a;

        var version = ((_a = this._channel) === null || _a === void 0 ? void 0 : _a.codec.decodeByPBName(signal.data, PBName.UserSettingNotification)).version;

        this._userSettingManager.pullUserSettings(version);
      };

      JSEngine.prototype._receiveRtcKv = function (signal) {
        var _a;

        var _b = (_a = this._channel) === null || _a === void 0 ? void 0 : _a.codec.decodeByPBName(signal.data, PBName.RtcNotifyMsg),
            time = _b.time,
            type = _b.type,
            roomId = _b.roomId;

        switch (type) {
          case 1:
            this._rtcKVManager.pullEntry(roomId, time);

            break;
        }
      };

      JSEngine.prototype._receiveMessageExpansion = function (message) {
        var content = message.content;
        var put = content.put,
            del = content.del,
            mid = content.mid;

        if (put) {
          this._watcher.expansion({
            updatedExpansion: {
              messageUId: mid,
              expansion: put
            }
          });
        }

        if (del) {
          this._watcher.expansion({
            deletedExpansion: {
              messageUId: mid,
              deletedKeys: del
            }
          });
        }
      };

      JSEngine.prototype._receiveSyncMsg = function (signal, ack) {
        var _a, _b;

        if (!UpStreamMessageTopics.includes(signal.topic)) return;

        if (signal.topic === Topic$1[Topic$1.updUgRTime]) {
          var _c = (_a = this._channel) === null || _a === void 0 ? void 0 : _a.codec.decodeByPBName(signal.data, PBName.SessionMsgReadInput),
              targetId = _c.channelId,
              channelId = _c.busChannel;

          var ultraGroup = this._ultraGroupMap[channelId + '_' + targetId];

          if (ultraGroup) {
            ultraGroup.unreadMessageCount = 0;
            ultraGroup.unreadMentionedCount = 0;
            ultraGroup.lastReadTime = ack.timestamp;

            this._watcher.conversation(clone([ultraGroup]));
          }

          if (ack) {
            this._ultraMsgMap[ack.messageUId] = ack.timestamp;
          }

          return;
        }

        var msg = (_b = this._channel) === null || _b === void 0 ? void 0 : _b.codec.decodeByPBName(signal.data, PBName.UpStreamMessage, {
          currentUserId: this.currentUserId,
          signal: signal
        });
        msg = this._handleMsgProperties(msg);

        if (ack) {
          msg.sentTime = ack.timestamp;
          msg.messageUId = ack.messageUId;
        }

        if (this._pullingMsg) {
          this._pullQueue.push((ack === null || ack === void 0 ? void 0 : ack.timestamp) || msg.sentTime);

          return;
        }

        if (ack) {
          this._sendMessageStore.setMessage(ack.messageUId, ack.timestamp);
        }

        if (msg.messageType === MessageType$2.EXPANSION_NOTIFY) {
          this._receiveMessageExpansion(msg);

          return;
        }

        if (msg.messageType === MessageType$2.SYNC_READ_STATUS) {
          this._conversationManager.clearUnreadCount(msg.conversationType, msg.targetId, msg.channelId);
        }

        this._conversationManager.setConversationCacheByMessage(msg, true);

        this._watcher.batchMessage([msg]);
      };

      JSEngine.prototype._pullMsg = function (signal) {
        if (!this._channel) {
          return;
        }

        var _a = this._channel.codec.decodeByPBName(signal.data, PBName.NotifyMsg),
            type = _a.type,
            chrmId = _a.chrmId,
            time = _a.time;

        logger$1.info("s_ntf -> type: ".concat(type, ", chrmId: ").concat(chrmId, ", time: ").concat(time));

        if (type === 2) {
          var info = this._chrmsQueue[chrmId];

          if (!info) {
            return;
          }

          info.queue.push(time);

          this._pullChrmMsg(chrmId);
        } else {
          this._pullQueue.push(time);

          this._syncMsg();
        }
      };

      JSEngine.prototype._startSyncInterval = function () {
        var _this = this;

        this._stopSyncInterval();

        var d = 3 * 60 * 1000;
        this._intervalTimer = setInterval(function () {
          if (Date.now() - _this._latestSyncTimestamp >= d) {
            _this._syncMsg();
          }
        }, 30000);
        this._latestSyncTimestamp = Date.now();

        this._syncMsg();
      };

      JSEngine.prototype._stopSyncInterval = function () {
        if (this._intervalTimer !== -1) {
          clearInterval(this._intervalTimer);
          this._intervalTimer = -1;
        }
      };

      JSEngine.prototype._syncMsg = function () {
        return __awaiter(this, void 0, void 0, function () {
          var outboxTime, inboxTime, broadcastSyncTime, reqBody, writer, _a, code, data, list, finished, syncTime, _b, newBroadcastSyncTime, newOutboxTime, messages, tmpPullQueue;

          var _c;

          var _this = this;

          return __generator(this, function (_d) {
            switch (_d.label) {
              case 0:
                if (this._pullingMsg) {
                  return [2];
                }

                if (!this._channel) {
                  this._pullingMsg = false;
                  return [2];
                }

                this._pullingMsg = true;
                outboxTime = this._letterbox.getOutboxTime(this.currentUserId);
                inboxTime = this._letterbox.getInboxTime(this.currentUserId);
                broadcastSyncTime = this._letterbox.getBroadcastSyncTime(this.currentUserId);
                logger$1.info("pullMsg -> sendboxTime: ".concat(outboxTime, ", inboxTime: ").concat(inboxTime, ", broadcastSyncTime: ").concat(broadcastSyncTime));
                reqBody = this._channel.codec.encodeSyncMsg({
                  sendboxTime: outboxTime,
                  inboxTime: inboxTime,
                  broadcastSyncTime: broadcastSyncTime
                });
                writer = new QueryWriter(Topic$1[Topic$1.pullMsg], reqBody, this.currentUserId);
                return [4, this._channel.send(writer, PBName.DownStreamMessages, {
                  connectedTime: this._channel.connectedTime,
                  currentUserId: this.currentUserId
                })];

              case 1:
                _a = _d.sent(), code = _a.code, data = _a.data;
                this._latestSyncTimestamp = Date.now();

                if (code !== ErrorCode$1.SUCCESS || !data || isUndefined(data.finished) || isUndefined(data.list) || isUndefined(data.syncTime)) {
                  logger$1.warn('pullMsg failed -> code:', code, ', data: ', data);
                  this._pullingMsg = false;
                  return [2];
                }

                list = data.list, finished = data.finished, syncTime = data.syncTime, _b = data.broadcastSyncTime, newBroadcastSyncTime = _b === void 0 ? 1 : _b;
                logger$1.info("pullMsg success -> syncTime: ".concat(syncTime, ", finished: ").concat(finished));
                newOutboxTime = 0;
                messages = [];
                list.forEach(function (item) {
                  if (item.messageDirection === MessageDirection$1.SEND) {
                    newOutboxTime = Math.max(item.sentTime, newOutboxTime);

                    var _sentMessageMap = _this._sendMessageStore.getSendMessageMap();

                    var timestamp = _sentMessageMap[item.messageUId];

                    if (timestamp) {
                      _this._sendMessageStore.removeByUID(item.messageUId);

                      return;
                    }
                  }

                  if (item.messageType === MessageType$2.EXPANSION_NOTIFY) {
                    _this._receiveMessageExpansion(item);

                    return;
                  }

                  if (item.messageType === MessageType$2.SYNC_READ_STATUS) {
                    if (item.senderUserId !== _this.currentUserId) {
                      return;
                    }

                    _this._conversationManager.clearUnreadCount(item.conversationType, item.targetId, item.channelId);
                  }

                  var msg = _this._handleMsgProperties(item);

                  _this._conversationManager.setConversationCacheByMessage(msg, true);

                  messages.push(msg);
                });

                this._watcher.batchMessage(messages);

                this._letterbox.setInboxTime(syncTime, this.currentUserId);

                this._letterbox.setOutboxTime(newOutboxTime, this.currentUserId);

                this._letterbox.setBroadcastSyncTime(newBroadcastSyncTime, this.currentUserId);

                this._sendMessageStore.removeByTimestamp(newOutboxTime);

                this._pullingMsg = false;
                tmpPullQueue = this._pullQueue.filter(function (timestamp) {
                  return timestamp > syncTime;
                });
                this._pullQueue.length = 0;

                (_c = this._pullQueue).push.apply(_c, tmpPullQueue);

                if (finished && !this._pullOfflineFinished) {
                  this._pullOfflineFinished = true;

                  this._watcher.pullFinished();
                }

                if (!finished || tmpPullQueue.length > 0) {
                  this._syncMsg();
                }

                return [2];
            }
          });
        });
      };

      JSEngine.prototype._receiveMsg = function (signal) {
        if (!this._channel) {
          return;
        }

        if (this._pullingMsg) {
          return;
        }

        if (this._pullQueue.length > 0) {
          this._syncMsg();

          return;
        }

        var msg = this._channel.codec.decodeByPBName(signal.data, PBName.DownStreamMessage, {
          currentUserId: this.currentUserId,
          connectedTime: this._channel.connectedTime
        });

        msg = this._handleMsgProperties(msg);

        if (msg.senderUserId === this.currentUserId) {
          this._sendMessageStore.setMessage(msg.messageUId, msg.sentTime);
        }

        if (!msg.isStatusMessage && msg.senderUserId !== this.currentUserId) {
          this._letterbox.setInboxTime(msg.sentTime, this.currentUserId);
        }

        if (msg.messageType === MessageType$2.EXPANSION_NOTIFY) {
          this._receiveMessageExpansion(msg);

          return;
        }

        if (msg.messageType === MessageType$2.SYNC_READ_STATUS) {
          if (msg.senderUserId !== this.currentUserId) {
            return;
          }
        }

        this._conversationManager.setConversationCacheByMessage(msg, true);

        this._watcher.batchMessage([msg]);
      };

      JSEngine.prototype._handleMsgProperties = function (msgOptions, isSendMsg) {
        if (isSendMsg === void 0) {
          isSendMsg = false;
        }

        var messageType = msgOptions.messageType,
            isCounted = msgOptions.isCounted,
            isPersited = msgOptions.isPersited,
            isStatusMessage = msgOptions.isStatusMessage;
        var options;
        var inRCMessageType = (messageType in SEND_MESSAGE_TYPE_OPTION);
        var inCustomMessageType = (messageType in this._customMessageType);

        if (inRCMessageType) {
          options = __assign(__assign({}, SEND_MESSAGE_TYPE_OPTION[messageType]), {
            isStatusMessage: STATUS_MESSAGE.includes(messageType)
          });
        } else if (inCustomMessageType) {
          options = this._customMessageType[messageType];
        } else {
          options = {
            isCounted: isNull(isCounted) ? false : isCounted,
            isPersited: isNull(isPersited) ? false : isPersited,
            isStatusMessage: false
          };
        }

        Object.assign(msgOptions, options);
        isSendMsg && !isUndefined(isStatusMessage) && (msgOptions.isStatusMessage = isStatusMessage);

        if (!isSendMsg) {
          var userInfo = msgOptions.content.user;

          if (userInfo) {
            var portrait = userInfo.portrait,
                portraitUri = userInfo.portraitUri;
            var value = portrait || portraitUri;

            if (value) {
              userInfo.portrait = userInfo.portraitUri = value;
            }
          }
        }

        return msgOptions;
      };

      JSEngine.prototype.getHistoryMessage = function (conversationType, targetId, timestamp, count, order, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return __awaiter(this, void 0, void 0, function () {
          var _a, currentUserId, channel, hisTopic, needFix, data, resp, code, downstreamData;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _a = this, currentUserId = _a.currentUserId, channel = _a._channel;
                hisTopic = ConversationTypeToQueryHistoryTopic[conversationType] || QueryHistoryTopic.PRIVATE;
                needFix = count === 1 && timestamp === 0;
                if (!channel) return [3, 2];
                data = channel.codec.encodeGetHistoryMsg(targetId, {
                  timestamp: timestamp,
                  count: needFix ? 2 : count,
                  order: order,
                  channelId: channelId
                });
                return [4, channel.send(new QueryWriter(hisTopic, data, currentUserId), PBName.HistoryMsgOuput, {
                  currentUserId: currentUserId,
                  connectedTime: channel.connectedTime,
                  conversation: {
                    targetId: targetId
                  }
                })];

              case 1:
                resp = _b.sent();
                code = resp.code;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                downstreamData = resp.data;

                if (needFix && downstreamData.list.length === 2) {
                  downstreamData.hasMore = true;

                  if (order === 0) {
                    downstreamData.list.shift();
                  } else {
                    downstreamData.list.pop();
                  }
                }

                return [2, {
                  code: code,
                  data: {
                    list: downstreamData.list,
                    hasMore: downstreamData.hasMore
                  }
                }];

              case 2:
                return [2, {
                  code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                }];
            }
          });
        });
      };

      JSEngine.prototype.reportSDKInfo = function (versionInfo) {
        var _a = this,
            currentUserId = _a.currentUserId,
            channel = _a._channel;

        if (channel) {
          logger$1.info('reportSDKInfo ->', versionInfo);
          var data = channel.codec.encodeReportSDKInfo(JSON.stringify(versionInfo));
          var writer = new QueryWriter(Topic$1[Topic$1.reportsdk], data, currentUserId);
          channel.send(writer).then(function (_a) {
            var code = _a.code;

            if (code !== ErrorCode$1.SUCCESS) {
              logger$1.warn("reportSDKInfo failed -> code: ".concat(code));
            }
          });
        }
      };

      JSEngine.prototype.deleteRemoteMessage = function (conversationType, targetId, list, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          var _a, currentUserId, channel, data, writer, resp, code;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _a = this, currentUserId = _a.currentUserId, channel = _a._channel;
                if (!channel) return [3, 2];
                data = channel.codec.encodeDeleteMessages(conversationType, targetId, list, channelId);
                writer = new QueryWriter(QueryTopic.DELETE_MESSAGES, data, currentUserId);
                return [4, channel.send(writer)];

              case 1:
                resp = _b.sent();
                code = resp.code;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, code];
                }

                return [2, code];

              case 2:
                return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
            }
          });
        });
      };

      JSEngine.prototype.deleteRemoteMessageByTimestamp = function (conversationType, targetId, timestamp, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          var _a, currentUserId, channel, data, topic, writer, resp, code;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _a = this, currentUserId = _a.currentUserId, channel = _a._channel;
                if (!channel) return [3, 2];
                data = channel.codec.encodeClearMessages(targetId, timestamp, channelId, conversationType);
                topic = ConversationTypeToClearMessageTopic[conversationType];
                writer = new QueryWriter(topic, data, currentUserId);
                return [4, channel.send(writer)];

              case 1:
                resp = _b.sent();
                code = resp.code;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, code];
                }

                return [2, code];

              case 2:
                return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
            }
          });
        });
      };

      JSEngine.prototype.getConversationList = function (count, conversationType, startTime, order, channelId) {
        if (count === void 0) {
          count = 300;
        }

        return __awaiter(this, void 0, void 0, function () {
          var _a, currentUserId, channel, buff, writer, resp, code, data;

          var _this = this;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _a = this, currentUserId = _a.currentUserId, channel = _a._channel;
                conversationType = conversationType || ConversationType$1.PRIVATE;
                if (!channel) return [3, 2];
                buff = channel.codec.encodeOldConversationList({
                  count: count,
                  type: conversationType,
                  startTime: startTime,
                  order: order
                });
                writer = new QueryWriter(QueryTopic.GET_OLD_CONVERSATION_LIST, buff, currentUserId);
                return [4, channel.send(writer, PBName.RelationsOutput, {
                  currentUserId: currentUserId,
                  connectedTime: channel.connectedTime,
                  afterDecode: function afterDecode(conversation) {
                    var conversationType = conversation.conversationType,
                        targetId = conversation.targetId,
                        channelId = conversation.channelId;

                    var localConversation = _this._conversationManager.get(conversationType, targetId, channelId);

                    Object.assign(conversation, localConversation);
                    return conversation;
                  }
                })];

              case 1:
                resp = _b.sent();
                code = resp.code, data = resp.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                return [2, {
                  code: code,
                  data: data === null || data === void 0 ? void 0 : data.list
                }];

              case 2:
                return [2, {
                  code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                }];
            }
          });
        });
      };

      JSEngine.prototype.removeConversation = function (conversationType, targetId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          var channel, data, writer, resp, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                channel = this._channel;
                if (!channel) return [3, 2];
                data = channel.codec.encodeRemoveOldConversationList({
                  conversationType: conversationType,
                  channelId: channelId,
                  targetId: targetId
                });
                writer = new QueryWriter(QueryTopic.REMOVE_OLD_CONVERSATION, data, targetId);
                return [4, channel.send(writer)];

              case 1:
                resp = _a.sent();
                logger$1.info('RemoveConversation =>', resp);
                code = resp.code;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, code];
                }

                return [2, code];

              case 2:
                return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
            }
          });
        });
      };

      JSEngine.prototype.getConversation = function (conversationType, targetId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          var conversation, localConversation, _a, code, data, latestMessage;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!(conversationType === ConversationType$1.ULTRA_GROUP)) return [3, 1];
                conversation = this._ultraGroupMap[channelId + '_' + targetId];

                if (!conversation) {
                  return [2, {
                    code: ErrorCode$1.CONVER_GET_ERROR
                  }];
                }

                return [3, 3];

              case 1:
                localConversation = this._conversationManager.get(conversationType, targetId, channelId);

                if (!localConversation) {
                  return [2, {
                    code: ErrorCode$1.CONVER_GET_ERROR
                  }];
                }

                return [4, this.getHistoryMessage(conversationType, targetId, 0, 1, 0)];

              case 2:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: ErrorCode$1.CONVER_GET_ERROR
                  }];
                }

                latestMessage = (data === null || data === void 0 ? void 0 : data.list[0]) || null;
                conversation = {
                  conversationType: conversationType,
                  targetId: targetId,
                  channelId: channelId,
                  unreadMessageCount: localConversation.unreadMessageCount || 0,
                  latestMessage: latestMessage,
                  notificationStatus: localConversation.notificationStatus || NotificationStatus$1.CLOSE,
                  notificationLevel: localConversation.notificationLevel || NotificationLevel$1.NOT_SET,
                  isTop: localConversation.isTop || false,
                  lastUnreadTime: localConversation.lastUnreadTime || 0,
                  unreadMentionedCount: localConversation.unreadMentionedCount || 0
                };
                _b.label = 3;

              case 3:
                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: conversation
                }];
            }
          });
        });
      };

      JSEngine.prototype.getAllConversationUnreadCount = function (channelId, conversationTypes, includeMuted) {
        var allUnreadCount = this._conversationManager.getAllUnreadCount(channelId, conversationTypes, includeMuted);

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: allUnreadCount
        });
      };

      JSEngine.prototype.getConversationUnreadCount = function (conversationType, targetId, channelId) {
        var _a;

        var unreadCount;

        if (conversationType === ConversationType$1.ULTRA_GROUP) {
          unreadCount = ((_a = this._ultraGroupMap[channelId + '_' + targetId]) === null || _a === void 0 ? void 0 : _a.unreadMessageCount) || 0;
        } else {
          unreadCount = this._conversationManager.getUnreadCount(conversationType, targetId, channelId);
        }

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: unreadCount
        });
      };

      JSEngine.prototype.clearConversationUnreadCount = function (conversationType, targetId, channelId) {
        this._conversationManager.clearUnreadCount(conversationType, targetId, channelId, false);

        return Promise.resolve(ErrorCode$1.SUCCESS);
      };

      JSEngine.prototype.clearAllUnreadCount = function () {
        this._conversationManager.clearAllUnreadCount();

        return Promise.resolve(ErrorCode$1.SUCCESS);
      };

      JSEngine.prototype.getFirstUnreadMessage = function (conversationType, targetId) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.saveConversationMessageDraft = function (conversationType, targetId, draft, channelId) {
        this._conversationManager.setDraft(conversationType, targetId, draft, channelId);

        return Promise.resolve(ErrorCode$1.SUCCESS);
      };

      JSEngine.prototype.getConversationMessageDraft = function (conversationType, targetId, channelId) {
        var draft = this._conversationManager.getDraft(conversationType, targetId, channelId);

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: draft
        });
      };

      JSEngine.prototype.clearConversationMessageDraft = function (conversationType, targetId, channelId) {
        this._conversationManager.clearDraft(conversationType, targetId, channelId);

        return Promise.resolve(ErrorCode$1.SUCCESS);
      };

      JSEngine.prototype.pullConversationStatus = function (timestamp) {
        return __awaiter(this, void 0, void 0, function () {
          var _a, channel, currentUserId, buff, writer, resp, code, data, filteredData_1;

          var _this = this;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _a = this, channel = _a._channel, currentUserId = _a.currentUserId;
                if (!channel) return [3, 2];
                buff = channel.codec.encodeGetConversationStatus(timestamp);
                writer = new QueryWriter(Topic$1[Topic$1.pullSeAtts], buff, currentUserId);
                return [4, channel.send(writer, PBName.SessionStates)];

              case 1:
                resp = _b.sent();
                code = resp.code, data = resp.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                filteredData_1 = [];
                Array.isArray(data) && data.forEach(function (item) {
                  var conversationType = item.conversationType,
                      targetId = item.targetId,
                      notificationStatus = item.notificationStatus,
                      channelId = item.channelId,
                      isTop = item.isTop,
                      notificationLevel = item.notificationLevel;
                  var ultraGroup = _this._ultraGroupMap[channelId + '_' + targetId];

                  if (conversationType === ConversationType$1.ULTRA_GROUP) {
                    if (ultraGroup) {
                      if (notificationStatus !== undefined) {
                        ultraGroup.notificationStatus = notificationStatus;
                      }

                      if (notificationLevel !== undefined) {
                        ultraGroup.notificationLevel = notificationLevel;
                      }

                      if (notificationLevel !== undefined || notificationStatus !== undefined) {
                        _this._ultraGroupManager.addUltraGroupStatus(item);
                      }

                      if (typeof isTop === 'boolean') ultraGroup.isTop = isTop;
                    }
                  } else {
                    filteredData_1.push(item);
                  }
                });
                return [2, {
                  code: code,
                  data: filteredData_1
                }];

              case 2:
                return [2, {
                  code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                }];
            }
          });
        });
      };

      JSEngine.prototype.batchSetConversationStatus = function (statusList) {
        return __awaiter(this, void 0, void 0, function () {
          var _a, currentUserId, channel, buff, writer, resp, code, data, versionData_1, ultraGroups_1, newUltraGroups;

          var _this = this;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _a = this, currentUserId = _a.currentUserId, channel = _a._channel;
                if (!channel) return [3, 2];
                buff = channel.codec.encodeSetConversationStatus(statusList);
                writer = new QueryWriter(QueryTopic.SET_CONVERSATION_STATUS, buff, currentUserId);
                return [4, channel.send(writer, PBName.SessionStateModifyResp)];

              case 1:
                resp = _b.sent();
                code = resp.code, data = resp.data;

                if (code === ErrorCode$1.SUCCESS) {
                  versionData_1 = data;
                  ultraGroups_1 = [];
                  statusList.forEach(function (item) {
                    var conversationType = item.conversationType,
                        targetId = item.targetId,
                        notificationStatus = item.notificationStatus,
                        notificationLevel = item.notificationLevel,
                        channelId = item.channelId,
                        isTop = item.isTop;

                    if (conversationType === ConversationType$1.ULTRA_GROUP) {
                      var ultraGroup = _this._ultraGroupMap[channelId + '_' + targetId];

                      if (ultraGroup) {
                        if (notificationStatus !== undefined) ultraGroup.notificationStatus = notificationStatus;
                        if (notificationLevel !== undefined) ultraGroup.notificationLevel = notificationLevel;

                        if (notificationLevel !== undefined || notificationStatus !== undefined) {
                          _this._ultraGroupManager.addUltraGroupStatus(ultraGroup);
                        }

                        if (isTop !== undefined) ultraGroup.isTop = isTop;
                        ultraGroups_1.push(ultraGroup);
                      }
                    } else {
                      _this._conversationManager.addStatus(__assign(__assign({}, item), {
                        updatedTime: versionData_1.version
                      }), true);
                    }
                  });

                  if (ultraGroups_1.length > 0) {
                    newUltraGroups = clone(ultraGroups_1);
                    newUltraGroups = conversationSort(newUltraGroups);

                    this._watcher.conversation(newUltraGroups);
                  }

                  return [2, code];
                }

                return [2, code];

              case 2:
                return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
            }
          });
        });
      };

      JSEngine.prototype._joinChrm = function (chrmId, count, isJoinExist) {
        return __awaiter(this, void 0, void 0, function () {
          var channel, buff, topic, writer, _a, code, data, joinTime, info, isOpenKVService;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                channel = this._channel;
                if (!channel) return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                buff = channel.codec.encodeJoinOrQuitChatRoom();
                topic = isJoinExist ? QueryTopic.JOIN_EXIST_CHATROOM : QueryTopic.JOIN_CHATROOM;
                writer = new QueryWriter(topic, buff, chrmId);
                return [4, channel.send(writer, PBName.ChrmOutput)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code === ErrorCode$1.SUCCESS) {
                  joinTime = data.joinTime;
                  info = this._chrmsQueue[chrmId];

                  if (!info) {
                    this._chrmsQueue[chrmId] = {
                      pulling: false,
                      queue: [],
                      timestamp: 0
                    };
                  }

                  this._pullChrmMsg(chrmId, count, joinTime);

                  isOpenKVService = this._naviInfo.kvStorage;

                  if (isOpenKVService) {
                    this._chrmEntryHandler.pullEntry(chrmId, 0);
                  }

                  this._joinedChrmManager.set(chrmId, count);

                  this._startSyncIntervalForChrmPull();
                }

                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype._rejoinChrm = function () {
        return __awaiter(this, void 0, void 0, function () {
          var joinedChrms, _a, _b, _i, chrmId, code;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                joinedChrms = this._joinedChrmManager.get();
                _a = [];

                for (_b in joinedChrms) {
                  _a.push(_b);
                }

                _i = 0;
                _c.label = 1;

              case 1:
                if (!(_i < _a.length)) return [3, 4];
                chrmId = _a[_i];
                return [4, this._joinChrm(chrmId, joinedChrms[chrmId] || 10, true)];

              case 2:
                code = _c.sent();

                if (code === ErrorCode$1.SUCCESS) {
                  this._watcher.chatroom({
                    rejoinedRoom: {
                      chatroomId: chrmId,
                      count: joinedChrms[chrmId]
                    }
                  });
                } else {
                  this._watcher.chatroom({
                    rejoinedRoom: {
                      chatroomId: chrmId,
                      errorCode: code
                    }
                  });
                }

                _c.label = 3;

              case 3:
                _i++;
                return [3, 1];

              case 4:
                return [2];
            }
          });
        });
      };

      JSEngine.prototype._pullChrmMsg = function (chrmId, count, joinTime) {
        if (count === void 0) {
          count = 10;
        }

        if (joinTime === void 0) {
          joinTime = 0;
        }

        return __awaiter(this, void 0, void 0, function () {
          var chrmInfo, pulling, timestamp, reqBody, signal, _a, code, data, list, syncTime, finished, messages;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2];
                }

                chrmInfo = this._chrmsQueue[chrmId];
                pulling = chrmInfo.pulling, timestamp = chrmInfo.timestamp;

                if (pulling) {
                  return [2];
                }

                chrmInfo.pulling = true;
                reqBody = this._channel.codec.encodeChrmSyncMsg(timestamp, count);
                signal = new QueryWriter(Topic$1[Topic$1.chrmPull], reqBody, chrmId);
                return [4, this._channel.send(signal, PBName.DownStreamMessages, {
                  connectedTime: this._channel.connectedTime,
                  currentUserId: this.currentUserId
                })];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;
                chrmInfo.pulling = false;

                if (code !== ErrorCode$1.SUCCESS || !data) {
                  logger$1.warn('pull chatroom msg failed, code:', code, ', data:', data);
                  return [2];
                }

                list = data.list, syncTime = data.syncTime, finished = data.finished;
                chrmInfo.timestamp = joinTime ? Math.max(syncTime, joinTime) : syncTime;
                chrmInfo.queue = chrmInfo.queue.filter(function (item) {
                  return item > syncTime;
                });
                messages = [];
                list.forEach(function (item) {
                  if (item.sentTime < timestamp) {
                    return;
                  }

                  messages.push(item);
                });

                this._watcher.batchMessage(messages);

                if (!finished || chrmInfo.queue.length > 0) {
                  this._pullChrmMsg(chrmId);
                }

                return [2];
            }
          });
        });
      };

      JSEngine.prototype.joinChatroom = function (chatroomId, count) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._joinChrm(chatroomId, count, false)];
          });
        });
      };

      JSEngine.prototype.joinExistChatroom = function (chatroomId, count) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._joinChrm(chatroomId, count, true)];
          });
        });
      };

      JSEngine.prototype.quitChatroom = function (chrmId) {
        return __awaiter(this, void 0, void 0, function () {
          var channel, buff, writer, resp, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                channel = this._channel;

                if (!channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                buff = channel.codec.encodeJoinOrQuitChatRoom();
                writer = new QueryWriter(QueryTopic.QUIT_CHATROOM, buff, chrmId);
                return [4, channel.send(writer)];

              case 1:
                resp = _a.sent();
                code = resp.code;

                if (code === ErrorCode$1.SUCCESS) {
                  delete this._chrmsQueue[chrmId];

                  this._chrmEntryHandler.reset(chrmId);

                  this._joinedChrmManager.remove(chrmId);
                }

                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.getChatroomInfo = function (chatroomId, count, order) {
        return __awaiter(this, void 0, void 0, function () {
          var channel, buff, writer, resp, code, data;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                channel = this._channel;
                if (!channel) return [2, {
                  code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                }];
                buff = channel.codec.encodeGetChatRoomInfo(count, order);
                writer = new QueryWriter(Topic$1[Topic$1.queryChrmI], buff, chatroomId);
                return [4, channel.send(writer, PBName.QueryChatRoomInfoOutput)];

              case 1:
                resp = _a.sent();
                code = resp.code, data = resp.data;
                if (code !== ErrorCode$1.SUCCESS) return [2, {
                  code: code
                }];
                return [2, {
                  code: code,
                  data: data
                }];
            }
          });
        });
      };

      JSEngine.prototype.getChatroomHistoryMessages = function (chatroomId, timestamp, count, order) {
        return __awaiter(this, void 0, void 0, function () {
          var channel, buff, writer, resp, code, data;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                channel = this._channel;

                if (!channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                buff = channel.codec.encodeGetHistoryMsg(chatroomId, {
                  timestamp: timestamp,
                  count: count,
                  order: order
                });
                writer = new QueryWriter(QueryHistoryTopic.CHATROOM, buff, chatroomId);
                return [4, channel.send(writer, PBName.HistoryMsgOuput, {
                  conversation: {
                    targetId: chatroomId
                  }
                })];

              case 1:
                resp = _a.sent();
                code = resp.code;
                data = resp.data;
                if (code !== ErrorCode$1.SUCCESS) return [2, {
                  code: code
                }];
                return [2, {
                  code: code,
                  data: {
                    list: data.list,
                    hasMore: data.hasMore
                  }
                }];
            }
          });
        });
      };

      JSEngine.prototype._modifyChatroomKV = function (chatroomId, entry) {
        return __awaiter(this, void 0, void 0, function () {
          var _a, channel, currentUserId, version, buff, topic, writer, resp, code;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _a = this, channel = _a._channel, currentUserId = _a.currentUserId;
                if (!channel) return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                version = this._chrmEntryHandler.getVersion(chatroomId, entry.key);
                entry.version = version == null ? this.getServerTime() : version;
                buff = channel.codec.encodeModifyChatRoomKV(chatroomId, entry, currentUserId);
                topic = entry.type === ChatroomEntryType$1.UPDATE ? QueryTopic.UPDATE_CHATROOM_KV : QueryTopic.DELETE_CHATROOM_KV;
                writer = new QueryWriter(topic, buff, chatroomId);
                return [4, channel.send(writer, PBName.ChrmOutput)];

              case 1:
                resp = _b.sent();
                code = resp.code;

                if (code === ErrorCode$1.SUCCESS) {
                  this._chrmEntryHandler.setLocal(chatroomId, {
                    kvEntries: [entry],
                    syncTime: new Date().getTime()
                  }, currentUserId);

                  return [2, code];
                }

                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype._modifyChatroomKVS = function (chatroomId, entryOptions) {
        return __awaiter(this, void 0, void 0, function () {
          var _a, channel, currentUserId, entries, buff, topic, writer, resp, code, errorKeys, kvEntries_1, options_1, data;

          var _this = this;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _a = this, channel = _a._channel, currentUserId = _a.currentUserId;
                if (!channel) return [2, {
                  code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                }];
                entries = entryOptions.entries;
                entries.forEach(function (item) {
                  var version = _this._chrmEntryHandler.getVersion(chatroomId, item.key);

                  item.version = version == null ? _this.getServerTime() : version;
                });
                buff = channel.codec.encodeModifyChatRoomKVS(chatroomId, entryOptions, currentUserId);
                topic = entryOptions.type === ChatroomEntryType$1.UPDATE ? QueryTopic.UPDATE_CHATROOM_KVS : QueryTopic.DELETE_CHATROOM_KVS;
                writer = new QueryWriter(topic, buff, chatroomId);
                return [4, channel.send(writer, PBName.ChrmKVSOutput)];

              case 1:
                resp = _b.sent();
                code = resp.code;

                if ([ErrorCode$1.SUCCESS, ErrorCode$1.CHATROOM_KV_STORE_NOT_ALL_SUCCESS].indexOf(code) !== -1) {
                  kvEntries_1 = [];
                  options_1 = Object.assign({}, entryOptions);
                  delete options_1.entries;
                  entryOptions.entries.forEach(function (one) {
                    kvEntries_1.push(Object.assign({}, one, options_1));
                  });

                  if (code === ErrorCode$1.CHATROOM_KV_STORE_NOT_ALL_SUCCESS) {
                    data = resp.data;
                    logger$1.warn('设置失败的属性：', data.errorKeys);
                    errorKeys = data.errorKeys;

                    if (data && Array.isArray(data.errorKeys)) {
                      data.errorKeys.forEach(function (one) {
                        var index = kvEntries_1.findIndex(function (k) {
                          return one.key === k.key;
                        });

                        if (index !== -1) {
                          kvEntries_1.splice(index, 1);
                        }
                      });
                    }
                  }

                  logger$1.warn('设置成功的属性：', kvEntries_1);

                  this._chrmEntryHandler.setLocal(chatroomId, {
                    kvEntries: kvEntries_1,
                    syncTime: new Date().getTime()
                  }, currentUserId);
                }

                return [2, {
                  code: code,
                  data: errorKeys
                }];
            }
          });
        });
      };

      JSEngine.prototype.setChatroomEntry = function (chatroomId, entry) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            entry.type = ChatroomEntryType$1.UPDATE;
            entry.userId = entry.userId || this.currentUserId;
            return [2, this._modifyChatroomKV(chatroomId, entry)];
          });
        });
      };

      JSEngine.prototype.setChatroomEntries = function (chatroomId, entryOptions) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            entryOptions.type = ChatroomEntryType$1.UPDATE;
            entryOptions.userId = entryOptions.userId || this.currentUserId;
            return [2, this._modifyChatroomKVS(chatroomId, entryOptions)];
          });
        });
      };

      JSEngine.prototype.forceSetChatroomEntry = function (chatroomId, entry) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            entry.type = ChatroomEntryType$1.UPDATE;
            entry.isOverwrite = true;
            entry.userId = entry.userId || this.currentUserId;
            return [2, this._modifyChatroomKV(chatroomId, entry)];
          });
        });
      };

      JSEngine.prototype.removeChatroomEntry = function (chatroomId, entry) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            entry.type = ChatroomEntryType$1.DELETE;
            entry.userId = entry.userId || this.currentUserId;
            return [2, this._modifyChatroomKV(chatroomId, entry)];
          });
        });
      };

      JSEngine.prototype.removeChatroomEntries = function (chatroomId, entryOptions) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            entryOptions.type = ChatroomEntryType$1.DELETE;
            entryOptions.userId = entryOptions.userId || this.currentUserId;
            return [2, this._modifyChatroomKVS(chatroomId, entryOptions)];
          });
        });
      };

      JSEngine.prototype.forceRemoveChatroomEntry = function (chatroomId, entry) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            entry.type = ChatroomEntryType$1.DELETE;
            entry.isOverwrite = true;
            entry.userId = entry.userId || this.currentUserId;
            return [2, this._modifyChatroomKV(chatroomId, entry)];
          });
        });
      };

      JSEngine.prototype.getChatroomEntry = function (chatroomId, key) {
        return __awaiter(this, void 0, void 0, function () {
          var entry, channel, buff, writer, resp, data, entryResult;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                entry = this._chrmEntryHandler.getValue(chatroomId, key);
                if (!entry) return [3, 1];
                return [2, Promise.resolve({
                  code: ErrorCode$1.SUCCESS,
                  data: entry
                })];

              case 1:
                channel = this._channel;

                if (!channel) {
                  return [2, Promise.reject({
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  })];
                }

                buff = channel.codec.encodePullChatRoomKV(0);
                writer = new QueryWriter(Topic$1[Topic$1.pullKV], buff, chatroomId);
                return [4, channel.send(writer, PBName.ChrmKVOutput)];

              case 2:
                resp = _a.sent();
                data = resp.data || {};

                if (data && data.kvEntries && data.kvEntries.length) {
                  entryResult = data.kvEntries.find(function (entry) {
                    return entry.key === key;
                  });

                  if (entryResult !== undefined) {
                    return [2, Promise.resolve({
                      code: ErrorCode$1.SUCCESS,
                      data: entryResult === null || entryResult === void 0 ? void 0 : entryResult.value
                    })];
                  }
                }

                return [2, Promise.resolve({
                  code: ErrorCode$1.CHATROOM_KEY_NOT_EXIST
                })];
            }
          });
        });
      };

      JSEngine.prototype.getAllChatroomEntry = function (chatroomId) {
        return __awaiter(this, void 0, void 0, function () {
          var entries, channel, entries_1, buff, writer, resp, data;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                entries = this._chrmEntryHandler.getAll(chatroomId);
                if (!(entries && Object.keys(entries).length)) return [3, 1];
                return [2, Promise.resolve({
                  code: ErrorCode$1.SUCCESS,
                  data: entries
                })];

              case 1:
                channel = this._channel;

                if (!channel) {
                  return [2, Promise.reject({
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  })];
                }

                entries_1 = {};
                buff = channel.codec.encodePullChatRoomKV(0);
                writer = new QueryWriter(Topic$1[Topic$1.pullKV], buff, chatroomId);
                return [4, channel.send(writer, PBName.ChrmKVOutput)];

              case 2:
                resp = _a.sent();
                data = resp.data || {};

                if (data && data.kvEntries && data.kvEntries.length) {
                  data.kvEntries.forEach(function (entry) {
                    if (entry.key) {
                      entries_1[entry.key] = entry.value || '';
                    }
                  });
                }

                return [2, Promise.resolve({
                  code: ErrorCode$1.SUCCESS,
                  data: entries_1
                })];
            }
          });
        });
      };

      JSEngine.prototype.pullChatroomEntry = function (chatroomId, timestamp) {
        return __awaiter(this, void 0, void 0, function () {
          var _a, channel, currentUserId, buff, writer, resp, code, data, _b, kvEntries, syncTime, updatedEntries_1;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                _a = this, channel = _a._channel, currentUserId = _a.currentUserId;

                if (!channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                if (!timestamp) {
                  timestamp = this._pullChatroomEntryTimestamp;
                }

                buff = channel.codec.encodePullChatRoomKV(timestamp);
                writer = new QueryWriter(Topic$1[Topic$1.pullKV], buff, chatroomId);
                return [4, channel.send(writer, PBName.ChrmKVOutput)];

              case 1:
                resp = _c.sent();
                code = resp.code, data = resp.data;

                if (code === ErrorCode$1.SUCCESS) {
                  logger$1.info('Pull success ChrmKV, ' + JSON.stringify(resp));

                  this._chrmEntryHandler.setLocal(chatroomId, data, currentUserId);

                  logger$1.info('Save into cache success!');
                  _b = data, kvEntries = _b.kvEntries, syncTime = _b.syncTime;
                  this._pullChatroomEntryTimestamp = syncTime || 0;
                  updatedEntries_1 = [];

                  if (kvEntries.length > 0) {
                    kvEntries.forEach(function (entry) {
                      var key = entry.key,
                          value = entry.value,
                          type = entry.type,
                          timestamp = entry.timestamp;
                      updatedEntries_1.push({
                        key: key,
                        value: value,
                        type: type,
                        timestamp: timestamp,
                        chatroomId: chatroomId
                      });
                    });

                    this._watcher.chatroom({
                      updatedEntries: updatedEntries_1
                    });
                  }

                  return [2, {
                    code: code,
                    data: data
                  }];
                }

                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      JSEngine.prototype._startSyncIntervalForChrmPull = function () {
        var _this = this;

        this._stopSyncIntervalForChrmPull();

        this._intervalTimerForChrmPull = setInterval(function () {
          var chrmsQueueKeys = Object.keys(_this._chrmsQueue);

          if (chrmsQueueKeys.length === 0 || !_this._channel) {
            _this._stopSyncIntervalForChrmPull();
          } else {
            chrmsQueueKeys.forEach(function (chrmId) {
              _this._pullChrmMsg(chrmId);

              var isOpenKVService = _this._naviInfo.kvStorage;

              if (isOpenKVService) {
                _this._chrmEntryHandler.pullEntry(chrmId, 0);
              }
            });
          }
        }, IM_CHATROOM_PULL_INTERVAL_TIME);
      };

      JSEngine.prototype._stopSyncIntervalForChrmPull = function () {
        if (typeof this._intervalTimerForChrmPull !== 'number') {
          clearInterval(this._intervalTimerForChrmPull);
          this._intervalTimerForChrmPull = -1;
        }
      };

      JSEngine.prototype.sendMessage = function (conversationType, targetId, options) {
        return __awaiter(this, void 0, void 0, function () {
          var isStatusMessage, topic, data, signal, sentTime, receivedMessage, _a, code, resp, pubAck;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                options = handleInnerMsgOptions(options, this.currentUserId);
                options = this._handleMsgProperties(options, true);
                isStatusMessage = [ConversationType$1.PRIVATE, ConversationType$1.GROUP].includes(conversationType) ? options.isStatusMessage : false;
                topic = isStatusMessage ? getStatPubTopic(conversationType) : getPubTopic(conversationType) || Topic$1.ppMsgP;

                if (isStatusMessage) {
                  options.isPersited = false;
                  options.isCounted = false;
                }

                data = this._channel.codec.encodeUpMsg({
                  conversationType: conversationType,
                  targetId: targetId
                }, options);
                signal = new PublishWriter(Topic$1[topic], data, targetId);
                signal.setHeaderQos(QOS.AT_LEAST_ONCE);

                if (isStatusMessage) {
                  this._channel.sendOnly(signal);

                  return [2, {
                    code: ErrorCode$1.SUCCESS,
                    data: transSentAttrs2IReceivedMessage(conversationType, targetId, __assign({}, options), '', 0, this.currentUserId)
                  }];
                }

                sentTime = Date.now() - this._localConnectedTime + this._connectedTime;
                receivedMessage = transSentAttrs2IReceivedMessage(conversationType, targetId, __assign({}, options), '', sentTime, this.currentUserId);
                return [4, this._channel.send(signal)];

              case 1:
                _a = _b.sent(), code = _a.code, resp = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code,
                    data: receivedMessage
                  }];
                }

                pubAck = resp;

                this._sendMessageStore.setMessage(pubAck.messageUId, pubAck.timestamp);

                receivedMessage.sentTime = pubAck.timestamp;
                receivedMessage.messageUId = pubAck.messageUId;

                this._conversationManager.setConversationCacheByMessage(receivedMessage, true);

                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: receivedMessage
                }];
            }
          });
        });
      };

      JSEngine.prototype.recallMsg = function (conversationType, targetId, messageUId, sentTime, recallMsgOptions) {
        var _a;

        return __awaiter(this, void 0, void 0, function () {
          var user, extra, isDelete, content, msg, topic, data, signal, _b, code, resp, pubAck, receivedMessage;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                user = recallMsgOptions.user, extra = recallMsgOptions.extra, isDelete = recallMsgOptions.isDelete;
                content = {
                  conversationType: conversationType,
                  targetId: targetId,
                  messageUId: messageUId,
                  sentTime: sentTime,
                  channelId: recallMsgOptions.channelId || '',
                  isDelete: isDelete || false
                };
                user && (content.user = user);
                extra && (content.extra = extra);
                msg = {
                  content: content,
                  messageType: 'RC:RcCmd',
                  disableNotification: recallMsgOptions === null || recallMsgOptions === void 0 ? void 0 : recallMsgOptions.disableNotification,
                  pushConfig: recallMsgOptions === null || recallMsgOptions === void 0 ? void 0 : recallMsgOptions.pushConfig,
                  pushContent: ((_a = recallMsgOptions.pushConfig) === null || _a === void 0 ? void 0 : _a.pushContent) || recallMsgOptions.pushContent || '',
                  channelId: recallMsgOptions.channelId
                };
                topic = Topic$1[Topic$1.recallMsg];
                data = this._channel.codec.encodeUpMsg({
                  conversationType: conversationType,
                  targetId: targetId
                }, msg);
                signal = new PublishWriter(topic, data, this.currentUserId);
                signal.setHeaderQos(QOS.AT_LEAST_ONCE);
                return [4, this._channel.send(signal)];

              case 1:
                _b = _c.sent(), code = _b.code, resp = _b.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                pubAck = resp;

                if (conversationType === ConversationType$1.ULTRA_GROUP) {
                  this._ultraMsgMap[pubAck.messageUId] = pubAck.timestamp;
                  return [2, {
                    code: ErrorCode$1.SUCCESS
                  }];
                } else {
                  this._sendMessageStore.setMessage(pubAck.messageUId, pubAck.timestamp);

                  receivedMessage = transSentAttrs2IReceivedMessage(conversationType, targetId, __assign(__assign({}, msg), {
                    isPersited: true
                  }), pubAck.messageUId, pubAck.timestamp, this.currentUserId);

                  this._conversationManager.setConversationCacheByMessage(receivedMessage, true);

                  return [2, {
                    code: ErrorCode$1.SUCCESS,
                    data: receivedMessage
                  }];
                }
            }
          });
        });
      };

      JSEngine.prototype.sendReadReceiptMessage = function (targetId, messageUIds, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          var buff, signal;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                buff = this._channel.codec.encodeReadReceipt(messageUIds, channelId);
                signal = new QueryWriter(Topic$1[Topic$1.rrMsg], buff, targetId);
                return [4, this._channel.send(signal)];

              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };

      JSEngine.prototype.getMessageReader = function (targetId, messageUId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          var buff, signal;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                buff = this._channel.codec.encodeMessageReader(messageUId, channelId);
                signal = new QueryWriter(Topic$1[Topic$1.rrList], buff, targetId);
                return [4, this._channel.send(signal, PBName.GrpReadReceiptQryResp)];

              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };

      JSEngine.prototype.pullUserSettings = function (version) {
        return __awaiter(this, void 0, void 0, function () {
          var buff, writer;
          return __generator(this, function (_a) {
            if (!this._channel) {
              return [2, {
                code: ErrorCode$1.RC_NET_CHANNEL_INVALID
              }];
            }

            buff = this._channel.codec.encodePullUserSetting(version);
            writer = new QueryWriter(Topic$1[Topic$1.pullUS], buff, this.currentUserId);
            return [2, this._channel.send(writer, PBName.PullUserSettingOutput)];
          });
        });
      };

      JSEngine.prototype.getFileToken = function (fileType, fileName, httpMethod, queryString) {
        return __awaiter(this, void 0, void 0, function () {
          var uploadFileName, buff, writer, _a, code, data;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                if (queryString && queryString !== 'uploads') uploadFileName = fileName || '';else uploadFileName = getUploadFileName(fileType, fileName);
                buff = this._channel.codec.encodeGetFileToken(fileType, uploadFileName, httpMethod || '', queryString || '');
                writer = new QueryWriter(Topic$1[Topic$1.qnTkn], buff, this.currentUserId);
                return [4, this._channel.send(writer, PBName.GetQNupTokenOutput)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;
                data = Object.assign(data, {
                  fileName: uploadFileName
                });

                if (code === ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code,
                    data: data
                  }];
                }

                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      JSEngine.prototype.getFileUrl = function (fileType, serverType, fileName, saveName) {
        return __awaiter(this, void 0, void 0, function () {
          var topic, inputPBName, outputPBName, buff, writer, _a, code, data, resp;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                topic = '';
                inputPBName = '';
                outputPBName = '';

                if (serverType === UploadMethod$1.QINIU) {
                  inputPBName = PBName.GetQNdownloadUrlInput;
                  outputPBName = PBName.GetQNdownloadUrlOutput;
                } else {
                  inputPBName = PBName.GetDownloadUrlInput;
                  outputPBName = PBName.GetDownloadUrlOutput;
                }

                if (serverType === UploadMethod$1.QINIU) {
                  topic = Topic$1[Topic$1.qnUrl];
                } else if (serverType === UploadMethod$1.AWS) {
                  topic = Topic$1[Topic$1.s3Url];
                } else if (serverType === UploadMethod$1.STC) {
                  topic = Topic$1[Topic$1.stcUrl];
                } else {
                  topic = Topic$1[Topic$1.aliUrl];
                }

                buff = this._channel.codec.encodeGetFileUrl(inputPBName, fileType, fileName, saveName);
                writer = new QueryWriter(topic, buff, this.currentUserId);
                return [4, this._channel.send(writer, outputPBName)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;
                resp = data;

                if (code === ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code,
                    data: resp
                  }];
                }

                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      JSEngine.prototype.disconnect = function () {
        if (this._reconnectTimer !== -1) {
          clearTimeout(this._reconnectTimer);
          this._reconnectTimer = -1;
        }

        if (this._channel) {
          this._channel.close();

          this._channel = undefined;
        }

        this._pullQueue.length = 0;

        this._stopSyncInterval();

        this.resetUltraGroupData();
      };

      JSEngine.prototype.resetUltraGroupData = function () {
        this._stopUltraSyncInterval();

        this._lastSyncUltraMsgTimeStamp = 0;
        this._lastSyncUltraMsgLocalTimeStamp = 0;
        this._isUltraPulling = false;
        this._ultraGroupTimeQue = [];
        this._isUltraGroupListExist = false;
        this._ultraGroupMap = {};
      };

      JSEngine.prototype.destroy = function () {
        throw new Error('JSEngine\'s method not implemented.');
      };

      JSEngine.prototype.registerMessageType = function (objectName, isPersited, isCounted, searchProps, isStatusMessage) {
        this._customMessageType[objectName] = {
          isPersited: isPersited,
          isCounted: isCounted,
          isStatusMessage: isStatusMessage
        };
      };

      JSEngine.prototype.getServerTime = function () {
        return Date.now() - this._localConnectedTime + this._connectedTime;
      };

      JSEngine.prototype.getCurrentUserId = function () {
        return this.currentUserId;
      };

      JSEngine.prototype.createTag = function (tag) {
        return __awaiter(this, void 0, void 0, function () {
          var version, buff, signal, _a, code, data, resVersion;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                version = this._userSettingManager.getVersion();
                buff = this._channel.codec.encodeCreateTag([tag], version);
                signal = new QueryWriter(Topic$1[Topic$1.addSeTag], buff, this.currentUserId);
                return [4, this._channel.send(signal, PBName.SetUserSettingOutput)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                resVersion = data.version;

                this._userSettingManager.addTag([__assign(__assign({}, tag), {
                  createdTime: resVersion
                })], resVersion);

                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: data
                }];
            }
          });
        });
      };

      JSEngine.prototype.removeTag = function (tagId) {
        return __awaiter(this, void 0, void 0, function () {
          var version, buff, signal, _a, code, data, resVersion;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                version = this._userSettingManager.getVersion();
                buff = this._channel.codec.encodeRemoveTag([tagId], version);
                signal = new QueryWriter(Topic$1[Topic$1.delSeTag], buff, this.currentUserId);
                return [4, this._channel.send(signal, PBName.SetUserSettingOutput)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                resVersion = data.version;

                this._userSettingManager.deleteTag([tagId], resVersion);

                return [2, {
                  code: ErrorCode$1.SUCCESS
                }];
            }
          });
        });
      };

      JSEngine.prototype.updateTag = function (tag) {
        return __awaiter(this, void 0, void 0, function () {
          var version, buff, signal, _a, code, data, resVersion;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                version = this._userSettingManager.getVersion();
                buff = this._channel.codec.encodeCreateTag([tag], version);
                signal = new QueryWriter(Topic$1[Topic$1.addSeTag], buff, this.currentUserId);
                return [4, this._channel.send(signal, PBName.SetUserSettingOutput)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                resVersion = data.version;

                this._userSettingManager.addTag([tag], resVersion);

                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: data
                }];
            }
          });
        });
      };

      JSEngine.prototype.getTagList = function () {
        return __awaiter(this, void 0, void 0, function () {
          var list, conversationObj;
          return __generator(this, function (_a) {
            list = this._userSettingManager.getTags();
            conversationObj = this._conversationManager.getConversationListForTag();
            list.forEach(function (item) {
              item.conversationCount = conversationObj[item.tagId] ? conversationObj[item.tagId].length : 0;
            });
            return [2, {
              code: ErrorCode$1.SUCCESS,
              data: list
            }];
          });
        });
      };

      JSEngine.prototype.addTagForConversations = function (tagId, conversations) {
        return __awaiter(this, void 0, void 0, function () {
          var buff, signal, code, tag;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                if (!this._userSettingManager.getTagById(tagId)) {
                  return [2, {
                    code: ErrorCode$1.TAG_NOT_EXIST
                  }];
                }

                buff = this._channel.codec.encodeUpdateConversationTag([{
                  tagId: tagId
                }], conversations);
                signal = new QueryWriter(Topic$1[Topic$1.addTag], buff, this.currentUserId);
                return [4, this._channel.send(signal)];

              case 1:
                code = _a.sent().code;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                tag = {};
                tag[tagId] = {};
                conversations.forEach(function (con) {
                  _this._conversationManager.addTagStatus(con.conversationType, con.targetId, tag, con.channelId);
                });
                return [2, {
                  code: ErrorCode$1.SUCCESS
                }];
            }
          });
        });
      };

      JSEngine.prototype.removeTagForConversations = function (tagId, conversations) {
        return __awaiter(this, void 0, void 0, function () {
          var buff, signal, code;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                buff = this._channel.codec.encodeUpdateConversationTag([{
                  tagId: tagId
                }], conversations);
                signal = new QueryWriter(Topic$1[Topic$1.delTag], buff, this.currentUserId);
                return [4, this._channel.send(signal)];

              case 1:
                code = _a.sent().code;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                conversations.forEach(function (con) {
                  _this._conversationManager.deleteTagStatus(con.conversationType, con.targetId, [tagId], con.channelId);
                });
                return [2, {
                  code: ErrorCode$1.SUCCESS
                }];
            }
          });
        });
      };

      JSEngine.prototype.removeTagsForConversation = function (conversation, tagIds) {
        return __awaiter(this, void 0, void 0, function () {
          var type, targetId, channelId, tags, buff, signal, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                type = conversation.conversationType, targetId = conversation.targetId, channelId = conversation.channelId;
                tags = tagIds.map(function (tagId) {
                  return {
                    tagId: tagId
                  };
                });
                buff = this._channel.codec.encodeUpdateConversationTag(tags, [conversation]);
                signal = new QueryWriter(Topic$1[Topic$1.delTag], buff, this.currentUserId);
                return [4, this._channel.send(signal)];

              case 1:
                code = _a.sent().code;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                this._conversationManager.deleteTagStatus(type, targetId, tagIds, channelId);

                return [2, {
                  code: ErrorCode$1.SUCCESS
                }];
            }
          });
        });
      };

      JSEngine.prototype.getConversationListByTag = function (tagId, startTime, count) {
        return __awaiter(this, void 0, void 0, function () {
          var _a, currentUserId, channel, buff, writer, resp, code, data, list;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                _a = this, currentUserId = _a.currentUserId, channel = _a._channel;

                if (!channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                buff = channel.codec.encodeOldConversationList({
                  count: count,
                  type: ConversationType$1.PRIVATE,
                  startTime: startTime
                });
                writer = new QueryWriter(QueryTopic.GET_OLD_CONVERSATION_LIST, buff, currentUserId);
                return [4, channel.send(writer, PBName.RelationsOutput, {
                  currentUserId: currentUserId,
                  connectedTime: channel.connectedTime
                })];

              case 1:
                resp = _b.sent();
                code = resp.code, data = resp.data;
                list = this._conversationHasTagFilter(tagId, data === null || data === void 0 ? void 0 : data.list);
                logger$1.info('GetConversationListByTag', list);

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                return [2, {
                  code: code,
                  data: list
                }];
            }
          });
        });
      };

      JSEngine.prototype._conversationHasTagFilter = function (tagId, list) {
        var _this = this;

        var isTopList = [];
        var commonList = [];
        list.forEach(function (item) {
          var conversationType = item.conversationType,
              targetId = item.targetId,
              channelId = item.channelId;

          var _a = _this._conversationManager.get(conversationType, targetId, channelId),
              hasMentioned = _a.hasMentioned,
              mentionedInfo = _a.mentionedInfo,
              lastUnreadTime = _a.lastUnreadTime,
              notificationStatus = _a.notificationStatus,
              isTop = _a.isTop,
              tags = _a.tags,
              unreadMessageCount = _a.unreadMessageCount;

          var tagStatus = tags && tags[tagId];

          if (tagStatus) {
            var con = __assign(__assign({}, item), {
              hasMentioned: hasMentioned,
              mentionedInfo: mentionedInfo,
              lastUnreadTime: lastUnreadTime,
              notificationStatus: notificationStatus,
              isTop: isTop,
              unreadMessageCount: unreadMessageCount
            });

            if (tagStatus.isTop) {
              isTopList.push(__assign(__assign({}, con), {
                isTopInTag: true
              }));
            } else {
              commonList.push(__assign(__assign({}, con), {
                isTopInTag: false
              }));
            }
          }
        });

        function compare(a, b) {
          return a.latestMessage && b.latestMessage ? a.latestMessage.sentTime - b.latestMessage.sentTime : 0;
        }

        var data = __spreadArray(__spreadArray([], isTopList.sort(compare), true), commonList.sort(compare), true);

        return data;
      };

      JSEngine.prototype.getUnreadCountByTag = function (tagId, containMuted) {
        return __awaiter(this, void 0, void 0, function () {
          var count;
          return __generator(this, function (_a) {
            if (!this._channel) {
              return [2, {
                code: ErrorCode$1.RC_NET_CHANNEL_INVALID
              }];
            }

            count = this._conversationManager.getUnreadCountByTag(tagId, containMuted);
            return [2, {
              code: ErrorCode$1.SUCCESS,
              data: count
            }];
          });
        });
      };

      JSEngine.prototype.setConversationStatusInTag = function (tagId, conversation, status) {
        return __awaiter(this, void 0, void 0, function () {
          var targetId, type, channelId, isTop, tags, localConversation, buff, signal, code, tagStatus;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                targetId = conversation.targetId, type = conversation.conversationType, channelId = conversation.channelId;
                isTop = status.isTop;
                tags = [{
                  tagId: tagId,
                  isTop: isTop
                }];
                localConversation = this._conversationManager.get(type, targetId, channelId);

                if (!localConversation.tags || !Object.hasOwnProperty.call(localConversation.tags, tagId)) {
                  return [2, {
                    code: ErrorCode$1.NO_TAG_IN_CONVER
                  }];
                }

                buff = this._channel.codec.encodeUpdateConversationTag(tags, [conversation]);
                signal = new QueryWriter(Topic$1[Topic$1.addTag], buff, this.currentUserId);
                return [4, this._channel.send(signal)];

              case 1:
                code = _a.sent().code;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                tagStatus = {};
                tagStatus[tagId] = {};

                if (isTop) {
                  tagStatus[tagId].isTop = true;
                }

                this._conversationManager.addTagStatus(type, targetId, tagStatus, channelId);

                return [2, {
                  code: ErrorCode$1.SUCCESS
                }];
            }
          });
        });
      };

      JSEngine.prototype.getTagsForConversation = function (conversation) {
        var _a;

        return __awaiter(this, void 0, void 0, function () {
          var con, tags, tagList, tagId;
          return __generator(this, function (_b) {
            if (!this._channel) {
              return [2, {
                code: ErrorCode$1.RC_NET_CHANNEL_INVALID
              }];
            }

            con = this._conversationManager.get(conversation.conversationType, conversation.targetId, conversation.channelId);
            tags = this._userSettingManager.getTagsInfo();
            tagList = [];

            if (con.tags) {
              for (tagId in con.tags) {
                tagList.push({
                  tagId: tagId,
                  tagName: (_a = tags[tagId]) === null || _a === void 0 ? void 0 : _a.tagName
                });
              }
            }

            return [2, {
              code: ErrorCode$1.SUCCESS,
              data: tagList
            }];
          });
        });
      };

      JSEngine.prototype.getBlockConversationList = function () {
        var data = this._conversationManager.getBlockConversationList();

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: data
        });
      };

      JSEngine.prototype.getTopConversationList = function () {
        var data = this._conversationManager.getTopConversationList();

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: data
        });
      };

      JSEngine.prototype.getUnreadMentionedCount = function (conversation) {
        var _a;

        var unreadCount;

        if (conversation.conversationType === ConversationType$1.ULTRA_GROUP) {
          unreadCount = ((_a = this._ultraGroupMap[conversation.channelId + '_' + conversation.targetId]) === null || _a === void 0 ? void 0 : _a.unreadMentionedCount) || 0;
        } else {
          unreadCount = this._conversationManager.getUnreadMentionedCount(conversation.channelId, conversation.conversationType, conversation.targetId);
        }

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: unreadCount
        });
      };

      JSEngine.prototype.getAllUnreadMentionedCount = function () {
        var totalUnreadCount = this._conversationManager.getAllUnreadMentionedCount();

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: totalUnreadCount
        });
      };

      JSEngine.prototype.getUltraGroupList = function () {
        return __awaiter(this, void 0, void 0, function () {
          var convertionList, newConversationList;
          return __generator(this, function (_a) {
            if (!this._isUltraGroupListExist) {
              return [2, {
                code: ErrorCode$1.METHOD_NOT_AVAILABLE
              }];
            }

            convertionList = Object.values(this._ultraGroupMap);
            convertionList = conversationSort(convertionList);
            newConversationList = clone(convertionList);
            return [2, {
              code: ErrorCode$1.SUCCESS,
              data: newConversationList
            }];
          });
        });
      };

      JSEngine.prototype.getBlockUltraGroupList = function () {
        if (!this._isUltraGroupListExist) {
          return Promise.resolve({
            code: ErrorCode$1.METHOD_NOT_AVAILABLE
          });
        }

        var ultraGroups = Object.values(this._ultraGroupMap);
        var data = [];
        ultraGroups.forEach(function (item) {
          if (item.notificationStatus === NotificationStatus$1.OPEN) {
            data.push({
              conversationType: ConversationType$1.ULTRA_GROUP,
              targetId: item.targetId,
              channelId: item.channelId
            });
          }
        });
        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: data
        });
      };

      JSEngine.prototype.getTopUltraGroupList = function () {
        if (!this._isUltraGroupListExist) {
          return Promise.resolve({
            code: ErrorCode$1.METHOD_NOT_AVAILABLE
          });
        }

        var ultraGroups = Object.values(this._ultraGroupMap);
        var data = [];
        ultraGroups.forEach(function (item) {
          if (item.isTop === true) {
            data.push({
              conversationType: ConversationType$1.ULTRA_GROUP,
              targetId: item.targetId,
              channelId: item.channelId
            });
          }
        });
        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: data
        });
      };

      JSEngine.prototype.getUltraGroupUnreadMentionedCountByTargetId = function (targetId) {
        if (!this._isUltraGroupListExist) {
          return Promise.resolve({
            code: ErrorCode$1.METHOD_NOT_AVAILABLE
          });
        }

        var num = 0;

        for (var key in this._ultraGroupMap) {
          var utargetId = key.match(/_.*/g)[0].substring(1);

          if (utargetId === targetId) {
            num += this._ultraGroupMap[key].unreadMentionedCount;
          }
        }

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: num
        });
      };

      JSEngine.prototype.getUltraGroupUnreadCountByTargetId = function (targetId) {
        var unreadCount = 0;

        for (var ultrapGroupKey in this._ultraGroupMap) {
          var ultraGroup = this._ultraGroupMap[ultrapGroupKey];

          if (ultraGroup.targetId === targetId) {
            unreadCount += ultraGroup.unreadMessageCount || 0;
          }
        }

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: unreadCount
        });
      };

      JSEngine.prototype.getAllUltraGroupUnreadCount = function (isMentioned) {
        if (isMentioned === void 0) {
          isMentioned = false;
        }

        if (!this._isUltraGroupListExist) {
          return Promise.resolve({
            code: ErrorCode$1.METHOD_NOT_AVAILABLE
          });
        }

        var num = 0;

        for (var key in this._ultraGroupMap) {
          if (isMentioned) {
            num += this._ultraGroupMap[key].unreadMentionedCount || 0;
          } else {
            num += this._ultraGroupMap[key].unreadMessageCount || 0;
          }
        }

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: num
        });
      };

      JSEngine.prototype.clearUltraUnreadcount = function (targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return __awaiter(this, void 0, void 0, function () {
          var time, data, signal, code, ultraGroup;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._isUltraGroupListExist) {
                  return [2, Promise.resolve(ErrorCode$1.METHOD_NOT_AVAILABLE)];
                }

                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                if (this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2, ErrorCode$1.RC_NET_UNAVAILABLE];
                }

                time = Date.now();
                data = this._channel.codec.encodeClearUnreadCount({
                  conversationType: ConversationType$1.ULTRA_GROUP,
                  targetId: targetId,
                  channelId: channelId
                }, {
                  timestamp: time
                });
                signal = new PublishWriter(Topic$1[Topic$1.updUgRTime], data, this.currentUserId);
                signal.setHeaderQos(QOS.AT_LEAST_ONCE);
                return [4, this._channel.send(signal)];

              case 1:
                code = _a.sent().code;

                if (code === ErrorCode$1.SUCCESS) {
                  ultraGroup = this._ultraGroupMap[channelId + '_' + targetId];

                  if (ultraGroup) {
                    ultraGroup.unreadMessageCount = 0;
                    ultraGroup.unreadMentionedCount = 0;
                    ultraGroup.lastReadTime = time;
                  }
                }

                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype._getUltraGroupList = function (syncTime) {
        return __awaiter(this, void 0, void 0, function () {
          var isEraseMsgContent, reqBody, signal, _a, code, data, timer_1, list, isFinished, versionTime, _b, code_1, data_1, ultraGroupList;

          var _this = this;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                if (!this._channel || this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2];
                }

                isEraseMsgContent = false;
                reqBody = this._channel.codec.encodeUltraGroup(syncTime, isEraseMsgContent);
                signal = new QueryWriter(Topic$1[Topic$1.pullUgSes], reqBody, this.currentUserId);
                return [4, this._channel.send(signal, PBName.RelationsOutput, {
                  currentUserId: this.currentUserId,
                  conversationType: ConversationType$1.ULTRA_GROUP
                })];

              case 1:
                _a = _c.sent(), code = _a.code, data = _a.data;

                if (code !== ErrorCode$1.SUCCESS || !data) {
                  logger$1.warn('pull super conversation  failed, code:', code, ', data:', data, 'retrying...');
                  timer_1 = setTimeout(function () {
                    _this._firstPullUltraGroupTime = syncTime;

                    _this._getUltraGroupList(syncTime);

                    clearTimeout(timer_1);
                  }, 3 * 1000);
                  return [2];
                }

                list = (data === null || data === void 0 ? void 0 : data.list) || [];
                isFinished = data === null || data === void 0 ? void 0 : data.isFinished;
                list.forEach(function (con) {
                  con.notificationStatus = NotificationStatus$1.CLOSE;
                  con.notificationLevel = NotificationLevel$1.NOT_SET;
                  con.isTop = false;
                  _this._ultraGroupMap[con.channelId + '_' + con.targetId] = con;

                  _this._ultraGroupManager.addUltraGroupStatus(con);
                });
                if (!(isFinished === false)) return [3, 2];
                versionTime = list.length > 0 ? list[list.length - 1].versionTime || 0 : 0;

                this._getUltraGroupList(versionTime);

                return [3, 4];

              case 2:
                return [4, this.pullConversationStatus(this._firstPullUltraGroupTime)];

              case 3:
                _b = _c.sent(), code_1 = _b.code, data_1 = _b.data;

                if (code_1 !== ErrorCode$1.SUCCESS) {
                  logger$1.warn("pullConversationStatus fail code: ".concat(code_1, ", data: ").concat(data_1));
                }

                ultraGroupList = Object.values(this._ultraGroupMap);
                ultraGroupList = conversationSort(ultraGroupList);
                this._isUltraGroupListExist = true;

                this._watcher.ultraGroupEnable(clone(ultraGroupList));

                if (this._firstPullUltraGroupTime === 0) {
                  this._syncUltraMsg(this._lastSyncUltraMsgTimeStamp);
                }

                _c.label = 4;

              case 4:
                return [2];
            }
          });
        });
      };

      JSEngine.prototype._startUltraSyncInterval = function () {
        var _this = this;

        var duration = 3 * 60 * 1000;

        var startTimer = function startTimer() {
          _this._ultraGroupTimer = setTimeout(function () {
            var now = Date.now();

            if (now - _this._lastSyncUltraMsgLocalTimeStamp >= duration) {
              _this._syncUltraMsg(_this._lastSyncUltraMsgTimeStamp);
            }

            _this._stopUltraSyncInterval();

            startTimer();
          }, 30 * 1000);
        };

        this._lastSyncUltraMsgLocalTimeStamp = Date.now();

        this._syncUltraMsg(0);

        startTimer();
      };

      JSEngine.prototype._stopUltraSyncInterval = function () {
        if (this._ultraGroupTimer !== -1) {
          clearTimeout(this._ultraGroupTimer);
          this._ultraGroupTimer = -1;
        }
      };

      JSEngine.prototype._syncUltraMsg = function (time) {
        var _a;

        return __awaiter(this, void 0, void 0, function () {
          var params, signal, _b, code, data, list, syncTime, finished, ultragroups, newList, ultraGroups, msgUId, time_1;

          var _this = this;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                if (!this._channel || this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2];
                }

                if (this._isUltraPulling) {
                  return [2];
                }

                logger$1.info("start pull ultra msg, time: ".concat(time));
                this._isUltraPulling = true;
                params = this._channel.codec.encodeSuperSyncMsg(time);
                signal = new QueryWriter(Topic$1[Topic$1.pullUgMsg], params, this.currentUserId);
                return [4, this._channel.send(signal, PBName.DownStreamMessages, {
                  currentUserId: this.currentUserId,
                  conversation: {
                    conversationType: ConversationType$1.ULTRA_GROUP
                  }
                })];

              case 1:
                _b = _c.sent(), code = _b.code, data = _b.data;
                logger$1.info("end pull ultra msg, code: ".concat(code, ", syncTime: ").concat(data === null || data === void 0 ? void 0 : data.syncTime, ", count: ").concat((_a = data === null || data === void 0 ? void 0 : data.list) === null || _a === void 0 ? void 0 : _a.length));
                this._lastSyncUltraMsgLocalTimeStamp = Date.now();

                if (code !== ErrorCode$1.SUCCESS || !data) {
                  logger$1.warn('sync super  message  failed, code:', code, ', data:', data);
                  this._isUltraPulling = false;
                  return [2];
                }

                this._isUltraPulling = false;
                list = data.list, syncTime = data.syncTime, finished = data.finished;

                if (!this._isUltraGroupListExist) {
                  logger$1.info('init getUltraGroupList');
                  this._firstPullUltraGroupTime = 0;

                  this._getUltraGroupList(0);

                  this._lastSyncUltraMsgTimeStamp = syncTime;
                  return [2];
                }

                ultragroups = {};
                newList = [];
                list.forEach(function (msg) {
                  var _a, _b, _c;

                  var targetId = msg.targetId,
                      content = msg.content,
                      messageType = msg.messageType,
                      messageUId = msg.messageUId,
                      channelId = msg.channelId,
                      isCounted = msg.isCounted;

                  if (_this._ultraMsgMap[messageUId]) {
                    delete _this._ultraMsgMap[messageUId];
                    return;
                  }

                  var num = 0;

                  if (((_a = content === null || content === void 0 ? void 0 : content.mentionedInfo) === null || _a === void 0 ? void 0 : _a.type) === MentionedType$1.ALL || ((_c = (_b = content === null || content === void 0 ? void 0 : content.mentionedInfo) === null || _b === void 0 ? void 0 : _b.userIdList) === null || _c === void 0 ? void 0 : _c.includes(_this.currentUserId))) {
                    num = 1;
                  }

                  var ultraGroup = _this._ultraGroupMap[channelId + '_' + targetId];

                  if (ultraGroup) {
                    if (isCounted) {
                      if (messageType === MessageType$2.RECALL) {
                        if (ultraGroup.unreadMessageCount > 0) {
                          ultraGroup.unreadMessageCount -= 1;
                        }
                      } else {
                        ultraGroup.unreadMessageCount += 1;
                        ultraGroup.unreadMentionedCount += num;
                      }
                    }

                    ultraGroup.versionTime = syncTime;
                    ultraGroup.latestMessage = msg;
                    ultragroups[channelId + '_' + targetId] = ultraGroup;

                    _this._ultraGroupManager.addUltraGroupStatus(ultraGroup);
                  } else {
                    var group = {
                      conversationType: ConversationType$1.ULTRA_GROUP,
                      targetId: targetId,
                      channelId: channelId,
                      unreadMessageCount: 1,
                      unreadMentionedCount: num,
                      versionTime: syncTime,
                      latestMessage: msg,
                      notificationStatus: NotificationStatus$1.CLOSE,
                      notificationLevel: NotificationLevel$1.NOT_SET,
                      isTop: false
                    };
                    _this._ultraGroupMap[channelId + '_' + targetId] = group;
                    ultragroups[channelId + '_' + targetId] = group;

                    _this._ultraGroupManager.addUltraGroupStatus(group);
                  }

                  newList.push(msg);
                });

                if (Object.keys(ultragroups).length > 0) {
                  logger$1.info('notice ultragroups');
                  ultraGroups = Object.values(ultragroups);
                  ultraGroups = conversationSort(ultraGroups);

                  this._watcher.conversation(clone(ultraGroups));
                }

                logger$1.info('notice ultragroup message');

                this._watcher.batchMessage(newList);

                this._ultraGroupTimeQue = this._ultraGroupTimeQue.filter(function (timestamp) {
                  return timestamp > syncTime;
                });

                for (msgUId in this._ultraMsgMap) {
                  time_1 = this._ultraMsgMap[msgUId];
                  if (time_1 < syncTime) delete this._ultraMsgMap[msgUId];
                }

                if (finished === false) {
                  this._syncUltraMsg(syncTime);
                } else {
                  if (list && list.length > 0) {
                    this._lastSyncUltraMsgTimeStamp = syncTime;
                  }
                }

                if (this._ultraGroupTimeQue.length > 0) {
                  this._syncUltraMsg(this._lastSyncUltraMsgTimeStamp);
                }

                return [2];
            }
          });
        });
      };

      JSEngine.prototype.sendUltraMessage = function (targetId, options) {
        return __awaiter(this, void 0, void 0, function () {
          var data, signal, sentTime, receivedMessage, _a, code, resp, pubAck, channelId, ultraGroup;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                if (this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_UNAVAILABLE
                  }];
                }

                if (options.messageType === 'RC:SRSMsg') {
                  logger$1.warn('ultra group -> direction message convert to message');
                }

                options = this._handleMsgProperties(options, true);
                data = this._channel.codec.encodeUpMsg({
                  conversationType: ConversationType$1.ULTRA_GROUP,
                  targetId: targetId
                }, options);
                signal = new PublishWriter(Topic$1[Topic$1.ugMsg], data, targetId);
                signal.setHeaderQos(QOS.AT_LEAST_ONCE);
                sentTime = Date.now() - this._localConnectedTime + this._connectedTime;
                receivedMessage = transSentAttrs2IReceivedMessage(ConversationType$1.ULTRA_GROUP, targetId, __assign({}, options), '', sentTime, this.currentUserId);
                return [4, this._channel.send(signal)];

              case 1:
                _a = _b.sent(), code = _a.code, resp = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code,
                    data: receivedMessage
                  }];
                }

                pubAck = resp;
                receivedMessage.sentTime = pubAck.timestamp;
                receivedMessage.messageUId = pubAck.messageUId;
                this._ultraMsgMap[pubAck.messageUId] = pubAck.timestamp;
                channelId = options.channelId || '';
                ultraGroup = this._ultraGroupMap[channelId + '_' + targetId];

                if (ultraGroup) {
                  ultraGroup.latestMessage = receivedMessage;
                } else {
                  ultraGroup = {
                    conversationType: ConversationType$1.ULTRA_GROUP,
                    targetId: targetId,
                    channelId: channelId,
                    unreadMessageCount: 0,
                    unreadMentionedCount: 0,
                    versionTime: receivedMessage.sentTime,
                    latestMessage: receivedMessage,
                    notificationStatus: NotificationStatus$1.CLOSE,
                    notificationLevel: NotificationLevel$1.NOT_SET,
                    isTop: false
                  };
                  this._ultraGroupMap[channelId + '_' + targetId] = ultraGroup;

                  this._ultraGroupManager.addUltraGroupStatus(ultraGroup);
                }

                this._watcher.conversation(clone([ultraGroup]));

                return [2, {
                  code: code,
                  data: receivedMessage
                }];
            }
          });
        });
      };

      JSEngine.prototype.sendUltraGroupTypingStatus = function (options, operationType) {
        return __awaiter(this, void 0, void 0, function () {
          var conversationType, channelId, targetId, data, signal, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                if (this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_UNAVAILABLE
                  }];
                }

                conversationType = options.conversationType, channelId = options.channelId, targetId = options.targetId;
                data = this._channel.codec.encodeOperateStatus(targetId, conversationType, channelId || '', operationType || 0);
                signal = new PublishWriter(Topic$1[Topic$1.operate], data, targetId);
                signal.setHeaderQos(QOS.AT_LEAST_ONCE);
                return [4, this._channel.send(signal)];

              case 1:
                code = _a.sent().code;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code,
                    msg: ErrorCode$1[code]
                  }];
                }

                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      JSEngine.prototype.getUltraGroupMessageListByMessageUId = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var msgMap, query, params, signal, _a, code, data, list;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                if (this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_UNAVAILABLE
                  }];
                }

                if (options.messages && options.messages.length < 1) {
                  return [2, {
                    code: ErrorCode$1.MSG_LIMIT_ERROR
                  }];
                }

                if (options.messages && options.messages.length > 20) {
                  return [2, {
                    code: ErrorCode$1.MSG_LIMIT_ERROR
                  }];
                }

                msgMap = {};
                query = options.messages;
                query.forEach(function (item) {
                  msgMap[item.messageUId] = undefined;
                });
                params = this._channel.codec.encodeMsgQuery(options);
                signal = new QueryWriter(Topic$1[Topic$1.qryMsg], params, this.currentUserId);
                signal.setHeaderQos(QOS.AT_LEAST_ONCE);
                return [4, this._channel.send(signal, PBName.MsgQueryAck)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code,
                    msg: ErrorCode$1[code]
                  }];
                }

                list = (data || {}).list;
                Array.isArray(list) && list.forEach(function (msg) {
                  var messageUId = msg.messageUId;
                  msgMap[messageUId] = msg;
                });
                return [2, {
                  code: 0,
                  data: msgMap
                }];
            }
          });
        });
      };

      JSEngine.prototype._pullOperateStatusNotify = function (signal) {
        if (!this._channel) {
          return;
        }

        var status = this._channel.codec.decodeByPBName(signal.data, PBName.OperateStatusNotify);

        var conversationType = status.conversationType,
            info = status.info,
            summary = status.summary;
        logger$1.info("s_opNtf -> type: ".concat(conversationType, ", info: ").concat(info, ", summary: ").concat(summary));

        this._watcher.operateStatus(status);
      };

      JSEngine.prototype.expandUltraMessage = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var data, signal, _a, code, resp, pubAck;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                if (this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_UNAVAILABLE
                  }];
                }

                data = this._channel.codec.encodeExpandUltraMessage(options, this.currentUserId);
                signal = new PublishWriter(Topic$1[Topic$1.upMsgEx], data, options.targetId);
                signal.setHeaderQos(QOS.AT_LEAST_ONCE);
                return [4, this._channel.send(signal)];

              case 1:
                _a = _b.sent(), code = _a.code, resp = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code,
                    msg: ErrorCode$1[code]
                  }];
                }

                pubAck = resp;
                this._ultraMsgMap[pubAck.messageUId] = pubAck.timestamp;
                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      JSEngine.prototype.modifyMessage = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var data, signal, _a, code, resp, pubAck;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                if (this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_UNAVAILABLE
                  }];
                }

                data = this._channel.codec.encodemodifyMessage(options, this.currentUserId);
                signal = new PublishWriter(Topic$1[Topic$1.modifyMsg], data, options.targetId);
                signal.setHeaderQos(QOS.AT_LEAST_ONCE);
                return [4, this._channel.send(signal)];

              case 1:
                _a = _b.sent(), code = _a.code, resp = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code,
                    msg: ErrorCode$1[code]
                  }];
                }

                pubAck = resp;
                this._ultraMsgMap[pubAck.messageUId] = pubAck.timestamp;
                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      JSEngine.prototype._pullUltraChangeMessageList = function (time) {
        return __awaiter(this, void 0, void 0, function () {
          var params, signal, _a, code, data, _b, hasNext, list, syncTime, recalledList, tempMap, _loop_1, this_1, key, timeStampQue, msgUId, time_2;

          var _c;

          var _this = this;

          return __generator(this, function (_d) {
            switch (_d.label) {
              case 0:
                if (!this._channel) {
                  return [2];
                }

                if (this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2];
                }

                if (this._isPullingUltraChangeMessage) return [2];
                this._isPullingUltraChangeMessage = true;
                params = this._channel.codec.encodeQueryMsgChange(time);
                signal = new PublishWriter(Topic$1[Topic$1.qryMsgChange], params, this.currentUserId);
                signal.setHeaderQos(QOS.AT_LEAST_ONCE);
                return [4, this._channel.send(signal, PBName.MsgChangeList)];

              case 1:
                _a = _d.sent(), code = _a.code, data = _a.data;
                this._isPullingUltraChangeMessage = false;
                if (code !== ErrorCode$1.SUCCESS) return [2];
                _b = data || {}, hasNext = _b.hasNext, list = _b.list;
                syncTime = (data === null || data === void 0 ? void 0 : data.syncTime) || 0;
                recalledList = [];
                tempMap = {};
                Array.isArray(list) && list.forEach(function (item) {
                  var _a = item,
                      targetId = _a.targetId,
                      conversationType = _a.conversationType,
                      sendTime = _a.sendTime,
                      messageUId = _a.messageUId,
                      changeType = _a.changeType,
                      operatorId = _a.operatorId;
                  var channelId = item.channelId || '';
                  var key = conversationType + '_' + targetId;
                  var member = messageUId + '_' + channelId + '_' + sendTime;
                  var set = tempMap[key];

                  if (set) {
                    set.add(member);
                  } else {
                    var s = new Set([member]);
                    tempMap[key] = s;
                  }

                  if (changeType !== 3) {
                    _this._ultraMsgChangeMap[messageUId] = changeType;
                  } else {
                    recalledList.push({
                      targetId: targetId,
                      conversationType: conversationType,
                      sendTime: sendTime,
                      messageUId: messageUId,
                      senderUserId: operatorId,
                      channelId: channelId
                    });
                  }
                });
                if (Array.isArray(recalledList) && recalledList.length > 0) this._watcher.ultraGroupMessageRecalled(recalledList);

                _loop_1 = function _loop_1(key) {
                  var keyArr = key.split('_');
                  var conversationType = keyArr.shift();
                  var targetId = keyArr.join('_');
                  var set = tempMap[key];
                  var messages = [];
                  set.forEach(function (value) {
                    var _a = value.split('_'),
                        messageUId = _a[0],
                        channelId = _a[1],
                        sendTime = _a[2];

                    messages.push({
                      sendTime: Number(sendTime),
                      messageUId: messageUId,
                      channelId: channelId
                    });
                  });
                  var params_1 = {
                    targetId: targetId,
                    conversationType: Number(conversationType),
                    messages: messages
                  };

                  this_1._pullUltraMessageList(params_1);
                };

                this_1 = this;

                for (key in tempMap) {
                  _loop_1(key);
                }

                timeStampQue = this._pullUltraChangeMessageQue.filter(function (timestamp) {
                  return timestamp > syncTime;
                });
                this._pullUltraChangeMessageQue.length = 0;

                (_c = this._pullUltraChangeMessageQue).push.apply(_c, timeStampQue);

                for (msgUId in this._ultraMsgMap) {
                  time_2 = this._ultraMsgMap[msgUId];
                  if (time_2 < syncTime) delete this._ultraMsgMap[msgUId];
                }

                if (hasNext) {
                  this._pullUltraChangeMessageList(syncTime);
                } else {
                  this._lastPullingUltraChangeMessageTime = syncTime;
                }

                return [2];
            }
          });
        });
      };

      JSEngine.prototype._pullUltraMessageList = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var params, signal, _a, code, data, list, expansionList, modifiedList;

          var _this = this;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                if (this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_UNAVAILABLE
                  }];
                }

                params = this._channel.codec.encodeMsgQuery(options);
                signal = new QueryWriter(Topic$1[Topic$1.qryMsg], params, this.currentUserId);
                signal.setHeaderQos(QOS.AT_LEAST_ONCE);
                return [4, this._channel.send(signal, PBName.MsgQueryAck)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code,
                    msg: ErrorCode$1[code]
                  }];
                }

                list = (data || {}).list;
                expansionList = [];
                modifiedList = [];
                Array.isArray(list) && list.forEach(function (msg) {
                  var targetId = msg.targetId,
                      channelId = msg.channelId,
                      messageUId = msg.messageUId;
                  var ultraGroup = _this._ultraGroupMap[channelId + '_' + targetId];

                  if (ultraGroup) {
                    if (ultraGroup.latestMessage.messageUId === msg.messageUId) {
                      ultraGroup.latestMessage = msg;
                    }
                  }

                  var changeType = _this._ultraMsgChangeMap[messageUId + ''];

                  if (changeType === 1) {
                    expansionList.push(msg);
                  } else if (changeType === 2) {
                    modifiedList.push(msg);
                  }
                });
                if (expansionList.length > 0) this._watcher.ultraGroupMessageExpansionUpdated(expansionList || []);
                if (modifiedList.length > 0) this._watcher.ultraGroupMessageModified(modifiedList || []);
                return [2];
            }
          });
        });
      };

      JSEngine.prototype.getUltraHistoryMsg = function (targetId, options) {
        return __awaiter(this, void 0, void 0, function () {
          var params, signal, _a, code, data;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                if (this._status !== ConnectionStatus$1.CONNECTED) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_UNAVAILABLE
                  }];
                }

                params = this._channel.codec.encodeGetHistoryMsg(targetId, options);
                signal = new QueryWriter(Topic$1[Topic$1.qryUgMsg], params, this.currentUserId);
                return [4, this._channel.send(signal, PBName.HistoryMsgOuput, {
                  currentUserId: this.currentUserId,
                  conversation: {
                    conversationType: ConversationType$1.ULTRA_GROUP,
                    targetId: targetId
                  }
                })];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code !== ErrorCode$1.SUCCESS || !data) {
                  logger$1.warn('get super history message  failed, code:', code, ', data:', data);
                  return [2, {
                    code: code
                  }];
                }

                return [2, {
                  code: code,
                  data: data
                }];
            }
          });
        });
      };

      JSEngine.prototype.searchUltraGroupMessages = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            if (!this._channel) {
              return [2, {
                code: ErrorCode$1.RC_NET_CHANNEL_INVALID
              }];
            }

            if (this._status !== ConnectionStatus$1.CONNECTED) {
              return [2, {
                code: ErrorCode$1.RC_NET_UNAVAILABLE
              }];
            }

            return [2, {
              code: ErrorCode$1.SUCCESS
            }];
          });
        });
      };

      JSEngine.prototype.getAllConversationState = function () {
        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: this._conversationManager.getAllConversationState()
        });
      };

      JSEngine.prototype.joinRTCRoom = function (roomId, mode, broadcastType, joinType, innerUserDatas, outerUserDatas) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer;
          return __generator(this, function (_a) {
            if (!this._channel) {
              return [2, {
                code: ErrorCode$1.RC_NET_CHANNEL_INVALID
              }];
            }

            reqBody = this._channel.codec.encodeJoinRTCRoom(mode, broadcastType, joinType, innerUserDatas, outerUserDatas);
            writer = new QueryWriter(Topic$1[Topic$1.rtcRJoin_data], reqBody, roomId);
            return [2, this._channel.send(writer, PBName.RtcUserListOutput)];
          });
        });
      };

      JSEngine.prototype.quitRTCRoom = function (roomId) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeQuitRTCRoom();
                writer = new QueryWriter(Topic$1[Topic$1.rtcRExit], reqBody, roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;
                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.rtcPing = function (roomId, mode, broadcastType) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeJoinRTCRoom(mode, broadcastType);
                writer = new QueryWriter(Topic$1[Topic$1.rtcPing], reqBody, roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;
                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.getRTCRoomInfo = function (roomId) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer;
          return __generator(this, function (_a) {
            if (!this._channel) {
              return [2, {
                code: ErrorCode$1.RC_NET_CHANNEL_INVALID
              }];
            }

            reqBody = this._channel.codec.encodeGetRTCRoomInfo();
            writer = new QueryWriter(Topic$1[Topic$1.rtcRInfo], reqBody, roomId);
            return [2, this._channel.send(writer, PBName.RtcRoomInfoOutput)];
          });
        });
      };

      JSEngine.prototype.getRTCUserInfoList = function (roomId) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, _a, code, data;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                reqBody = this._channel.codec.encodeGetRTCRoomInfo();
                writer = new QueryWriter(Topic$1[Topic$1.rtcUData], reqBody, roomId);
                return [4, this._channel.send(writer, PBName.RtcUserListOutput)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;
                return [2, {
                  code: code,
                  data: data ? {
                    users: data.users
                  } : data
                }];
            }
          });
        });
      };

      JSEngine.prototype.setRTCUserInfo = function (roomId, key, value) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeSetRTCUserInfo(key, value);
                writer = new QueryWriter(Topic$1[Topic$1.rtcUPut], reqBody, roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;
                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.removeRTCUserInfo = function (roomId, keys) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeRemoveRTCUserInfo(keys);
                writer = new PublishWriter(Topic$1[Topic$1.rtcUDel], reqBody, roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;
                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.setRTCData = function (roomId, key, value, isInner, apiType, message) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeSetRTCData(key, value, isInner, apiType, message);
                writer = new PublishWriter(Topic$1[Topic$1.rtcSetData], reqBody, roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;
                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.setRTCTotalRes = function (roomId, message, valueInfo, objectName, mcuValInfo) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeUserSetRTCData(message, valueInfo, objectName, mcuValInfo);
                writer = new QueryWriter(Topic$1[Topic$1.userSetData], reqBody, roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;
                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.setRTCCDNUris = function (roomId, objectName, CDNUris) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeUserSetRTCCDNUris(objectName, CDNUris);
                writer = new QueryWriter(Topic$1[Topic$1.userSetData], reqBody, roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;
                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.getRTCData = function (roomId, keys, isInner, apiType) {
        if (!this._channel) {
          return Promise.resolve({
            code: ErrorCode$1.RC_NET_CHANNEL_INVALID
          });
        }

        var reqBody = this._channel.codec.encodeGetRTCData(keys, isInner, apiType);

        var writer = new QueryWriter(Topic$1[Topic$1.rtcQryData], reqBody, roomId);
        return this._channel.send(writer, PBName.RtcQryOutput);
      };

      JSEngine.prototype.removeRTCData = function (roomId, keys, isInner, apiType, message) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeRemoveRTCData(keys, isInner, apiType, message);
                writer = new PublishWriter(Topic$1[Topic$1.rtcDelData], reqBody, roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;
                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.setRTCOutData = function (roomId, rtcData, type, message) {
        throw new Error('JSEngine\'s method not implemented.');
      };

      JSEngine.prototype.getRTCOutData = function (roomId, userIds) {
        throw new Error('JSEngine\'s method not implemented.');
      };

      JSEngine.prototype.getRTCToken = function (roomId, mode, broadcastType) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer;
          return __generator(this, function (_a) {
            if (!this._channel) {
              return [2, {
                code: ErrorCode$1.RC_NET_CHANNEL_INVALID
              }];
            }

            reqBody = this._channel.codec.encodeJoinRTCRoom(mode, broadcastType);
            writer = new QueryWriter(Topic$1[Topic$1.rtcToken], reqBody, roomId);
            return [2, this._channel.send(writer, PBName.RtcTokenOutput)];
          });
        });
      };

      JSEngine.prototype.setRTCState = function (roomId, report) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeSetRTCState(report);
                writer = new QueryWriter(Topic$1[Topic$1.rtcUserState], reqBody, roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;
                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.getRTCUserInfo = function (roomId) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            throw new Error('Method not implemented.');
          });
        });
      };

      JSEngine.prototype.getRTCUserList = function (roomId) {
        if (!this._channel) {
          return Promise.resolve({
            code: ErrorCode$1.RC_NET_CHANNEL_INVALID
          });
        }

        var data = this._channel.codec.encodeGetRTCRoomInfo();

        var writer = new QueryWriter(Topic$1[Topic$1.rtcUList], data, roomId);
        return this._channel.send(writer, PBName.RtcUserListOutput);
      };

      JSEngine.prototype.joinLivingRoomAsAudience = function (roomId, mode, broadcastType) {
        if (mode === void 0) {
          mode = RTCMode.LIVE;
        }

        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, _a, code, data, _b, rtcToken, entries;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                reqBody = this._channel.codec.encodeJoinRTCRoom(mode, broadcastType);
                writer = new QueryWriter(Topic$1[Topic$1.viewerJoinR], reqBody, roomId);
                return [4, this._channel.send(writer, PBName.RtcViewerJoinedOutput)];

              case 1:
                _a = _c.sent(), code = _a.code, data = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                _b = data, rtcToken = _b.rtcToken, entries = _b.entries;
                return [2, {
                  code: code,
                  data: {
                    token: rtcToken,
                    kvEntries: entries
                  }
                }];
            }
          });
        });
      };

      JSEngine.prototype.quitLivingRoomAsAudience = function (roomId) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeQuitRTCRoom();
                writer = new QueryWriter(Topic$1[Topic$1.viewerExitR], reqBody, roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;

                this._rtcKVManager.reset();

                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.rtcIdentityChange = function (roomId, changeType, broadcastType) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, _a, code, data;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (!this._channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                reqBody = this._channel.codec.encodeIdentityChangeInfo(changeType, broadcastType);
                writer = new QueryWriter(Topic$1[Topic$1.rtcIdentityChange], reqBody, roomId);
                return [4, this._channel.send(writer, PBName.RtcUserListOutput)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code !== ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code
                  }];
                }

                return [2, {
                  code: code,
                  data: data
                }];
            }
          });
        });
      };

      JSEngine.prototype.pullRTCRoomEntry = function (roomId, timestamp) {
        return __awaiter(this, void 0, void 0, function () {
          var _a, channel, currentUserId, buff, writer, _b, code, data, kvEntries;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                _a = this, channel = _a._channel, currentUserId = _a.currentUserId;

                if (!channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                logger$1.info('audience in room start pull KV');
                buff = channel.codec.encodePullRTCRoomKV(roomId, 0);
                writer = new QueryWriter(Topic$1[Topic$1.rtcPullKv], buff, currentUserId);
                return [4, channel.send(writer, PBName.RtcKVOutput)];

              case 1:
                _b = _c.sent(), code = _b.code, data = _b.data;
                logger$1.info("audience in room end pull KV, code: ".concat(code, ", data: ").concat(JSON.stringify(data || {})));

                if (code === ErrorCode$1.SUCCESS) {
                  kvEntries = data.kvEntries;

                  this._watcher.onRTCDataChange(kvEntries, roomId);

                  return [2, {
                    code: code,
                    data: data
                  }];
                }

                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      JSEngine.prototype.getRTCJoinedUserInfo = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
          var _a, channel, currentUserId, buff, writer, _b, code, data;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                _a = this, channel = _a._channel, currentUserId = _a.currentUserId;

                if (!channel) {
                  return [2, {
                    code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                  }];
                }

                buff = channel.codec.encodeQueryUserJoinedInfo(userId);
                writer = new QueryWriter(Topic$1[Topic$1.rtcQueryJoined], buff, currentUserId);
                return [4, channel.send(writer, PBName.RtcQueryUserJoinedOutput)];

              case 1:
                _b = _c.sent(), code = _b.code, data = _b.data;

                if (code === ErrorCode$1.SUCCESS) {
                  return [2, {
                    code: code,
                    data: data
                  }];
                }

                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      JSEngine.prototype.getDeviceId = function () {
        return getDeviceId(this.runtime);
      };

      JSEngine.prototype.requestRoomPK = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeRequestRoomPK(options);
                writer = new QueryWriter(Topic$1[Topic$1.rtcInvite], reqBody, options.roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;

                this._rtcKVManager.reset();

                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.cancelRoomPK = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeCancelRoomPK(options);
                writer = new QueryWriter(Topic$1[Topic$1.rtcCancelInvite], reqBody, options.roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;

                this._rtcKVManager.reset();

                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.responseRoomPK = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeResponseRoomPK(options);
                writer = new QueryWriter(Topic$1[Topic$1.rtcInviteAnswer], reqBody, options.roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;

                this._rtcKVManager.reset();

                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.endRoomPK = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var reqBody, writer, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                reqBody = this._channel.codec.encodeEndRoomPK(options);
                writer = new QueryWriter(Topic$1[Topic$1.rtcEndInvite], reqBody, options.roomId);
                return [4, this._channel.send(writer)];

              case 1:
                code = _a.sent().code;

                this._rtcKVManager.reset();

                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.bindRTCRoomForChatroom = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var chatRoomId, reqBody, writer, resp, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._channel) {
                  return [2, ErrorCode$1.RC_NET_CHANNEL_INVALID];
                }

                chatRoomId = options.chatRoomId;
                reqBody = this._channel.codec.encodebindRTCRoomForChatroom(options);
                writer = new QueryWriter(Topic$1[Topic$1.setRtcRoomId], reqBody, chatRoomId);
                return [4, this._channel.send(writer)];

              case 1:
                resp = _a.sent();
                code = resp.code;
                return [2, code];
            }
          });
        });
      };

      JSEngine.prototype.callExtra = function (method) {
        var args = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }

        return Promise.resolve({
          code: ErrorCode$1.EXTRA_METHOD_UNDEFINED
        });
      };

      JSEngine.prototype.getConversationListWithAllChannel = function () {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.getConversationListWithAllChannelByPage = function (index, limit) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.clearConversations = function () {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.setUserStatusListener = function (config, listener) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.setUserStatus = function (status) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.subscribeUserStatus = function (userIds) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.getUserStatus = function (userId) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.addToBlacklist = function (userId) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.removeFromBlacklist = function (userId) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.getBlacklist = function () {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.getBlacklistStatus = function (userId) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.insertMessage = function (conversationType, targetId, insertOptions) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.deleteMessages = function (timestamps) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.deleteMessagesByTimestamp = function (conversationType, targetId, timestamp, cleanSpace, channelId) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.clearMessages = function (conversationType, targetId, channelId) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.getMessage = function (messageId) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.setMessageContent = function (messageId, content, objectName) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.setMessageSearchField = function (messageId, content, searchFiles) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.searchConversationByContent = function (keyword, messageTypes, channelId, conversationTypes) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.searchMessageByContent = function (conversationType, targetId, keyword, timestamp, count, total) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.getUnreadMentionedMessages = function (conversationType, targetId) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.setMessageSentStatus = function (messageId, sentStatus) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.setMessageReceivedStatus = function (messageId, receivedStatus) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.clearUnreadCountByTimestamp = function (conversationType, targetId, timestamp, channelId) {
        throw new Error('Method not implemented.');
      };

      JSEngine.prototype.setUltraGroupDefaultNotificationLevel = function (targetId, notificationLevel, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          var channel, buff, writer, resp, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._isUltraGroupListExist) {
                  return [2, Promise.resolve({
                    code: ErrorCode$1.METHOD_NOT_AVAILABLE
                  })];
                }

                channel = this._channel;
                if (!channel) return [3, 2];
                buff = channel.codec.encodeSetUltraGroupDefaultNotificationLevel(notificationLevel, channelId);
                writer = new QueryWriter(Topic$1[Topic$1.ugUnpushSet], buff, targetId);
                return [4, channel.send(writer)];

              case 1:
                resp = _a.sent();
                code = resp.code;
                if (code !== ErrorCode$1.SUCCESS) return [2, {
                  code: code
                }];
                return [2, {
                  code: code
                }];

              case 2:
                return [2, {
                  code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                }];
            }
          });
        });
      };

      JSEngine.prototype.getUltraGroupDefaultNotificationLevel = function (targetId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          var channel, buff, writer, resp, code, data, unpushLevel;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this._isUltraGroupListExist) {
                  return [2, Promise.resolve({
                    code: ErrorCode$1.METHOD_NOT_AVAILABLE
                  })];
                }

                channel = this._channel;
                if (!channel) return [3, 2];
                buff = channel.codec.encodeGetUltraGroupDefaultNotificationLevel(channelId);
                writer = new QueryWriter(Topic$1[Topic$1.ugUnpushQuery], buff, targetId);
                return [4, channel.send(writer, PBName.GroupUnpushResult)];

              case 1:
                resp = _a.sent();
                code = resp.code, data = resp.data;
                if (code !== ErrorCode$1.SUCCESS || !data) return [2, {
                  code: code
                }];
                unpushLevel = data.unpushLevel;
                return [2, {
                  code: code,
                  data: unpushLevel
                }];

              case 2:
                return [2, {
                  code: ErrorCode$1.RC_NET_CHANNEL_INVALID
                }];
            }
          });
        });
      };

      JSEngine.prototype.getConversationNotificationLevel = function (conversationType, targetId, channelId) {
        if (!this._isUltraGroupListExist && conversationType === ConversationType$1.ULTRA_GROUP) {
          return Promise.resolve({
            code: ErrorCode$1.METHOD_NOT_AVAILABLE
          });
        }

        var localConversation;

        if (conversationType === ConversationType$1.ULTRA_GROUP) {
          localConversation = this._ultraGroupManager.get(ConversationType$1.ULTRA_GROUP, targetId, channelId);
        } else {
          localConversation = this._conversationManager.get(conversationType, targetId, channelId);
        }

        if (!localConversation) {
          return Promise.resolve({
            code: ErrorCode$1.SUCCESS,
            data: NotificationLevel$1.NOT_SET
          });
        }

        var data = localConversation.notificationLevel;

        if (isUndefined(localConversation.notificationLevel) && !isUndefined(localConversation.notificationStatus)) {
          data = NotificationStatus$1.OPEN === localConversation.notificationStatus ? 1 : 0;
        }

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: data
        });
      };

      JSEngine.prototype.getConversationNotificationStatus = function (conversationType, targetId, channelId) {
        var localConversation;

        if (conversationType === ConversationType$1.ULTRA_GROUP) {
          localConversation = this._ultraGroupManager.get(ConversationType$1.ULTRA_GROUP, targetId, channelId);
        } else {
          localConversation = this._conversationManager.get(conversationType, targetId, channelId);
        }

        if (!localConversation) {
          return Promise.resolve({
            code: ErrorCode$1.SUCCESS,
            data: NotificationStatus$1.CLOSE
          });
        }

        return Promise.resolve({
          code: ErrorCode$1.SUCCESS,
          data: localConversation.notificationStatus
        });
      };

      JSEngine.prototype.getRemoteHistoryMessages = function (conversationType, targetId, timestamp, count, order, channelId) {
        return this.getHistoryMessage(conversationType, targetId, timestamp, count, order, channelId);
      };

      return JSEngine;
    }(AEngine);

    var PluginContext = function () {
      function PluginContext(_context) {
        this._context = _context;
      }

      PluginContext.prototype.__getContext = function () {
        return this._context;
      };

      PluginContext.prototype.getNaviInfo = function () {
        return this._context.getInfoFromCache();
      };

      PluginContext.prototype.getCoreVersion = function () {
        return this._context.coreVersion;
      };

      PluginContext.prototype.getAPIVersion = function () {
        return this._context.apiVersion;
      };

      PluginContext.prototype.getAppkey = function () {
        return this._context.appkey;
      };

      PluginContext.prototype.getCurrentId = function () {
        return this._context.getCurrentUserId();
      };

      PluginContext.prototype.getConnectionStatus = function () {
        return this._context.getConnectionStatus();
      };

      PluginContext.prototype.getDeviceId = function () {
        return this._context.getDeviceId();
      };

      PluginContext.prototype.sendMessage = function (conversationType, targetId, options) {
        return this._context.sendMessage(conversationType, targetId, options);
      };

      PluginContext.prototype.registerMessageType = function (objectName, isPersited, isCounted, searchProps) {
        if (searchProps === void 0) {
          searchProps = [];
        }

        this._context.registerMessageType(objectName, isPersited, isCounted, searchProps);
      };

      PluginContext.prototype.getServerTime = function () {
        return this._context.getServerTime();
      };

      PluginContext.prototype.getRTCJoinedUserInfo = function (userId) {
        return this._context.getRTCJoinedUserInfo(userId);
      };

      return PluginContext;
    }();

    var RTCPluginContext = function (_super) {
      __extends(RTCPluginContext, _super);

      function RTCPluginContext() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      RTCPluginContext.prototype.getNaviInfo = function () {
        return this._context.getInfoFromCache();
      };

      RTCPluginContext.prototype.joinRTCRoom = function (roomId, mode, broadcastType, joinType, innerUserDatas, outerUserDatas) {
        return this._context.joinRTCRoom(roomId, mode, broadcastType, joinType, innerUserDatas, outerUserDatas);
      };

      RTCPluginContext.prototype.quitRTCRoom = function (roomId) {
        return this._context.quitRTCRoom(roomId);
      };

      RTCPluginContext.prototype.rtcPing = function (roomId, mode, broadcastType) {
        return this._context.rtcPing(roomId, mode, broadcastType);
      };

      RTCPluginContext.prototype.getRTCRoomInfo = function (roomId) {
        return this._context.getRTCRoomInfo(roomId);
      };

      RTCPluginContext.prototype.getRTCUserInfoList = function (roomId) {
        return this._context.getRTCUserInfoList(roomId);
      };

      RTCPluginContext.prototype.getRTCUserInfo = function (roomId) {
        return this._context.getRTCUserInfo(roomId);
      };

      RTCPluginContext.prototype.setRTCUserInfo = function (roomId, key, value) {
        return this._context.setRTCUserInfo(roomId, key, value);
      };

      RTCPluginContext.prototype.removeRTCUserInfo = function (roomId, keys) {
        return this._context.removeRTCUserInfo(roomId, keys);
      };

      RTCPluginContext.prototype.setRTCData = function (roomId, key, value, isInner, apiType, message) {
        return this._context.setRTCData(roomId, key, value, isInner, apiType, message);
      };

      RTCPluginContext.prototype.setRTCTotalRes = function (roomId, message, valueInfo, objectName, mcuValInfo) {
        return this._context.setRTCTotalRes(roomId, message, valueInfo, objectName, mcuValInfo);
      };

      RTCPluginContext.prototype.setRTCCDNUris = function (roomId, objectName, CDNUris) {
        return this._context.setRTCCDNUris(roomId, objectName, CDNUris);
      };

      RTCPluginContext.prototype.getRTCData = function (roomId, keys, isInner, apiType) {
        return this._context.getRTCData(roomId, keys, isInner, apiType);
      };

      RTCPluginContext.prototype.removeRTCData = function (roomId, keys, isInner, apiType, message) {
        return this._context.removeRTCData(roomId, keys, isInner, apiType, message);
      };

      RTCPluginContext.prototype.setRTCOutData = function (roomId, rtcData, type, message) {
        return this._context.setRTCOutData(roomId, rtcData, type, message);
      };

      RTCPluginContext.prototype.getRTCOutData = function (roomId, userIds) {
        return this._context.getRTCOutData(roomId, userIds);
      };

      RTCPluginContext.prototype.getRTCToken = function (roomId, mode, broadcastType) {
        return this._context.getRTCToken(roomId, mode, broadcastType);
      };

      RTCPluginContext.prototype.setRTCState = function (roomId, report) {
        return this._context.setRTCState(roomId, report);
      };

      RTCPluginContext.prototype.getRTCUserList = function (roomId) {
        return this._context.getRTCUserList(roomId);
      };

      RTCPluginContext.prototype.joinLivingRoomAsAudience = function (roomId, mode, broadcastType) {
        return this._context.joinLivingRoomAsAudience(roomId, mode, broadcastType);
      };

      RTCPluginContext.prototype.quitLivingRoomAsAudience = function (roomId) {
        return this._context.quitLivingRoomAsAudience(roomId);
      };

      RTCPluginContext.prototype.rtcIdentityChange = function (roomId, changeType, broadcastType) {
        return this._context.rtcIdentityChange(roomId, changeType, broadcastType);
      };

      RTCPluginContext.prototype.requestRoomPK = function (options) {
        return this._context.requestRoomPK(options);
      };

      RTCPluginContext.prototype.cancelRoomPK = function (options) {
        return this._context.cancelRoomPK(options);
      };

      RTCPluginContext.prototype.responseRoomPK = function (options) {
        return this._context.responseRoomPK(options);
      };

      RTCPluginContext.prototype.endRoomPK = function (options) {
        return this._context.endRoomPK(options);
      };

      return RTCPluginContext;
    }(PluginContext);

    function cloneMessage(message) {
      return Object.assign({}, message);
    }

    function uploadConnectDurationStatisData(runtime) {
      return __awaiter(this, void 0, void 0, function () {
        var tag, bundleId, _a, startTime, endTime, code, networkType, error_1, duration, serverContent;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              tag = StatisticsTag.IM_CONNECTION_DURATION;
              bundleId = logger$1.getStatisticsBaseData().bundleId;
              _a = logger$1.getStatisticsData(tag), startTime = _a.startTime, endTime = _a.endTime, code = _a.code;
              networkType = NetworkType.UNKONWN;
              _b.label = 1;

            case 1:
              _b.trys.push([1, 3,, 4]);

              return [4, runtime.getNetworkType()];

            case 2:
              networkType = _b.sent();
              return [3, 4];

            case 3:
              error_1 = _b.sent();
              logger$1.debug(error_1.message);
              return [3, 4];

            case 4:
              duration = 0;

              if (isNumber(startTime) && isNumber(endTime) && endTime > startTime && startTime) {
                duration = endTime - startTime;
              }

              serverContent = {
                bid: bundleId,
                cod: code,
                dur: duration,
                net: networkType
              };
              logger$1.reportStatisticsLog(tag, serverContent);
              return [2];
          }
        });
      });
    }

    var APIContext = function () {
      function APIContext(_runtime, options) {
        var _a;

        this._runtime = _runtime;
        this._token = '';
        this._pluginContextQueue = [];
        this._pluginInstanseMap = {};
        this.coreVersion = "5.3.2";
        this._versionInfo = {};
        this._typingInfo = {};
        this._isInternalConnected = false;
        this._connectionStatus = ConnectionStatus$1.DISCONNECTED;
        this._canRedirectConnect = false;
        this._watcher = {
          message: undefined,
          batchMessage: undefined,
          conversationState: undefined,
          chatroomState: undefined,
          connectionState: undefined,
          rtcInnerWatcher: undefined,
          expansion: undefined,
          tag: undefined,
          conversationTagChanged: undefined,
          pullFinished: undefined,
          onConnecting: undefined,
          onConnected: undefined,
          onDisconnect: undefined,
          onSuspend: undefined,
          readReceiptReceived: undefined,
          messageReceiptRequest: undefined,
          messageReceiptResponse: undefined,
          typingState: undefined,
          messageBlocked: undefined,
          ultraGroupEnable: undefined,
          operateStatus: undefined,
          ultraGroupMessageExpansionUpdated: undefined,
          ultraGroupMessageModified: undefined,
          ultraGroupMessageRecalled: undefined
        };
        this._typingInternalTimer = -1;
        this._typingExpireTime = 2 * 1000;
        this._typingChangedList = [];
        this.getChatRoomHistoryMessages = this.getChatroomHistoryMessages;
        this._options = Object.assign({}, options);
        this.appkey = this._options.appkey;
        this.apiVersion = this._options.apiVersion;
        this.apiPKGName = this._options.apiPKGName || '';

        if (this._options.typingExpireTime) {
          if (this._options.typingExpireTime < 2000) {
            this._typingExpireTime = 2000;
          } else if (this._options.typingExpireTime > 6000) {
            this._typingExpireTime = 6000;
          } else {
            this._typingExpireTime = this._options.typingExpireTime;
          }
        }

        this._options.navigators = this._options.navigators.filter(function (item) {
          return /^https?:\/\//.test(item);
        });
        this._options.navigators = this._options.navigators.map(function (item) {
          return item.replace(/\/$/g, '');
        });

        if (this._options.navigators.length === 0 && !false) {
          (_a = this._options.navigators).push.apply(_a, PUBLIC_CLOUD_NAVI_URIS);
        }

        logger$1.updateStatisticsBaseData({
          bundleId: this.apiPKGName
        });
        logger$1.initReportLog({
          runtime: this._runtime,
          logSwitch: 1,
          logPolicy: JSON.parse('{}'),
          appkey: this.appkey,
          version: this.apiVersion
        });
        var engineWatcher = {
          status: this._connectionStatusListener.bind(this),
          batchMessage: this._batchMessageReceiver.bind(this),
          chatroom: this._chatroomInfoListener.bind(this),
          conversation: this._conversationInfoListener.bind(this),
          expansion: this._expansionInfoListener.bind(this),
          tag: this._tagListener.bind(this),
          conversationTag: this._conversationTagListener.bind(this),
          onRTCDataChange: this._rtcDataChange.bind(this),
          pullFinished: this._pullFinishedListener.bind(this),
          ultraGroupEnable: this._ultraGroupEnableListener.bind(this),
          operateStatus: this._operateStatusListener.bind(this),
          ultraGroupMessageExpansionUpdated: this._ultraGroupMessageExpansionUpdatedListener.bind(this),
          ultraGroupMessageModified: this._ultraGroupMessageModifiedListener.bind(this),
          ultraGroupMessageRecalled: this._ultraGroupMessageRecalledListener.bind(this)
        };
        this._engine = usingCppEngine() ? new RCCppEngine(_runtime, engineWatcher, this._options) : new JSEngine(_runtime, engineWatcher, this._options);
      }

      APIContext.init = function (runtime, options) {
        logger$1.setLogLevel(options.logLevel);
        logger$1.setLogStdout(options.logStdout);

        if (options.indexDBSwitch || isUndefined(options.indexDBSwitch)) {
          RCIndexDB.init();
        }

        logger$1.debug('APIContext.init =>', options.appkey, options.navigators);

        if (this._context) {
          logger$1.error('Repeat initialize!');
          return this._context;
        }

        logger$1.warn('RCEngine Commit:', "4e94b06a2cf663996b34f6374c3b84e29b8fb5dd");
        this._context = new APIContext(runtime, options);

        logger$1.__insertLogIntoDatabase();

        return this._context;
      };

      APIContext.destroy = function () {
        if (this._context) {
          this._context._destroy();

          this._context = undefined;
        }
      };

      APIContext.prototype.install = function (plugin, options) {
        if (this._pluginInstanseMap[plugin.tag]) {
          logger$1.warn("Repeat install plugin: ".concat(plugin.tag));
          return this._pluginInstanseMap[plugin.tag];
        }

        var context = plugin.tag === 'RCRTC' ? new RTCPluginContext(this) : new PluginContext(this);
        var pluginClient = null;

        try {
          if (!plugin.verify(this._runtime)) {
            return null;
          }

          pluginClient = plugin.setup(context, this._runtime, options);
        } catch (error) {
          logger$1.error('install plugin error!\n', error);
        }

        var internalTags = ['RCRTC', 'RCCall'];

        if (internalTags.includes(plugin.tag) && plugin.version && plugin.name) {
          this._versionInfo[plugin.name] = plugin.version;
        }

        pluginClient && this._pluginContextQueue.push(context);

        if (pluginClient) {
          this._pluginInstanseMap[plugin.tag] = pluginClient;
        }

        return pluginClient;
      };

      APIContext.prototype._handleRedirect = function () {
        return __awaiter(this, void 0, void 0, function () {
          var code;

          var _this = this;

          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                logger$1.debug('_handleRedirct', this._token);
                return [4, this.connect(this._token, true)];

              case 1:
                code = _a.sent().code;

                if (code !== ErrorCode$1.SUCCESS && this._canRedirectConnect) {
                  this._handleSuspend(code);

                  setTimeout(function () {
                    _this._handleRedirect();
                  }, 5000);
                }

                return [2];
            }
          });
        });
      };

      APIContext.prototype._connectionStatusListener = function (status) {
        var _a;

        return __awaiter(this, void 0, void 0, function () {
          var statisticsWhiteList;
          return __generator(this, function (_b) {
            statisticsWhiteList = [ConnectionStatus$1.REDIRECT, ConnectionStatus$1.BLOCKED, ConnectionStatus$1.KICKED_OFFLINE_BY_OTHER_CLIENT, ConnectionStatus$1.DISCONNECT_BY_SERVER, ConnectionStatus$1.DISCONNECTED, ConnectionStatus$1.NETWORK_UNAVAILABLE];

            if (statisticsWhiteList.includes(status)) {
              logger$1.setStatisticsData(StatisticsTag.IM_CONNECTION_DURATION, {
                endTime: new Date().getTime(),
                code: status
              });
              uploadConnectDurationStatisData(this._runtime);
            }

            if (status === ConnectionStatus$1.REDIRECT) {
              this._canRedirectConnect = true;

              this._handleSuspend(status);

              this._handleRedirect();
            } else if (status === ConnectionStatus$1.BLOCKED || status === ConnectionStatus$1.KICKED_OFFLINE_BY_OTHER_CLIENT || status === ConnectionStatus$1.DISCONNECT_BY_SERVER) {
              this._canRedirectConnect = false;

              this._handleDisconnect(status);
            } else if (status === ConnectionStatus$1.CONNECTING) {
              this._handleConnecting();
            } else if (status === ConnectionStatus$1.CONNECTED) {
              this._handleConnected();
            } else if (status === ConnectionStatus$1.DISCONNECTED) {
              this._handleDisconnect(status);
            } else if (status === ConnectionStatus$1.NETWORK_UNAVAILABLE) {
              this._handleSuspend(status);
            }

            this._connectionStatus = status;
            ((_a = this._watcher.rtcInnerWatcher) === null || _a === void 0 ? void 0 : _a.status) && this._watcher.rtcInnerWatcher.status(status);

            this._pluginContextQueue.forEach(function (item) {
              item.onconnectionstatechange && item.onconnectionstatechange(status);
            });

            this._watcher.connectionState && this._watcher.connectionState(status);
            return [2];
          });
        });
      };

      APIContext.prototype._handleConnecting = function () {
        if (this._watcher.onConnecting) {
          this._watcher.onConnecting();
        }
      };

      APIContext.prototype._handleConnected = function () {
        if (this._watcher.onConnected) {
          this._watcher.onConnected();
        }
      };

      APIContext.prototype._handleDisconnect = function (status) {
        if (this._watcher.onDisconnect) {
          this._watcher.onDisconnect(status);
        }
      };

      APIContext.prototype._handleSuspend = function (status) {
        if (this._watcher.onSuspend) {
          this._watcher.onSuspend(status);
        }
      };

      APIContext.prototype._messageReceiver = function (message, leftCount, hasMore) {
        var _a;

        var _b, _c;

        if (message.conversationType === ConversationType$1.RTC_ROOM || Object.prototype.hasOwnProperty.call(CallLibMsgType, message.messageType)) {
          if (this._watcher.rtcInnerWatcher && this._watcher.rtcInnerWatcher.message) {
            this._watcher.rtcInnerWatcher.message(cloneMessage(message));

            return;
          }
        }

        if (['RC:ChrmJoinNtf', 'RC:ChrmQuitNtf'].indexOf(message.messageType) !== -1) {
          if (typeof this._watcher.chatroomState === 'function') {
            this._watcher.chatroomState({
              userChange: {
                users: (_a = {}, _a[message.senderUserId] = message.messageType === 'RC:ChrmQuitNtf' ? ChatroomUserChangeType$1.QUIT : ChatroomUserChangeType$1.JOIN, _a),
                chatroomId: message.targetId
              }
            });

            return;
          }
        }

        if (message.messageType === 'RC:ChrmMemChange') {
          if (typeof this._watcher.chatroomState === 'function') {
            var users_1 = {};

            if (Array.isArray(message.content.userList)) {
              message.content.userList.forEach(function (user) {
                users_1[user.userId] = user.status;
              });
            }

            this._watcher.chatroomState({
              userChange: {
                users: users_1,
                chatroomId: message.targetId
              }
            });
          }

          return;
        }

        if (message.messageType === MessageType$2.TYPING_STATUS) {
          this._addTypingInfo(cloneMessage(message));

          if (this._watcher.typingState) return;
        }

        if (message.messageType === MessageType$2.LOG_COMMAND && message.senderUserId === 'rongcloudsystem') {
          var _d = message.content,
              startTime = _d.startTime,
              endTime = _d.endTime,
              platform = _d.platform,
              logId = _d.logId,
              uri = _d.uri,
              packageName = _d.packageName;
          var params = {
            startTime: parseInt(startTime),
            endTime: parseInt(endTime),
            platform: platform,
            logId: logId,
            uri: uri,
            packageName: packageName
          };
          (_b = UploadLog.getInstance()) === null || _b === void 0 ? void 0 : _b.reportFullLog(params);
          return;
        }

        if (message.messageType === MessageType$2.INTERCEPT) {
          this._MessageBlockedListener({
            conversationType: message.conversationType,
            targetId: message.targetId,
            channelId: message.channelId || '',
            blockType: message.content.interceptType,
            blockedMessageUId: message.content.msgUId
          });

          return;
        }

        if (this._pluginContextQueue.some(function (item) {
          if (!item.onmessage) {
            return false;
          }

          try {
            return item.onmessage(cloneMessage(message));
          } catch (err) {
            logger$1.error('plugin error =>', err);
            return false;
          }
        })) {
          return;
        }

        this._watcher.message && this._watcher.message(cloneMessage(message), leftCount, hasMore);

        if (message.messageType === 'RC:ReadNtf') {
          if (typeof this._watcher.readReceiptReceived === 'function') {
            this._watcher.readReceiptReceived({
              conversationType: message.conversationType,
              targetId: message.targetId,
              channelId: message.channelId
            }, message.content.messageUId, message.content.lastMessageSendTime);
          }

          return;
        } else if (message.messageType === 'RC:RRReqMsg') {
          if (typeof this._watcher.messageReceiptRequest === 'function') {
            this._watcher.messageReceiptRequest({
              conversationType: message.conversationType,
              targetId: message.targetId,
              channelId: message.channelId
            }, message.content.messageUId, message.senderUserId);
          }

          return;
        } else if (message.messageType === 'RC:RRRspMsg') {
          var receiptMessageDic = (_c = message.content) === null || _c === void 0 ? void 0 : _c.receiptMessageDic;

          if (receiptMessageDic && Array.isArray(receiptMessageDic[this._engine.currentUserId])) {
            if (typeof this._watcher.messageReceiptResponse === 'function') {
              this._watcher.messageReceiptResponse({
                conversationType: message.conversationType,
                targetId: message.targetId,
                channelId: message.channelId
              }, message.senderUserId, receiptMessageDic[this._engine.currentUserId]);
            }
          }

          return;
        }

        return message;
      };

      APIContext.prototype._batchMessageReceiver = function (messages, leftCount, hasMore) {
        var _this = this;

        var allMessages = [];
        messages.forEach(function (message) {
          var filterMessage = _this._messageReceiver(message, leftCount, hasMore);

          if (filterMessage) {
            allMessages.push(filterMessage);
          }
        });

        if (allMessages.length && this._watcher.batchMessage) {
          this._watcher.batchMessage(allMessages);
        }
      };

      APIContext.prototype._chatroomInfoListener = function (info) {
        this._watcher.chatroomState && this._watcher.chatroomState(info);
      };

      APIContext.prototype._conversationInfoListener = function (info) {
        this._watcher.conversationState && this._watcher.conversationState(info);
      };

      APIContext.prototype._expansionInfoListener = function (info) {
        this._watcher.expansion && this._watcher.expansion(info);
      };

      APIContext.prototype._tagListener = function () {
        this._watcher.tag && this._watcher.tag();
      };

      APIContext.prototype._conversationTagListener = function () {
        this._watcher.conversationTagChanged && this._watcher.conversationTagChanged();
      };

      APIContext.prototype._typingStatusListener = function (info) {
        this._watcher.typingState && this._watcher.typingState(info);
      };

      APIContext.prototype._pullFinishedListener = function () {
        this._watcher.pullFinished && this._watcher.pullFinished();
      };

      APIContext.prototype._MessageBlockedListener = function (info) {
        this._watcher.messageBlocked && this._watcher.messageBlocked(info);
      };

      APIContext.prototype._ultraGroupEnableListener = function (conversations) {
        this._watcher.ultraGroupEnable && this._watcher.ultraGroupEnable(conversations);
      };

      APIContext.prototype._operateStatusListener = function (status) {
        this._watcher.operateStatus && this._watcher.operateStatus(status);
      };

      APIContext.prototype._ultraGroupMessageExpansionUpdatedListener = function (list) {
        this._watcher.ultraGroupMessageExpansionUpdated && this._watcher.ultraGroupMessageExpansionUpdated(list);
      };

      APIContext.prototype._ultraGroupMessageModifiedListener = function (list) {
        this._watcher.ultraGroupMessageModified && this._watcher.ultraGroupMessageModified(list);
      };

      APIContext.prototype._ultraGroupMessageRecalledListener = function (list) {
        this._watcher.ultraGroupMessageRecalled && this._watcher.ultraGroupMessageRecalled(list);
      };

      APIContext.prototype._rtcDataChange = function (data, roomId) {
        this._pluginContextQueue.forEach(function (plugin) {
          plugin.onrtcdatachange && plugin.onrtcdatachange(data, roomId);
        });
      };

      APIContext.prototype.assignWatcher = function (watcher) {
        var _this = this;

        Object.keys(this._watcher).forEach(function (key) {
          if (Object.prototype.hasOwnProperty.call(watcher, key)) {
            var value = watcher[key];
            _this._watcher[key] = isFunction(value) || isObject(value) ? value : undefined;
          }
        });
      };

      APIContext.prototype.resetWatcher = function () {
        var _this = this;

        Object.keys(this._watcher).forEach(function (key) {
          _this._watcher[key] = undefined;
        });
      };

      APIContext.prototype._addTypingInfo = function (message) {
        var senderUserId = message.senderUserId,
            conversationType = message.conversationType,
            targetId = message.targetId,
            content = message.content,
            channelId = message.channelId;
        var typingContentType = content.typingContentType;

        var _channelId = channelId || '';

        var key = "".concat(conversationType, "#").concat(targetId, "#").concat(_channelId);

        if (!this._typingInfo[key]) {
          this._typingInfo[key] = [];
        }

        var index = this._typingInfo[key].findIndex(function (user) {
          return user.userId === senderUserId;
        });

        if (index >= 0 && this._typingInfo[key][index].messageType === typingContentType) {
          this._typingInfo[key][index].timestamp = Date.now();
          return;
        }

        if (index >= 0) {
          this._typingInfo[key].splice(index, 1);
        }

        this._typingInfo[key].push({
          userId: senderUserId,
          messageType: typingContentType,
          timestamp: Date.now()
        });

        if (!this._typingChangedList.includes(key)) {
          this._typingChangedList.push(key);
        }

        this._startCheckTypingInfo();
      };

      APIContext.prototype._startCheckTypingInfo = function () {
        var _this = this;

        if (this._typingInternalTimer !== -1 || Object.keys(this._typingInfo).length === 0) {
          return;
        }

        this._typingInternalTimer = setInterval(function () {
          for (var key in _this._typingInfo) {
            var oldCount = _this._typingInfo[key].length;
            _this._typingInfo[key] = _this._typingInfo[key].filter(function (item) {
              return Date.now() - item.timestamp < _this._typingExpireTime;
            });

            if (_this._typingInfo[key].length !== oldCount && !_this._typingChangedList.includes(key)) {
              _this._typingChangedList.push(key);
            }

            if (_this._typingInfo[key].length === 0) {
              delete _this._typingInfo[key];
            }
          }

          if (_this._typingChangedList.length > 0) {
            var list = _this._typingChangedList.map(function (key) {
              return {
                conversationType: Number(key.split('#')[0]),
                targetId: key.split('#')[1],
                channelId: key.split('#')[2],
                list: _this._typingInfo[key] || []
              };
            });

            _this._typingStatusListener(list);

            _this._typingChangedList = [];
          }

          if (Object.keys(_this._typingInfo).length === 0) {
            clearInterval(_this._typingInternalTimer);
            _this._typingInternalTimer = -1;
          }
        }, 500);
      };

      APIContext.prototype.getConnectedTime = function () {
        return this._engine.getConnectedTime();
      };

      APIContext.prototype.getServerTime = function () {
        return this._engine.getServerTime();
      };

      APIContext.prototype.getDeviceId = function () {
        return this._engine.getDeviceId();
      };

      APIContext.prototype.getCurrentUserId = function () {
        return this._engine.currentUserId;
      };

      APIContext.prototype.getConnectionStatus = function () {
        return this._connectionStatus;
      };

      Object.defineProperty(APIContext.prototype, "token", {
        get: function get() {
          return this._token;
        },
        enumerable: false,
        configurable: true
      });

      APIContext.prototype.connect = function (token, refreshNavi, reconnectKickEnable) {
        if (refreshNavi === void 0) {
          refreshNavi = false;
        }

        return __awaiter(this, void 0, void 0, function () {
          var _a, tmpArr, dynamicUris, naviInfo, versionInfo, code;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (this._connectionStatus === ConnectionStatus$1.CONNECTED) {
                  return [2, {
                    code: ErrorCode$1.SUCCESS,
                    userId: this._engine.currentUserId
                  }];
                }

                if (this._connectionStatus === ConnectionStatus$1.CONNECTING) {
                  return [2, {
                    code: ErrorCode$1.BIZ_ERROR_CONNECTING
                  }];
                }

                if (typeof token !== 'string' || token.length === 0) {
                  return [2, {
                    code: ErrorCode$1.RC_CONN_USER_OR_PASSWD_ERROR
                  }];
                }

                this._token = token;
                _a = token.split('@'), tmpArr = _a[1];
                dynamicUris = tmpArr ? tmpArr.split(';').map(function (item) {
                  return /^https?:/.test(item) ? item : "https://".concat(item);
                }) : [];
                return [4, this._engine.navi.getInfo(this._getTokenWithoutNavi(), dynamicUris, refreshNavi, this._options.checkCA)];

              case 1:
                naviInfo = _b.sent();

                if (!naviInfo) {
                  return [2, {
                    code: ErrorCode$1.RC_NAVI_RESOURCE_ERROR
                  }];
                }

                if ((naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.type) === 1) {
                  return [2, {
                    code: ErrorCode$1.PACKAGE_ENVIRONMENT_ERROR
                  }];
                }

                versionInfo = VersionManage.getInfo();
                return [4, this._engine.connect(this._getTokenWithoutNavi(), naviInfo, reconnectKickEnable)];

              case 2:
                code = _b.sent();

                logger$1.__insertLogIntoDatabase();

                if (!(code === ConnectResultCode.REDIRECT)) return [3, 4];
                this._connectionStatus = ConnectionStatus$1.REDIRECT;
                return [4, this.connect(token, true)];

              case 3:
                return [2, _b.sent()];

              case 4:
                if (code === ErrorCode$1.SUCCESS) {
                  logger$1.setStatisticsData(StatisticsTag.IM_CONNECTION_DURATION, {
                    startTime: new Date().getTime()
                  }, true);
                  logger$1.info("connect success, userId: ".concat(this._engine.currentUserId));
                  (naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.type) !== 1 && this._engine.reportSDKInfo && this._engine.reportSDKInfo(versionInfo);
                  logger$1.updateUploadLogAttr({
                    runtime: this._runtime,
                    logSwitch: (naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.logSwitch) || 0,
                    logPolicy: JSON.parse((naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.logPolicy) || '{}'),
                    appkey: this.appkey,
                    version: this.apiVersion,
                    userId: this._engine.currentUserId
                  });
                  Logger.init(this._engine.currentUserId);
                  this._isInternalConnected = true;
                }

                if (code === ErrorCode$1.SUCCESS && !usingCppEngine()) {
                  naviInfo.openUS === 1 && this._pullUserSettings();
                }

                if (code !== ErrorCode$1.SUCCESS) {
                  this._connectionStatus = ConnectionStatus$1.CONNECTION_CLOSED;
                }

                return [2, {
                  code: code,
                  userId: this._engine.currentUserId
                }];
            }
          });
        });
      };

      APIContext.prototype._pullUserSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2];
          });
        });
      };

      APIContext.prototype.disconnect = function () {
        var _a;

        this._isInternalConnected = false;
        clearInterval(this._typingInternalTimer);
        this._typingInternalTimer = -1;
        this._typingInfo = {};
        (_a = UploadLog.getInstance()) === null || _a === void 0 ? void 0 : _a.distroy();

        logger$1.__insertLogIntoDatabase();

        Logger.reset();

        this._engine.disconnect();

        this._pluginContextQueue.forEach(function (item) {
          if (!item.ondisconnect) {
            return;
          }

          try {
            item.ondisconnect();
          } catch (err) {
            logger$1.error('plugin error =>', err);
          }
        });

        return Promise.resolve();
      };

      APIContext.prototype.reconnect = function (reconnectKickEnable) {
        if (this._isInternalConnected) {
          return Promise.resolve({
            code: ErrorCode$1.CAN_NOT_RECONNECT
          });
        }

        return this.connect(this._getTokenWithoutNavi(), false, reconnectKickEnable);
      };

      APIContext.prototype._getTokenWithoutNavi = function () {
        return this._token.replace(/@.+$/, '@');
      };

      APIContext.prototype.getInfoFromCache = function () {
        return this._engine.navi.getInfoFromCache(this._getTokenWithoutNavi());
      };

      APIContext.prototype.registerMessageType = function (objectName, isPersited, isCounted, searchProps, isStatusMessage) {
        if (searchProps === void 0) {
          searchProps = [];
        }

        if (isStatusMessage === void 0) {
          isStatusMessage = false;
        }

        this._engine.registerMessageType(objectName, isPersited, isCounted, searchProps, isStatusMessage);
      };

      APIContext.prototype.sendMessage = function (conversationType, targetId, options, onBefore) {
        if (conversationType !== ConversationType$1.ULTRA_GROUP) {
          var naviInfo = this.getInfoFromCache();
          var readReceiptStatus = (naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.grpRRVer) || 0;

          if (readReceiptStatus === 1 && options.messageType === MessageType$2.READ_RECEIPT_RESPONSE) {
            return Promise.resolve({
              code: ErrorCode$1.READ_RECEIPT_ERROR
            });
          }
        }

        var _a = options.canIncludeExpansion,
            canIncludeExpansion = _a === void 0 ? false : _a,
            expansion = options.expansion;

        if (canIncludeExpansion) {
          var _b = isValidExpansion(expansion),
              isIllgalEx = _b.isIllgalEx,
              isExKeyOrValLengthExceedLimit = _b.isExKeyOrValLengthExceedLimit,
              isExceedLimit = _b.isExceedLimit;

          if (isExceedLimit || isExKeyOrValLengthExceedLimit) {
            return Promise.resolve({
              code: ErrorCode$1.EXPANSION_LIMIT_EXCEET
            });
          }

          if (isIllgalEx) {
            return Promise.resolve({
              code: ErrorCode$1.BIZ_ERROR_INVALID_PARAMETER
            });
          }
        }

        var contentJson = JSON.stringify(options.content);

        if (getByteLength(contentJson) > MAX_MESSAGE_CONTENT_BYTES) {
          return Promise.resolve({
            code: ErrorCode$1.RC_MSG_CONTENT_EXCEED_LIMIT
          });
        }

        if (conversationType === ConversationType$1.ULTRA_GROUP) {
          return this._engine.sendUltraMessage(targetId, options);
        } else {
          return this._engine.sendMessage(conversationType, targetId, options, onBefore);
        }
      };

      APIContext.prototype.sendExpansionMessage = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var channelId, conversationType, targetId, messageUId, keys, expansion, removeAll, canIncludeExpansion, _a, isIllgalEx, isExKeyOrValLengthExceedLimit, isExceedLimit, content, code;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                channelId = options.channelId, conversationType = options.conversationType, targetId = options.targetId, messageUId = options.messageUId, keys = options.keys, expansion = options.expansion, removeAll = options.removeAll, canIncludeExpansion = options.canIncludeExpansion;

                if (!canIncludeExpansion) {
                  return [2, {
                    code: ErrorCode$1.MESSAGE_KV_NOT_SUPPORT
                  }];
                }

                _a = isValidExpansion(expansion), isIllgalEx = _a.isIllgalEx, isExKeyOrValLengthExceedLimit = _a.isExKeyOrValLengthExceedLimit, isExceedLimit = _a.isExceedLimit;

                if (isExceedLimit || isExKeyOrValLengthExceedLimit) {
                  return [2, Promise.resolve({
                    code: ErrorCode$1.EXPANSION_LIMIT_EXCEET
                  })];
                }

                if (isIllgalEx) {
                  return [2, Promise.resolve({
                    code: ErrorCode$1.BIZ_ERROR_INVALID_PARAMETER
                  })];
                }

                content = {
                  mid: messageUId
                };
                expansion && (content.put = expansion);
                keys && (content.del = keys);
                removeAll && (content.removeAll = 1);
                return [4, this._engine.sendMessage(conversationType, targetId, {
                  content: content,
                  messageType: MessageType$2.EXPANSION_NOTIFY,
                  channelId: channelId
                })];

              case 1:
                code = _b.sent().code;
                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      APIContext.prototype.sendReadReceiptMessage = function (targetId, messageUIds, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          var naviInfo, readReceiptStatus;
          return __generator(this, function (_a) {
            naviInfo = this.getInfoFromCache();
            readReceiptStatus = (naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.grpRRVer) || 0;

            if (readReceiptStatus === 0) {
              return [2, {
                code: ErrorCode$1.READ_RECEIPT_ERROR,
                data: 'The read receipt switch is not on, please call the sendMessage method!'
              }];
            }

            return [2, this._engine.sendReadReceiptMessage(targetId, messageUIds, channelId)];
          });
        });
      };

      APIContext.prototype.getMessageReader = function (targetId, messageUId, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          var naviInfo, readReceiptStatus;
          return __generator(this, function (_a) {
            naviInfo = this.getInfoFromCache();
            readReceiptStatus = (naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.grpRRVer) || 0;

            if (readReceiptStatus === 0) {
              return [2, {
                code: ErrorCode$1.READ_RECEIPT_ERROR
              }];
            }

            return [2, this._engine.getMessageReader(targetId, messageUId, channelId)];
          });
        });
      };

      APIContext.prototype._destroy = function () {
        var _a;

        this._isInternalConnected = false;
        this._watcher = {
          batchMessage: undefined,
          message: undefined,
          conversationState: undefined,
          chatroomState: undefined,
          connectionState: undefined,
          rtcInnerWatcher: undefined,
          expansion: undefined,
          tag: undefined,
          conversationTagChanged: undefined,
          typingState: undefined,
          pullFinished: undefined,
          onConnecting: undefined,
          onConnected: undefined,
          onDisconnect: undefined,
          onSuspend: undefined
        };

        this._engine.disconnect();

        this._pluginContextQueue.forEach(function (item) {
          if (!item.ondestroy) {
            return;
          }

          try {
            item.ondestroy();
          } catch (err) {
            logger$1.error('plugin error =>', err);
          }
        });

        this._pluginContextQueue.length = 0;
        this._pluginInstanseMap = {};
        (_a = UploadLog.getInstance()) === null || _a === void 0 ? void 0 : _a.distroy();
        Logger.reset();
      };

      APIContext.prototype.getHistoryMessage = function (conversationType, targetId, timestamp, count, order, channelId, objectName) {
        if (timestamp === void 0) {
          timestamp = 0;
        }

        if (count === void 0) {
          count = 20;
        }

        if (order === void 0) {
          order = 0;
        }

        if (channelId === void 0) {
          channelId = '';
        }

        if (objectName === void 0) {
          objectName = '';
        }

        if (conversationType === ConversationType$1.ULTRA_GROUP) {
          var options = {
            timestamp: timestamp,
            count: count,
            order: order,
            channelId: channelId
          };
          return this._engine.getUltraHistoryMsg(targetId, options);
        } else {
          return this._engine.getHistoryMessage(conversationType, targetId, timestamp, count, order, channelId, objectName || '');
        }
      };

      APIContext.prototype.getConversationList = function (count, conversationType, startTime, order, channelId) {
        if (count === void 0) {
          count = 300;
        }

        if (channelId === void 0) {
          channelId = '';
        }

        if (conversationType === ConversationType$1.ULTRA_GROUP) {
          var code = ErrorCode$1.METHOD_NOT_SUPPORT;
          return Promise.resolve({
            code: code,
            msg: ErrorCode$1[code]
          });
        }

        return this._engine.getConversationList(count, conversationType, startTime, order, channelId);
      };

      APIContext.prototype.getConversation = function (conversationType, targetId, channelId) {
        return this._engine.getConversation(conversationType, targetId, channelId);
      };

      APIContext.prototype.removeConversation = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        if (conversationType === ConversationType$1.ULTRA_GROUP) return Promise.resolve(ErrorCode$1.METHOD_NOT_SUPPORT);
        return this._engine.removeConversation(conversationType, targetId, channelId);
      };

      APIContext.prototype.getUltraGroupList = function () {
        return this._engine.getUltraGroupList();
      };

      APIContext.prototype.getBlockUltraGroupList = function () {
        return this._engine.getBlockUltraGroupList();
      };

      APIContext.prototype.getTopUltraGroupList = function () {
        return this._engine.getTopUltraGroupList();
      };

      APIContext.prototype.clearUnreadCount = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        if (conversationType === ConversationType$1.ULTRA_GROUP) {
          return this._engine.clearUltraUnreadcount(targetId, channelId);
        } else {
          return this._engine.clearConversationUnreadCount(conversationType, targetId, channelId);
        }
      };

      APIContext.prototype.clearAllUnreadCount = function () {
        return this._engine.clearAllUnreadCount();
      };

      APIContext.prototype.getUnreadCount = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.getConversationUnreadCount(conversationType, targetId, channelId);
      };

      APIContext.prototype.getTotalUnreadCount = function (channelId, conversationTypes, includeMuted) {
        if (conversationTypes && conversationTypes.includes(ConversationType$1.ULTRA_GROUP)) {
          var code = ErrorCode$1.METHOD_NOT_SUPPORT;
          return Promise.resolve({
            code: code,
            msg: ErrorCode$1[code]
          });
        }

        return this._engine.getAllConversationUnreadCount(channelId, conversationTypes && conversationTypes.length > 0 ? conversationTypes : [ConversationType$1.PRIVATE, ConversationType$1.GROUP, ConversationType$1.SYSTEM, ConversationType$1.PUBLIC_SERVICE], !!includeMuted);
      };

      APIContext.prototype.getFirstUnreadMessage = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.getFirstUnreadMessage(conversationType, targetId, channelId);
      };

      APIContext.prototype.setConversationNotificationLevel = function (conversationType, targetId, notificationLevel, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return __awaiter(this, void 0, void 0, function () {
          var statusList;
          return __generator(this, function (_a) {
            statusList = [{
              conversationType: conversationType,
              targetId: targetId,
              notificationLevel: notificationLevel,
              channelId: channelId
            }];
            return [2, this._engine.batchSetConversationStatus(statusList)];
          });
        });
      };

      APIContext.prototype.setConversationStatus = function (conversationType, targetId, isTop, notificationStatus, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        if (conversationType === ConversationType$1.ULTRA_GROUP && isTop !== undefined) return Promise.resolve(ErrorCode$1.METHOD_NOT_SUPPORT);
        var statusList = [{
          conversationType: conversationType,
          targetId: targetId,
          isTop: isTop,
          notificationStatus: notificationStatus,
          channelId: channelId
        }];
        return this._engine.batchSetConversationStatus(statusList);
      };

      APIContext.prototype.saveConversationMessageDraft = function (conversationType, targetId, draft, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.saveConversationMessageDraft(conversationType, targetId, draft, channelId);
      };

      APIContext.prototype.getConversationMessageDraft = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.getConversationMessageDraft(conversationType, targetId, channelId);
      };

      APIContext.prototype.clearConversationMessageDraft = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.clearConversationMessageDraft(conversationType, targetId, channelId);
      };

      APIContext.prototype.recallMessage = function (conversationType, targetId, messageUId, sentTime, recallMsgOptions) {
        return this._engine.recallMsg(conversationType, targetId, messageUId, sentTime, recallMsgOptions);
      };

      APIContext.prototype.deleteRemoteMessage = function (conversationType, targetId, list, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        if (conversationType === ConversationType$1.ULTRA_GROUP) {
          return Promise.resolve(ErrorCode$1.METHOD_NOT_SUPPORT);
        }

        return this._engine.deleteRemoteMessage(conversationType, targetId, list, channelId);
      };

      APIContext.prototype.deleteRemoteMessageByTimestamp = function (conversationType, targetId, timestamp, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.deleteRemoteMessageByTimestamp(conversationType, targetId, timestamp, channelId);
      };

      APIContext.prototype.joinChatroom = function (roomId, count) {
        if (count === void 0) {
          count = 10;
        }

        return this._engine.joinChatroom(roomId, count);
      };

      APIContext.prototype.joinExistChatroom = function (roomId, count) {
        if (count === void 0) {
          count = 10;
        }

        return this._engine.joinExistChatroom(roomId, count);
      };

      APIContext.prototype.quitChatroom = function (roomId) {
        return this._engine.quitChatroom(roomId);
      };

      APIContext.prototype.getChatroomInfo = function (roomId, count, order) {
        if (count === void 0) {
          count = 0;
        }

        if (order === void 0) {
          order = 0;
        }

        return this._engine.getChatroomInfo(roomId, count, order);
      };

      APIContext.prototype.setChatroomEntry = function (roomId, entry) {
        var key = entry.key,
            value = entry.value;

        if (!isValidChrmEntryKey(key) || !isValidChrmEntryValue(value)) {
          return Promise.resolve(ErrorCode$1.BIZ_ERROR_INVALID_PARAMETER);
        }

        return this._engine.setChatroomEntry(roomId, entry);
      };

      APIContext.prototype.setChatroomEntries = function (roomId, entryOptions) {
        for (var i = 0; i < entryOptions.entries.length; i++) {
          var entry = entryOptions.entries[i];
          var key = entry.key,
              value = entry.value;

          if (!isValidChrmEntryKey(key) || !isValidChrmEntryValue(value)) {
            return Promise.resolve({
              code: ErrorCode$1.BIZ_ERROR_INVALID_PARAMETER
            });
          }
        }
        return this._engine.setChatroomEntries(roomId, entryOptions);
      };

      APIContext.prototype.forceSetChatroomEntry = function (roomId, entry) {
        var key = entry.key,
            value = entry.value;

        if (!isValidChrmEntryKey(key) || !isValidChrmEntryValue(value)) {
          return Promise.resolve(ErrorCode$1.BIZ_ERROR_INVALID_PARAMETER);
        }

        return this._engine.forceSetChatroomEntry(roomId, entry);
      };

      APIContext.prototype.removeChatroomEntry = function (roomId, entry) {
        var key = entry.key;

        if (!isValidChrmEntryKey(key)) {
          return Promise.resolve(ErrorCode$1.BIZ_ERROR_INVALID_PARAMETER);
        }

        return this._engine.removeChatroomEntry(roomId, entry);
      };

      APIContext.prototype.removeChatroomEntries = function (roomId, entryOptions) {
        for (var i = 0; i < entryOptions.entries.length; i++) {
          var entry = entryOptions.entries[i];
          var key = entry.key;

          if (!isValidChrmEntryKey(key)) {
            return Promise.resolve({
              code: ErrorCode$1.BIZ_ERROR_INVALID_PARAMETER
            });
          }
        }

        return this._engine.removeChatroomEntries(roomId, entryOptions);
      };

      APIContext.prototype.forceRemoveChatroomEntry = function (roomId, entry) {
        var key = entry.key;

        if (!isValidChrmEntryKey(key)) {
          return Promise.resolve(ErrorCode$1.BIZ_ERROR_INVALID_PARAMETER);
        }

        return this._engine.forceRemoveChatroomEntry(roomId, entry);
      };

      APIContext.prototype.getChatroomEntry = function (roomId, key) {
        return this._engine.getChatroomEntry(roomId, key);
      };

      APIContext.prototype.getAllChatroomEntries = function (roomId) {
        return this._engine.getAllChatroomEntry(roomId);
      };

      APIContext.prototype.getChatroomHistoryMessages = function (roomId, count, order, timestamp) {
        if (count === void 0) {
          count = 20;
        }

        if (order === void 0) {
          order = 0;
        }

        if (timestamp === void 0) {
          timestamp = 0;
        }

        return this._engine.getChatroomHistoryMessages(roomId, timestamp, count, order);
      };

      APIContext.prototype.getFileToken = function (fileType, fileName, httpMethod, queryString) {
        return __awaiter(this, void 0, void 0, function () {
          var naviInfo, bos, qiniu, ossConfig, _a, code, data;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                naviInfo = this.getInfoFromCache();
                bos = (naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.bosAddr) || '';
                qiniu = (naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.uploadServer) || '';
                ossConfig = (naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.ossConfig) || '';
                return [4, this._engine.getFileToken(fileType, fileName, httpMethod, queryString)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code === ErrorCode$1.SUCCESS) {
                  return [2, Promise.resolve(Object.assign(data, {
                    bos: bos,
                    qiniu: qiniu,
                    ossConfig: ossConfig
                  }))];
                }

                return [2, Promise.reject(code)];
            }
          });
        });
      };

      APIContext.prototype.getFileUrl = function (fileType, fileName, saveName, uploadRes, serverType) {
        if (serverType === void 0) {
          serverType = UploadMethod$1.QINIU;
        }

        return __awaiter(this, void 0, void 0, function () {
          var _a, code, data;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if (uploadRes === null || uploadRes === void 0 ? void 0 : uploadRes.isBosRes) {
                  return [2, Promise.resolve(uploadRes)];
                }

                return [4, this._engine.getFileUrl(fileType, serverType, fileName, saveName)];

              case 1:
                _a = _b.sent(), code = _a.code, data = _a.data;

                if (code === ErrorCode$1.SUCCESS) {
                  return [2, Promise.resolve(data)];
                }

                return [2, Promise.reject(code)];
            }
          });
        });
      };

      APIContext.prototype.createTag = function (tag) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.createTag(tag)];
          });
        });
      };

      APIContext.prototype.removeTag = function (tagId) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.removeTag(tagId)];
          });
        });
      };

      APIContext.prototype.updateTag = function (tag) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.updateTag(tag)];
          });
        });
      };

      APIContext.prototype.getTagList = function () {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.getTagList()];
          });
        });
      };

      APIContext.prototype.addTagForConversations = function (tagId, conversations) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            if (conversations.length > 1000) {
              return [2, Promise.reject(ErrorCode$1.CONVER_OUT_LIMIT_ERROR)];
            }

            return [2, this._engine.addTagForConversations(tagId, conversations)];
          });
        });
      };

      APIContext.prototype.removeTagForConversations = function (tagId, conversations) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.removeTagForConversations(tagId, conversations)];
          });
        });
      };

      APIContext.prototype.removeTagsForConversation = function (conversation, tagIds) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.removeTagsForConversation(conversation, tagIds)];
          });
        });
      };

      APIContext.prototype.getConversationListByTag = function (tagId, startTime, count, channelId) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.getConversationListByTag(tagId, startTime, count, channelId)];
          });
        });
      };

      APIContext.prototype.getUnreadCountByTag = function (tagId, containMuted) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.getUnreadCountByTag(tagId, containMuted)];
          });
        });
      };

      APIContext.prototype.setConversationStatusInTag = function (tagId, conversation, status) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.setConversationStatusInTag(tagId, conversation, status)];
          });
        });
      };

      APIContext.prototype.getTagsForConversation = function (conversation) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.getTagsForConversation(conversation)];
          });
        });
      };

      APIContext.prototype.getBlockConversationList = function () {
        return this._engine.getBlockConversationList();
      };

      APIContext.prototype.getTopConversationList = function () {
        return this._engine.getTopConversationList();
      };

      APIContext.prototype.getUnreadMentionedCount = function (conversation) {
        return this._engine.getUnreadMentionedCount(conversation);
      };

      APIContext.prototype.getAllUnreadMentionedCount = function () {
        return this._engine.getAllUnreadMentionedCount();
      };

      APIContext.prototype.sendUltraGroupTypingStatus = function (options) {
        if (options.conversationType !== ConversationType$1.ULTRA_GROUP) {
          var code = ErrorCode$1.METHOD_ONLY_SUPPORT_ULTRA_GROUP;
          return Promise.resolve({
            code: code,
            msg: ErrorCode$1[code]
          });
        }

        return this._engine.sendUltraGroupTypingStatus(options);
      };

      APIContext.prototype.getUltraGroupMessageListByMessageUId = function (options) {
        return this._engine.getUltraGroupMessageListByMessageUId(options);
      };

      APIContext.prototype.expandUltraMessage = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var conversationType, expansion, canIncludeExpansion, code_1, _a, isIllgalEx, isExKeyOrValLengthExceedLimit, isExceedLimit, code;

          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                conversationType = options.conversationType, expansion = options.expansion, canIncludeExpansion = options.canIncludeExpansion;

                if (conversationType !== ConversationType$1.ULTRA_GROUP) {
                  code_1 = ErrorCode$1.METHOD_ONLY_SUPPORT_ULTRA_GROUP;
                  return [2, {
                    code: code_1,
                    msg: ErrorCode$1[code_1]
                  }];
                }

                if (!canIncludeExpansion) {
                  return [2, {
                    code: ErrorCode$1.MESSAGE_KV_NOT_SUPPORT
                  }];
                }

                _a = isValidExpansion(expansion), isIllgalEx = _a.isIllgalEx, isExKeyOrValLengthExceedLimit = _a.isExKeyOrValLengthExceedLimit, isExceedLimit = _a.isExceedLimit;

                if (isExceedLimit || isExKeyOrValLengthExceedLimit) {
                  return [2, {
                    code: ErrorCode$1.EXPANSION_LIMIT_EXCEET
                  }];
                }

                if (isIllgalEx) {
                  return [2, {
                    code: ErrorCode$1.BIZ_ERROR_INVALID_PARAMETER
                  }];
                }

                return [4, this._engine.expandUltraMessage(options)];

              case 1:
                code = _b.sent().code;
                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      APIContext.prototype.modifyMessage = function (options) {
        return __awaiter(this, void 0, void 0, function () {
          var code_2, code;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (options.conversationType !== ConversationType$1.ULTRA_GROUP) {
                  code_2 = ErrorCode$1.METHOD_ONLY_SUPPORT_ULTRA_GROUP;
                  return [2, {
                    code: code_2,
                    msg: ErrorCode$1[code_2]
                  }];
                }

                return [4, this._engine.modifyMessage(options)];

              case 1:
                code = _a.sent().code;
                return [2, {
                  code: code
                }];
            }
          });
        });
      };

      APIContext.prototype.getUltraGroupUnreadMentionedCountByTargetId = function (targetId) {
        return this._engine.getUltraGroupUnreadMentionedCountByTargetId(targetId);
      };

      APIContext.prototype.getUltraGroupUnreadCountByTargetId = function (targetId) {
        return this._engine.getUltraGroupUnreadCountByTargetId(targetId);
      };

      APIContext.prototype.getAllUltraGroupUnreadCount = function (isMentioned) {
        if (isMentioned === void 0) {
          isMentioned = false;
        }

        return this._engine.getAllUltraGroupUnreadCount(isMentioned);
      };

      APIContext.prototype.getAllConversationState = function () {
        return this._engine.getAllConversationState();
      };

      APIContext.prototype.callExtra = function (method) {
        var _a;

        var args = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }

        return (_a = this._engine).callExtra.apply(_a, __spreadArray([method], args, false));
      };

      APIContext.prototype.clearConversations = function (conversationTypes, tag) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                return [4, this._engine.clearConversations(conversationTypes, tag)];

              case 1:
                return [2, _a.sent()];
            }
          });
        });
      };

      APIContext.prototype.setUserStatusListener = function (config, listener) {
        return this._engine.setUserStatusListener(config, function (data) {
          try {
            listener(data);
          } catch (error) {
            logger$1.error(error);
          }
        });
      };

      APIContext.prototype.addToBlacklist = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.addToBlacklist(userId)];
          });
        });
      };

      APIContext.prototype.removeFromBlacklist = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.removeFromBlacklist(userId)];
          });
        });
      };

      APIContext.prototype.getBlacklist = function () {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.getBlacklist()];
          });
        });
      };

      APIContext.prototype.getBlacklistStatus = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.getBlacklistStatus(userId)];
          });
        });
      };

      APIContext.prototype.insertMessage = function (conversationType, targetId, insertOptions) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.insertMessage(conversationType, targetId, insertOptions)];
          });
        });
      };

      APIContext.prototype.deleteMessages = function (timestamp) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.deleteMessages(timestamp)];
          });
        });
      };

      APIContext.prototype.deleteMessagesByTimestamp = function (conversationType, targetId, timestamp, cleanSpace, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.deleteMessagesByTimestamp(conversationType, targetId, timestamp, cleanSpace, channelId)];
          });
        });
      };

      APIContext.prototype.clearMessages = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.clearMessages(conversationType, targetId, channelId)];
          });
        });
      };

      APIContext.prototype.getMessage = function (messageId) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.getMessage(messageId)];
          });
        });
      };

      APIContext.prototype.setMessageContent = function (messageId, content, messageType) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.setMessageContent(messageId, content, messageType)];
          });
        });
      };

      APIContext.prototype.setMessageSearchField = function (messageId, content, searchFiles) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.setMessageSearchField(messageId, content, searchFiles)];
          });
        });
      };

      APIContext.prototype.setMessageSentStatus = function (messageId, sentStatus) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.setMessageSentStatus(messageId, sentStatus)];
          });
        });
      };

      APIContext.prototype.setMessageReceivedStatus = function (messageId, receivedStatus) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.setMessageReceivedStatus(messageId, receivedStatus)];
          });
        });
      };

      APIContext.prototype.setUserStatus = function (status) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.setUserStatus(status)];
          });
        });
      };

      APIContext.prototype.subscribeUserStatus = function (userIds) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.subscribeUserStatus(userIds)];
          });
        });
      };

      APIContext.prototype.getUserStatus = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.getUserStatus(userId)];
          });
        });
      };

      APIContext.prototype.searchConversationByContent = function (keyword, customMessageTypes, channelId, conversationTypes) {
        if (customMessageTypes === void 0) {
          customMessageTypes = [];
        }

        if (channelId === void 0) {
          channelId = '';
        }

        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.searchConversationByContent(keyword, customMessageTypes, channelId, conversationTypes)];
          });
        });
      };

      APIContext.prototype.searchMessageByContent = function (conversationType, targetId, keyword, timestamp, count, total, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, this._engine.searchMessageByContent(conversationType, targetId, keyword, timestamp, count, total, channelId)];
          });
        });
      };

      APIContext.prototype.getUnreadMentionedMessages = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.getUnreadMentionedMessages(conversationType, targetId, channelId);
      };

      APIContext.prototype.clearUnreadCountByTimestamp = function (conversationType, targetId, timestamp, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.clearUnreadCountByTimestamp(conversationType, targetId, timestamp, channelId);
      };

      APIContext.prototype.getUltraGroupDefaultNotificationLevel = function (targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.getUltraGroupDefaultNotificationLevel(targetId, channelId);
      };

      APIContext.prototype.setUltraGroupDefaultNotificationLevel = function (targetId, notificationLevel, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.setUltraGroupDefaultNotificationLevel(targetId, notificationLevel, channelId);
      };

      APIContext.prototype.getConversationNotificationLevel = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.getConversationNotificationLevel(conversationType, targetId, channelId);
      };

      APIContext.prototype.getConversationNotificationStatus = function (conversationType, targetId, channelId) {
        if (channelId === void 0) {
          channelId = '';
        }

        return this._engine.getConversationNotificationStatus(conversationType, targetId, channelId);
      };

      APIContext.prototype.getRemoteHistoryMessages = function (conversationType, targetId, timestamp, count, order, channelId) {
        return this._engine.getRemoteHistoryMessages(conversationType, targetId, timestamp, count, order, channelId);
      };

      APIContext.prototype.getConversationListWithAllChannel = function () {
        return this._engine.getConversationListWithAllChannel();
      };

      APIContext.prototype.getConversationListWithAllChannelByPage = function (index, limit) {
        return this._engine.getConversationListWithAllChannelByPage(index, limit);
      };

      APIContext.prototype.joinRTCRoom = function (roomId, mode, mediaType, joinType, innerUserDatas, outerUserDatas) {
        return this._engine.joinRTCRoom(roomId, mode, mediaType, joinType, innerUserDatas, outerUserDatas);
      };

      APIContext.prototype.quitRTCRoom = function (roomId) {
        return this._engine.quitRTCRoom(roomId);
      };

      APIContext.prototype.rtcPing = function (roomId, mode, mediaType) {
        return this._engine.rtcPing(roomId, mode, mediaType);
      };

      APIContext.prototype.getRTCRoomInfo = function (roomId) {
        return this._engine.getRTCRoomInfo(roomId);
      };

      APIContext.prototype.getRTCUserInfoList = function (roomId) {
        return this._engine.getRTCUserInfoList(roomId);
      };

      APIContext.prototype.getRTCUserInfo = function (roomId) {
        return this._engine.getRTCUserInfo(roomId);
      };

      APIContext.prototype.setRTCUserInfo = function (roomId, key, value) {
        return this._engine.setRTCUserInfo(roomId, key, value);
      };

      APIContext.prototype.removeRTCUserInfo = function (roomId, keys) {
        return this._engine.removeRTCUserInfo(roomId, keys);
      };

      APIContext.prototype.setRTCData = function (roomId, key, value, isInner, apiType, message) {
        return this._engine.setRTCData(roomId, key, value, isInner, apiType, message);
      };

      APIContext.prototype.setRTCTotalRes = function (roomId, message, valueInfo, objectName, mcuValInfo) {
        if (mcuValInfo === void 0) {
          mcuValInfo = '';
        }

        return this._engine.setRTCTotalRes(roomId, message, valueInfo, objectName, mcuValInfo);
      };

      APIContext.prototype.setRTCCDNUris = function (roomId, objectName, CDNUris) {
        return this._engine.setRTCCDNUris(roomId, objectName, CDNUris);
      };

      APIContext.prototype.getRTCData = function (roomId, keys, isInner, apiType) {
        return this._engine.getRTCData(roomId, keys, isInner, apiType);
      };

      APIContext.prototype.removeRTCData = function (roomId, keys, isInner, apiType, message) {
        return this._engine.removeRTCData(roomId, keys, isInner, apiType, message);
      };

      APIContext.prototype.setRTCOutData = function (roomId, rtcData, type, message) {
        return this._engine.setRTCOutData(roomId, rtcData, type, message);
      };

      APIContext.prototype.getRTCOutData = function (roomId, userIds) {
        return this._engine.getRTCOutData(roomId, userIds);
      };

      APIContext.prototype.getRTCToken = function (roomId, mode, broadcastType) {
        return this._engine.getRTCToken(roomId, mode, broadcastType);
      };

      APIContext.prototype.setRTCState = function (roomId, report) {
        return this._engine.setRTCState(roomId, report);
      };

      APIContext.prototype.getRTCUserList = function (roomId) {
        return this._engine.getRTCUserList(roomId);
      };

      APIContext.prototype.joinLivingRoomAsAudience = function (roomId, mode, broadcastType) {
        return this._engine.joinLivingRoomAsAudience(roomId, mode, broadcastType);
      };

      APIContext.prototype.quitLivingRoomAsAudience = function (roomId) {
        return this._engine.quitLivingRoomAsAudience(roomId);
      };

      APIContext.prototype.rtcIdentityChange = function (roomId, changeType, broadcastType) {
        return this._engine.rtcIdentityChange(roomId, changeType, broadcastType);
      };

      APIContext.prototype.getRTCJoinedUserInfo = function (userId) {
        return this._engine.getRTCJoinedUserInfo(userId);
      };

      APIContext.prototype.requestRoomPK = function (options) {
        return this._engine.requestRoomPK(options);
      };

      APIContext.prototype.cancelRoomPK = function (options) {
        return this._engine.cancelRoomPK(options);
      };

      APIContext.prototype.responseRoomPK = function (options) {
        return this._engine.responseRoomPK(options);
      };

      APIContext.prototype.endRoomPK = function (options) {
        return this._engine.endRoomPK(options);
      };

      APIContext.prototype.bindRTCRoomForChatroom = function (option) {
        return this._engine.bindRTCRoomForChatroom(option);
      };

      return APIContext;
    }();

    var TagChangeType;

    (function (TagChangeType) {
      TagChangeType[TagChangeType["add"] = 1] = "add";
      TagChangeType[TagChangeType["update"] = 2] = "update";
      TagChangeType[TagChangeType["delete"] = 3] = "delete";
    })(TagChangeType || (TagChangeType = {}));

    var version = "5.3.2";

    var RCEngine = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DelayTimer: DelayTimer,
        CometChannel: CometChannel,
        WebSocketChannel: WebSocketChannel,
        AEngine: AEngine,
        ANavi: ANavi,
        version: version,
        APIContext: APIContext,
        PluginContext: PluginContext,
        RTCPluginContext: RTCPluginContext,
        get RTCMode () { return RTCMode; },
        get LiveType () { return LiveType; },
        get LiveRole () { return LiveRole; },
        CallLibMsgType: CallLibMsgType,
        get RTCApiType () { return RTCApiType; },
        get RTCIdentityChangeType () { return RTCIdentityChangeType; },
        get RTCJoinType () { return RTCJoinType; },
        FileType: FileType$1,
        MessageDirection: MessageDirection$1,
        ErrorCode: ErrorCode$1,
        ConversationType: ConversationType$1,
        ConnectionStatus: ConnectionStatus$1,
        ReceivedStatus: ReceivedStatus$1,
        ConnectResultCode: ConnectResultCode,
        MessageType: MessageType$2,
        NotificationStatus: NotificationStatus$1,
        NotificationLevel: NotificationLevel$1,
        MentionedType: MentionedType$1,
        UploadMethod: UploadMethod$1,
        ChatroomEntryType: ChatroomEntryType$1,
        get LogLevel () { return exports.LogLevel; },
        get LogType () { return LogType; },
        ChatroomMemberChangeType: ChatroomUserChangeType$1,
        MessageBlockType: MessageBlockType$1,
        OperateStatus: OperateStatus$1,
        get HttpMethod () { return HttpMethod; },
        get NetworkType () { return NetworkType; },
        get TagChangeType () { return TagChangeType; },
        isString: isString,
        isBoolean: isBoolean,
        isNumber: isNumber,
        isArray: isArray,
        isArrayBuffer: isArrayBuffer,
        notEmptyString: notEmptyString,
        notEmptyArray: notEmptyArray,
        isObject: isObject,
        isFunction: isFunction,
        isUndefined: isUndefined,
        isNull: isNull,
        isHttpUrl: isHttpUrl,
        notEmptyObject: notEmptyObject,
        isValidConversationType: isValidConversationType,
        isValidFileType: isValidFileType,
        isValidExpansion: isValidExpansion,
        get AssertRules () { return AssertRules; },
        RCAssertError: RCAssertError,
        assert: assert,
        validate: validate,
        getUploadFileName: getUploadFileName,
        getMimeKey: getMimeKey,
        pushConfigsToJSON: pushConfigsToJSON,
        pushJSONToConfigs: pushJSONToConfigs,
        isValidChrmEntryKey: isValidChrmEntryKey,
        isValidChrmEntryValue: isValidChrmEntryValue,
        Logger: Logger,
        AppStorage: AppStorage,
        todo: todo,
        appendUrl: appendUrl,
        EventEmitter: EventEmitter,
        VersionManage: VersionManage,
        forEach: forEach$1,
        map: map,
        indexOf: indexOf,
        isInclude: isInclude,
        isInObject: isInObject,
        cloneByJSON: cloneByJSON,
        usingCppEngine: usingCppEngine,
        getBrowser: getBrowser,
        formatConnectResponseCode: formatConnectResponseCode,
        clone: clone,
        NAVI_CACHE_DURATION: NAVI_CACHE_DURATION,
        NAVI_REQ_TIMEOUT: NAVI_REQ_TIMEOUT,
        PING_REQ_TIMEOUT: PING_REQ_TIMEOUT,
        WEB_SOCKET_TIMEOUT: WEB_SOCKET_TIMEOUT,
        PUBLIC_CLOUD_NAVI_URIS: PUBLIC_CLOUD_NAVI_URIS,
        MINI_SOCKET_CONNECT_URIS: MINI_SOCKET_CONNECT_URIS,
        MINI_COMET_CONNECT_URIS: MINI_COMET_CONNECT_URIS,
        IM_SIGNAL_TIMEOUT: IM_SIGNAL_TIMEOUT,
        IM_PING_INTERVAL_TIME: IM_PING_INTERVAL_TIME,
        IM_PING_TIMEOUT: IM_PING_TIMEOUT,
        IM_PING_MIN_TIMEOUT: IM_PING_MIN_TIMEOUT,
        MAX_MESSAGE_CONTENT_BYTES: MAX_MESSAGE_CONTENT_BYTES,
        IM_COMET_PULLMSG_TIMEOUT: IM_COMET_PULLMSG_TIMEOUT,
        IM_CHATROOM_PULL_INTERVAL_TIME: IM_CHATROOM_PULL_INTERVAL_TIME,
        STORAGE_ROOT_KEY: STORAGE_ROOT_KEY,
        MAX_MESSAGE_EXPANSION_KEY_LENGTH: MAX_MESSAGE_EXPANSION_KEY_LENGTH,
        MAX_MESSAGE_EXPANSION_VAL_LENGTH: MAX_MESSAGE_EXPANSION_VAL_LENGTH,
        SEND_MESSAGE_TYPE_OPTION: SEND_MESSAGE_TYPE_OPTION,
        CPP_PROTOCAL_MSGTYPE_OPTION: CPP_PROTOCAL_MSGTYPE_OPTION,
        STATUS_MESSAGE: STATUS_MESSAGE,
        get CONNECTION_TYPE () { return CONNECTION_TYPE; }
    });

    (function () {
      ((typeof globalThis !== 'undefined' ? globalThis : global || self).RCEngine = RCEngine);
    })();

    var logger = new Logger('RCIM');

    var hasMiniBaseEvent = function hasMiniBaseEvent(miniGlobal) {
      var baseMiniEventNames = ['canIUse', 'getSystemInfo'];

      for (var i = 0, max = baseMiniEventNames.length; i < max; i++) {
        var baseEventName = baseMiniEventNames[i];

        if (!miniGlobal[baseEventName]) {
          return false;
        }
      }

      return true;
    };

    var isFromUniappEnv = function isFromUniappEnv() {
      if (typeof uni !== 'undefined' && hasMiniBaseEvent(uni)) {
        return true;
      }

      return false;
    };

    var isFromUniapp$4 = isFromUniappEnv();

    var createXHR = function createXHR() {
      var hasCORS = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();

      if (typeof XMLHttpRequest !== 'undefined' && hasCORS) {
        return new XMLHttpRequest();
      } else if (typeof XDomainRequest !== 'undefined') {
        return new XDomainRequest();
      } else {
        return new ActiveXObject('Microsoft.XMLHTTP');
      }
    };

    function httpReq(options) {
      var method = options.method || HttpMethod.GET;
      var timeout = options.timeout || 60 * 1000;
      var headers = options.headers,
          query = options.query,
          body = options.body;
      var url = appendUrl(options.url, query);
      return new Promise(function (resolve) {
        var xhr = createXHR();
        var isXDomainRequest = Object.prototype.toString.call(xhr) === '[object XDomainRequest]';
        xhr.open(method, url);

        if (headers && xhr.setRequestHeader) {
          for (var key in headers) {
            xhr.setRequestHeader(key, headers[key]);
          }
        }

        if (isXDomainRequest) {
          xhr.timeout = timeout;

          xhr.onload = function () {
            resolve({
              data: xhr.responseText,
              status: xhr.status || 200
            });
          };

          xhr.onerror = function () {
            resolve({
              status: xhr.status || 0
            });
          };

          xhr.ontimeout = function () {
            resolve({
              status: xhr.status || 0
            });
          };

          var reqBody = _typeof(body) === 'object' ? JSON.stringify(body) : body;
          xhr.send(reqBody);
        } else {
          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
              resolve({
                data: xhr.responseText,
                status: xhr.status
              });
            }
          };

          xhr.onerror = function () {
            resolve({
              status: xhr.status || 0
            });
          };

          setTimeout(function () {
            return resolve({
              status: xhr.status || 0
            });
          }, timeout);
          xhr.send(body);
        }
      });
    }

    function createWebSocket(url, protocols) {
      var ws = new WebSocket(url, protocols);
      ws.binaryType = 'arraybuffer';
      return {
        onClose: function onClose(callback) {
          ws.onclose = function (evt) {
            var code = evt.code,
                reason = evt.reason;
            callback(code, reason);
          };
        },
        onError: function onError(callback) {
          ws.onerror = callback;
        },
        onMessage: function onMessage(callback) {
          ws.onmessage = function (evt) {
            callback(evt.data);
          };
        },
        onOpen: function onOpen(callback) {
          ws.onopen = callback;
        },
        send: function send(data) {
          ws.send(data);
        },
        close: function close(code, reason) {
          ws.close();
        }
      };
    }

    var browser = {
      tag: "browser",
      httpReq: httpReq,
      localStorage: window === null || window === void 0 ? void 0 : window.localStorage,
      sessionStorage: window === null || window === void 0 ? void 0 : window.sessionStorage,
      isSupportSocket: function isSupportSocket() {
        var bool = typeof WebSocket !== 'undefined';
        bool || console.warn('websocket not support');
        return bool;
      },
      useNavi: true,
      connectPlatform: '',
      isFromUniapp: isFromUniapp$4,
      createWebSocket: createWebSocket,
      createDataChannel: function createDataChannel(watcher, connectType) {
        if (this.isSupportSocket() && connectType === 'websocket') {
          return new WebSocketChannel(this, watcher);
        } else {
          return new CometChannel(this, watcher);
        }
      },
      getNetworkType: function getNetworkType() {
        var _a = navigator.connection || navigator.mozConnection || navigator.webkitConnection,
            type = _a.type,
            effectiveType = _a.effectiveType;

        var networkType = type || effectiveType || NetworkType.UNKONWN;
        return new Promise(function (resolve) {
          resolve(networkType);
        });
      }
    };

    var isFromUniapp$3 = isFromUniappEnv();

    var createFunc$4 = function createFunc(method) {
      return function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        try {
          return wx[method].apply(wx, args);
        } catch (err) {
          console.error(err);
        }
      };
    };

    var storage$4 = {
      setItem: createFunc$4('setStorageSync'),
      getItem: createFunc$4('getStorageSync'),
      removeItem: createFunc$4('removeStorageSync'),
      clear: createFunc$4('clearStorageSync')
    };
    var wechat = {
      tag: "wechat",
      httpReq: function httpReq(options) {
        var method = options.method || HttpMethod.GET;
        var timeout = options.timeout || 60 * 1000;
        var headers = options.headers,
            query = options.query,
            body = options.body;
        var url = appendUrl(options.url, query);
        return new Promise(function (resolve) {
          wx.request({
            url: url,
            method: method,
            headers: headers,
            timeout: timeout,
            data: body,
            success: function success(res) {
              resolve({
                data: res.data,
                status: res.statusCode
              });
            },
            fail: function fail() {
              resolve({
                status: ErrorCode$1.RC_HTTP_REQ_TIMEOUT
              });
            }
          });
        });
      },
      localStorage: storage$4,
      sessionStorage: storage$4,
      isSupportSocket: function isSupportSocket() {
        return true;
      },
      useNavi: false,
      connectPlatform: 'MiniProgram',
      isFromUniapp: isFromUniapp$3,
      createWebSocket: function createWebSocket(url, protocols) {
        var socketTask = wx.connectSocket({
          url: url,
          protocols: protocols
        });
        return {
          onClose: function onClose(callback) {
            socketTask.onClose(function (res) {
              callback(res.code, res.reason);
            });
          },
          onError: function onError(callback) {
            socketTask.onError(function (res) {
              callback(res.errMsg);
            });
          },
          onMessage: function onMessage(callback) {
            socketTask.onMessage(function (res) {
              callback(res.data);
            });
          },
          onOpen: function onOpen(callback) {
            socketTask.onOpen(callback);
          },
          send: function send(data) {
            socketTask.send({
              data: data
            });
          },
          close: function close(code, reason) {
            socketTask.close({
              code: code,
              reason: reason
            });
          }
        };
      },
      createDataChannel: function createDataChannel(watcher, connectType) {
        if (connectType === 'websocket') {
          return new WebSocketChannel(this, watcher);
        }

        return new CometChannel(this, watcher);
      },
      getNetworkType: function getNetworkType() {
        return new Promise(function (resolve) {
          wx.getNetworkType({
            success: function success(_a) {
              var networkType = _a.networkType;
              resolve(networkType);
            },
            fail: function fail() {
              resolve(NetworkType.UNKONWN);
            }
          });
        });
      }
    };

    var isFromUniapp$2 = isFromUniappEnv();

    var createFunc$3 = function createFunc(method) {
      return function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        try {
          return my[method].apply(my, args);
        } catch (err) {
          console.error(err);
        }
      };
    };

    var storage$3 = {
      setItem: createFunc$3('setStorageSync'),
      getItem: createFunc$3('getStorageSync'),
      removeItem: createFunc$3('removeStorageSync'),
      clear: createFunc$3('clearStorageSync')
    };
    var alipay = {
      tag: "alipay",
      httpReq: function httpReq(options) {
        var method = options.method || HttpMethod.GET;
        var timeout = options.timeout || 60 * 1000;
        var headers = options.headers,
            query = options.query,
            body = options.body;
        var url = appendUrl(options.url, query);
        var dataType = options.dataType || 'json';
        return new Promise(function (resolve) {
          my.request({
            url: url,
            method: method,
            headers: headers,
            timeout: timeout,
            data: body,
            dataType: dataType,
            success: function success(res) {
              resolve({
                data: res.data,
                status: res.status
              });
            },
            fail: function fail() {
              resolve({
                status: ErrorCode$1.RC_HTTP_REQ_TIMEOUT
              });
            }
          });
        });
      },
      localStorage: storage$3,
      sessionStorage: storage$3,
      isSupportSocket: function isSupportSocket() {
        return false;
      },
      useNavi: false,
      connectPlatform: 'MiniProgram',
      isFromUniapp: isFromUniapp$2,
      createDataChannel: function createDataChannel(watcher, connectType) {
        if (connectType === 'websocket') {
          return new WebSocketChannel(this, watcher);
        }

        return new CometChannel(this, watcher);
      },
      getNetworkType: function getNetworkType() {
        return new Promise(function (resolve) {
          my.getNetworkType({
            success: function success(_a) {
              var networkType = _a.networkType;
              resolve(networkType);
            },
            fail: function fail() {
              resolve(NetworkType.UNKONWN);
            }
          });
        });
      }
    };

    var isFromUniapp$1 = isFromUniappEnv();

    var createFunc$2 = function createFunc(method) {
      return function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        try {
          console.log('tt', tt);
          return tt[method].apply(tt, args);
        } catch (err) {
          console.error(err);
        }
      };
    };

    var storage$2 = {
      setItem: createFunc$2('setStorageSync'),
      getItem: createFunc$2('getStorageSync'),
      removeItem: createFunc$2('removeStorageSync'),
      clear: createFunc$2('clearStorageSync')
    };
    var toutiao = {
      tag: "toutiao",
      isSupportSocket: function isSupportSocket() {
        return true;
      },
      useNavi: false,
      connectPlatform: 'MiniProgram',
      isFromUniapp: isFromUniapp$1,
      localStorage: storage$2,
      sessionStorage: storage$2,
      httpReq: function httpReq(options) {
        return new Promise(function (resolve, reject) {
          tt.request({
            url: options.url,
            data: options.body,
            header: options.headers,
            method: options.method,
            success: function success(res) {
              console.log('调用成功', res.data);
              var data = (res === null || res === void 0 ? void 0 : res.data) || {};
              var obj = {
                data: JSON.stringify(data),
                status: res.statusCode
              };
              resolve(obj);
            },
            fail: function fail(res) {
              console.log('调用失败', res.errMsg);
              reject({
                data: res.errMsg
              });
            }
          });
        });
      },
      createWebSocket: function createWebSocket(url, protocols) {
        var socketTask = tt.connectSocket({
          url: url,
          protocols: protocols
        });
        return {
          onOpen: function onOpen(callback) {
            socketTask.onOpen(callback);
          },
          onClose: function onClose(callback) {
            socketTask.onClose(function (res) {
              return callback(res.code, res.reason);
            });
          },
          onError: function onError(callback) {
            socketTask.onError(function (res) {
              return callback(res.errMsg);
            });
          },
          onMessage: function onMessage(callback) {
            socketTask.onMessage(function (res) {
              return callback(res.data);
            });
          },
          send: function send(data) {
            socketTask.send({
              data: data
            });
          },
          close: function close(code, reason) {
            socketTask.close({
              code: code,
              reason: reason
            });
          }
        };
      },
      createDataChannel: function createDataChannel(watcher, connectType) {
        if (connectType === 'websocket') {
          return new WebSocketChannel(this, watcher);
        }

        return new CometChannel(this, watcher);
      },
      getNetworkType: function getNetworkType() {
        return new Promise(function (resolve) {
          tt.getNetworkType({
            success: function success(_a) {
              var networkType = _a.networkType;
              resolve(networkType);
            },
            fail: function fail() {
              resolve(NetworkType.UNKONWN);
            }
          });
        });
      }
    };

    var isFromUniapp = isFromUniappEnv();

    var createFunc$1 = function createFunc(method) {
      return function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        try {
          console.log('swan', swan);
          return swan[method].apply(swan, args);
        } catch (err) {
          console.error(err);
        }
      };
    };

    var storage$1 = {
      setItem: createFunc$1('setStorageSync'),
      getItem: createFunc$1('getStorageSync'),
      removeItem: createFunc$1('removeStorageSync'),
      clear: createFunc$1('clearStorageSync')
    };
    var baidu = {
      tag: "baidu",
      isSupportSocket: function isSupportSocket() {
        return true;
      },
      useNavi: false,
      connectPlatform: 'MiniProgram',
      isFromUniapp: isFromUniapp,
      localStorage: storage$1,
      sessionStorage: storage$1,
      httpReq: function httpReq(options) {
        return new Promise(function (resolve, reject) {
          swan.request({
            url: options.url,
            data: options.body,
            header: options.headers,
            method: options.method,
            success: function success(res) {
              console.log('调用成功', res.data);
              var data = (res === null || res === void 0 ? void 0 : res.data) || {};
              var obj = {
                data: JSON.stringify(data),
                status: res.statusCode
              };
              resolve(obj);
            },
            fail: function fail(res) {
              console.log('调用失败', res.errorCode);
              reject({
                data: res.errorCode
              });
            }
          });
        });
      },
      createWebSocket: function createWebSocket(url, protocols) {
        var socketTask = swan.connectSocket({
          url: url,
          protocols: protocols
        });
        return {
          onOpen: function onOpen(callback) {
            socketTask.onOpen(callback);
          },
          onClose: function onClose(callback) {
            socketTask.onClose(function (res) {
              return callback(res.code, res.reason);
            });
          },
          onError: function onError(callback) {
            socketTask.onError(function (res) {
              return callback(res.errMsg);
            });
          },
          onMessage: function onMessage(callback) {
            socketTask.onMessage(function (res) {
              return callback(res.data);
            });
          },
          send: function send(data) {
            socketTask.send({
              data: data
            });
          },
          close: function close(code, reason) {
            socketTask.close({
              code: code,
              reason: reason
            });
          }
        };
      },
      createDataChannel: function createDataChannel(watcher, connectType) {
        if (connectType === 'websocket') {
          return new WebSocketChannel(this, watcher);
        }

        return new CometChannel(this, watcher);
      },
      getNetworkType: function getNetworkType() {
        return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
            return [2, new Promise(function (resolve) {
              swan.getNetworkType({
                success: function success(_a) {
                  var networkType = _a.networkType;
                  resolve(networkType);
                },
                fail: function fail() {
                  resolve(NetworkType.UNKONWN);
                }
              });
            })];
          });
        });
      }
    };

    var createFunc = function createFunc(method) {
      return function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        try {
          return uni[method].apply(uni, args);
        } catch (err) {
          console.error(err);
        }
      };
    };

    var storage = {
      setItem: createFunc('setStorageSync'),
      getItem: createFunc('getStorageSync'),
      removeItem: createFunc('removeStorageSync'),
      clear: createFunc('clearStorageSync')
    };
    var appPlus = {
      tag: "uniapp",
      httpReq: function httpReq(options) {
        var method = options.method || HttpMethod.GET;
        var timeout = options.timeout || 60 * 1000;
        var headers = options.headers,
            query = options.query,
            body = options.body;
        var url = appendUrl(options.url, query);
        return new Promise(function (resolve) {
          uni.request({
            url: url,
            method: method,
            headers: headers,
            timeout: timeout,
            data: body,
            success: function success(res) {
              resolve({
                data: res.data,
                status: res.statusCode
              });
            },
            fail: function fail() {
              resolve({
                status: ErrorCode$1.RC_HTTP_REQ_TIMEOUT
              });
            }
          });
        });
      },
      localStorage: storage,
      sessionStorage: storage,
      isSupportSocket: function isSupportSocket() {
        return true;
      },
      useNavi: true,
      connectPlatform: '',
      isFromUniapp: true,
      createWebSocket: function createWebSocket(url, protocols) {
        var options = {
          complete: function complete() {},
          url: url,
          protocols: protocols
        };
        var socketTask = uni.connectSocket(options);
        return {
          onClose: function onClose(callback) {
            socketTask.onClose(function (res) {
              callback(res.code, res.reason);
            });
          },
          onError: function onError(callback) {
            socketTask.onError(function (res) {
              callback(res.errMsg);
            });
          },
          onMessage: function onMessage(callback) {
            socketTask.onMessage(function (res) {
              callback(res.data);
            });
          },
          onOpen: function onOpen(callback) {
            socketTask.onOpen(callback);
          },
          send: function send(data) {
            socketTask.send({
              data: data
            });
          },
          close: function close(code, reason) {
            socketTask.close({
              code: code,
              reason: reason
            });
          }
        };
      },
      createDataChannel: function createDataChannel(watcher, connectType) {
        if (connectType === 'websocket') {
          return new WebSocketChannel(this, watcher);
        }

        return new CometChannel(this, watcher);
      },
      getNetworkType: function getNetworkType() {
        return new Promise(function (resolve) {
          uni.getNetworkType({
            success: function success(_a) {
              var networkType = _a.networkType;
              resolve(networkType);
            },
            fail: function fail() {
              resolve(NetworkType.UNKONWN);
            }
          });
        });
      }
    };

    var uniapp = function uniapp() {
      var uniPlatform = process.env.VUE_APP_PLATFORM;

      switch (uniPlatform) {
        case 'app-plus':
          return appPlus;

        case 'mp-baidu':
          return baidu;

        case 'mp-toutiao':
          return toutiao;

        case 'mp-alipay':
          return alipay;

        case 'mp-weixin':
          return wechat;

        case 'h5':
        default:
          return browser;
      }
    };

    var isMiniPrograme = function isMiniPrograme(miniGlobal) {
      return miniGlobal && miniGlobal.canIUse && miniGlobal.getSystemInfo;
    };

    var runtime = function () {
      if (typeof uni !== 'undefined' && isMiniPrograme(uni)) {
        return uniapp();
      }

      if (typeof my !== 'undefined' && isMiniPrograme(my)) {
        return alipay;
      }

      if (typeof tt !== 'undefined' && isMiniPrograme(tt)) {
        return toutiao;
      }

      if (typeof swan !== 'undefined' && isMiniPrograme(swan)) {
        return baidu;
      }

      if (typeof wx !== 'undefined' && isMiniPrograme(wx)) {
        return wechat;
      }

      return browser;
    }();

    function tranReceivedMessage(msg) {
      var type = msg.conversationType,
          channelId = msg.channelId,
          messageType = msg.messageType,
          content = msg.content,
          senderUserId = msg.senderUserId,
          targetId = msg.targetId,
          sentTime = msg.sentTime,
          receivedTime = msg.receivedTime,
          messageUId = msg.messageUId,
          messageDirection = msg.messageDirection,
          isPersited = msg.isPersited,
          isCounted = msg.isCounted,
          isOffLineMessage = msg.isOffLineMessage,
          canIncludeExpansion = msg.canIncludeExpansion,
          expansion = msg.expansion,
          receivedStatus = msg.receivedStatus,
          disableNotification = msg.disableNotification,
          isMentioned = msg.isMentioned,
          isStatusMessage = msg.isStatusMessage,
          readReceiptInfo = msg.readReceiptInfo,
          pushConfig = msg.pushConfig,
          messageId = msg.messageId,
          isInterrupt = msg.isInterrupt,
          isModifyMessage = msg.isModifyMessage;

      if (!receivedStatus) {
        receivedStatus = ReceivedStatus$1.UNREAD;
      }

      var result = {
        messageType: messageType,
        channelId: channelId || '',
        content: content,
        senderUserId: senderUserId,
        targetId: targetId,
        conversationType: type,
        sentTime: sentTime,
        receivedTime: receivedTime,
        messageUId: messageUId,
        messageDirection: messageDirection,
        isPersited: isPersited,
        isCounted: isCounted,
        isMentioned: isMentioned,
        disableNotification: disableNotification,
        isStatusMessage: isStatusMessage,
        canIncludeExpansion: canIncludeExpansion,
        expansion: expansion,
        receivedStatus: receivedStatus,
        readReceiptInfo: readReceiptInfo,
        pushConfig: pushConfig,
        messageId: messageId,
        isInterrupt: isInterrupt,
        isModifyMessage: isModifyMessage
      };
      if (type !== ConversationType$1.ULTRA_GROUP) result.isOffLineMessage = isOffLineMessage;
      return result;
    }
    function tranReceiveConversation(conversation) {
      var type = conversation.conversationType,
          targetId = conversation.targetId,
          latestMessage = conversation.latestMessage,
          unreadMessageCount = conversation.unreadMessageCount,
          hasMentioned = conversation.hasMentioned,
          mentionedInfo = conversation.mentionedInfo,
          lastUnreadTime = conversation.lastUnreadTime,
          notificationStatus = conversation.notificationStatus,
          isTop = conversation.isTop,
          channelId = conversation.channelId,
          unreadMentionedCount = conversation.unreadMentionedCount;
      var latestMessageV3 = latestMessage && tranReceivedMessage(latestMessage);
      var mentionedInfoV3;

      if (hasMentioned) {
        mentionedInfoV3 = {
          type: mentionedInfo === null || mentionedInfo === void 0 ? void 0 : mentionedInfo.type,
          userIdList: mentionedInfo === null || mentionedInfo === void 0 ? void 0 : mentionedInfo.userIdList
        };
      } else {
        mentionedInfoV3 = undefined;
      }

      return {
        conversationType: type,
        targetId: targetId,
        latestMessage: latestMessageV3,
        unreadMessageCount: unreadMessageCount,
        hasMentioned: hasMentioned,
        mentionedInfo: mentionedInfoV3,
        lastUnreadTime: lastUnreadTime,
        notificationStatus: notificationStatus,
        isTop: isTop,
        channelId: channelId,
        unreadMentionedCount: unreadMentionedCount
      };
    }

    exports.Events = void 0;

    (function (Events) {
      Events["CONNECTING"] = "CONNECTING";
      Events["CONNECTED"] = "CONNECTED";
      Events["DISCONNECT"] = "DISCONNECT";
      Events["SUSPEND"] = "SUSPEND";
      Events["MESSAGES"] = "MESSAGES";
      Events["READ_RECEIPT_RECEIVED"] = "READ_RECEIPT_RECEIVED";
      Events["MESSAGE_RECEIPT_REQUEST"] = "MESSAGE_RECEIPT_REQUEST";
      Events["MESSAGE_RECEIPT_RESPONSE"] = "MESSAGE_RECEIPT_RESPONSE";
      Events["CONVERSATION"] = "CONVERSATION";
      Events["CHATROOM"] = "CHATROOM";
      Events["EXPANSION"] = "EXPANSION";
      Events["PULL_OFFLINE_MESSAGE_FINISHED"] = "PULL_OFFLINE_MESSAGE_FINISHED";
      Events["TAG"] = "TAG";
      Events["CONVERSATION_TAG"] = "CONVERSATION_TAG";
      Events["TYPING_STATUS"] = "TYPING_STATUS";
      Events["MESSAGE_BLOCKED"] = "MESSAGE_BLOCKED";
      Events["ULTRA_GROUP_ENABLE"] = "ULTRA_GROUP_ENABLE";
      Events["OPERATE_STATUS"] = "OPERATE_STATUS";
      Events["ULTRA_GROUP_MESSAGE_EXPANSION_UPDATED"] = "ULTRA_GROUP_MESSAGE_EXPANSION_UPDATED";
      Events["ULTRA_GROUP_MESSAGE_MODIFIED"] = "ULTRA_GROUP_MESSAGE_MODIFIED";
      Events["ULTRA_GROUP_MESSAGE_RECALLED"] = "ULTRA_GROUP_MESSAGE_RECALLED";
    })(exports.Events || (exports.Events = {}));

    var IMClient = function (_super) {
      __extends(IMClient, _super);

      function IMClient(options) {
        var _this = _super.call(this) || this;

        if (IMClient.imClient) {
          logger.error('Please do not repeatedly perform the init method');
          return IMClient.imClient;
        }

        assert('options.navigators', options.navigators, function (value) {
          return isArray(value) && (value.length === 0 || value.every(isHttpUrl));
        });
        var connectionType = options === null || options === void 0 ? void 0 : options.connectType;

        if (!connectionType) {
          connectionType = CONNECTION_TYPE.WEBSOCKET;
        } else if (CONNECTION_TYPE.WEBSOCKET !== connectionType && CONNECTION_TYPE.COMET !== connectionType) {
          logger.warn("RongIMLib connectionType must be ".concat(CONNECTION_TYPE.WEBSOCKET, " or ").concat(CONNECTION_TYPE.COMET));
          connectionType = CONNECTION_TYPE.WEBSOCKET;
        }

        _this._context = APIContext.init(runtime, {
          appkey: options.appkey,
          apiVersion: "5.3.2",
          navigators: options.navigators || [],
          miniCMPProxy: options.customCMP || [],
          connectionType: connectionType,
          logLevel: options.logLevel,
          logStdout: options.logStdout,
          indexDBSwitch: options.indexDBSwitch,
          checkCA: options.checkCA
        });

        _this.watch();

        IMClient.imClient = _this;
        return _this;
      }

      Object.defineProperty(IMClient.prototype, "context", {
        get: function get() {
          if (!this._context) {
            throw new Error('Please perform the init method!');
          }

          return this._context;
        },
        enumerable: false,
        configurable: true
      });

      IMClient.prototype.watch = function () {
        var _this = this;

        var watcher = {
          onConnecting: function onConnecting() {
            _this.emit(exports.Events.CONNECTING);
          },
          onConnected: function onConnected() {
            _this.emit(exports.Events.CONNECTED);
          },
          onDisconnect: function onDisconnect(status) {
            _this.emit(exports.Events.DISCONNECT, status);
          },
          onSuspend: function onSuspend(status) {
            _this.emit(exports.Events.SUSPEND, status);
          },
          batchMessage: function batchMessage(messages) {
            _this.emit(exports.Events.MESSAGES, {
              messages: messages.map(function (message) {
                return tranReceivedMessage(message);
              })
            });
          },
          typingState: function typingState(event) {
            _this.emit(exports.Events.TYPING_STATUS, {
              status: event
            });
          },
          readReceiptReceived: function readReceiptReceived(conversation, messageUId, sentTime) {
            _this.emit(exports.Events.READ_RECEIPT_RECEIVED, {
              conversation: conversation,
              messageUId: messageUId,
              sentTime: sentTime
            });
          },
          messageReceiptRequest: function messageReceiptRequest(conversation, messageUId, senderUserId) {
            _this.emit(exports.Events.MESSAGE_RECEIPT_REQUEST, {
              conversation: conversation,
              messageUId: messageUId,
              senderUserId: senderUserId
            });
          },
          messageReceiptResponse: function messageReceiptResponse(conversation, receivedUserId, messageUIdList) {
            _this.emit(exports.Events.MESSAGE_RECEIPT_RESPONSE, {
              conversation: conversation,
              receivedUserId: receivedUserId,
              messageUIdList: messageUIdList
            });
          },
          conversationState: function conversationState(conversations) {
            var newConversationList = conversations.map(function (conversation) {
              var conversationType = conversation.conversationType;

              if (conversationType === ConversationType$1.ULTRA_GROUP) {
                var newConversation = {
                  conversationType: conversationType,
                  latestMessage: conversation.latestMessage ? tranReceivedMessage(conversation.latestMessage) : null,
                  targetId: conversation.targetId,
                  unreadMessageCount: conversation.unreadMessageCount,
                  unreadMentionedCount: conversation.unreadMentionedCount,
                  versionTime: conversation.versionTime,
                  notificationStatus: conversation.notificationStatus,
                  notificationLevel: conversation.notificationLevel,
                  lastUnreadTime: conversation.lastUnreadTime,
                  channelId: conversation.channelId
                };
                return {
                  conversation: newConversation
                };
              } else {
                var newConversation = {
                  conversationType: conversationType,
                  latestMessage: conversation.latestMessage ? tranReceivedMessage(conversation.latestMessage) : null,
                  targetId: conversation.targetId,
                  unreadMessageCount: conversation.unreadMessageCount,
                  hasMentioned: conversation.hasMentioned,
                  mentionedInfo: conversation.mentionedInfo,
                  lastUnreadTime: conversation.lastUnreadTime,
                  notificationStatus: conversation.notificationStatus,
                  notificationLevel: conversation.notificationLevel,
                  isTop: conversation.isTop,
                  channelId: conversation.channelId,
                  unreadMentionedCount: conversation.unreadMentionedCount
                };
                return {
                  conversation: newConversation,
                  updatedItems: conversation.updatedItems
                };
              }
            });

            _this.emit(exports.Events.CONVERSATION, {
              conversationList: newConversationList
            });
          },
          chatroomState: function chatroomState(event) {
            _this.emit(exports.Events.CHATROOM, event);
          },
          expansion: function expansion(event) {
            _this.emit(exports.Events.EXPANSION, event);
          },
          pullFinished: function pullFinished() {
            _this.emit(exports.Events.PULL_OFFLINE_MESSAGE_FINISHED);
          },
          tag: function tag() {
            _this.emit(exports.Events.TAG);
          },
          conversationTagChanged: function conversationTagChanged() {
            _this.emit(exports.Events.CONVERSATION_TAG);
          },
          messageBlocked: function messageBlocked(data) {
            _this.emit(exports.Events.MESSAGE_BLOCKED, data);
          },
          ultraGroupEnable: function ultraGroupEnable(list) {
            _this.emit(exports.Events.ULTRA_GROUP_ENABLE, list);
          },
          operateStatus: function operateStatus(status) {
            _this.emit(exports.Events.OPERATE_STATUS, status);
          },
          ultraGroupMessageExpansionUpdated: function ultraGroupMessageExpansionUpdated(list) {
            _this.emit(exports.Events.ULTRA_GROUP_MESSAGE_EXPANSION_UPDATED, list);
          },
          ultraGroupMessageModified: function ultraGroupMessageModified(list) {
            _this.emit(exports.Events.ULTRA_GROUP_MESSAGE_MODIFIED, list);
          },
          ultraGroupMessageRecalled: function ultraGroupMessageRecalled(list) {
            _this.emit(exports.Events.ULTRA_GROUP_MESSAGE_RECALLED, list);
          }
        };
        this.context.assignWatcher(watcher);
      };

      return IMClient;
    }(EventEmitter);

    var ERROR_INFO = {
      TIMEOUT: {
        code: -1,
        msg: 'Network timeout'
      },
      SDK_INTERNAL_ERROR: {
        code: -2,
        msg: 'SDK internal error'
      },
      PARAMETER_ERROR: {
        code: -3,
        msg: 'Please check the parameters, the {param} expected a value of {expect} but received {current}'
      },
      REJECTED_BY_BLACKLIST: {
        code: 405,
        msg: 'Blacklisted by the other party'
      },
      SEND_TOO_FAST: {
        code: 20604,
        msg: 'Sending messages too quickly'
      },
      NOT_IN_GROUP: {
        code: 22406,
        msg: 'Not in group'
      },
      FORBIDDEN_IN_GROUP: {
        code: 22408,
        msg: 'Forbbiden from speaking in the group'
      },
      NOT_IN_CHATROOM: {
        code: 23406,
        msg: 'Not in chatRoom'
      },
      FORBIDDEN_IN_CHATROOM: {
        code: 23408,
        msg: 'Forbbiden from speaking in the chatRoom'
      },
      KICKED_FROM_CHATROOM: {
        code: 23409,
        msg: 'Kicked out and forbbiden from joining the chatRoom'
      },
      CHATROOM_NOT_EXIST: {
        code: 23410,
        msg: 'ChatRoom does not exist'
      },
      CHATROOM_IS_FULL: {
        code: 23411,
        msg: 'ChatRoom members exceeded'
      },
      PARAMETER_INVALID_CHATROOM: {
        code: 23412,
        msg: 'Invalid chatRoom parameters'
      },
      ROAMING_SERVICE_UNAVAILABLE_CHATROOM: {
        code: 23414,
        msg: 'ChatRoom message roaming service is not open, Please go to the developer to open this service'
      },
      RECALLMESSAGE_PARAMETER_INVALID: {
        code: 25101,
        msg: 'Invalid recall message parameter'
      },
      ROAMING_SERVICE_UNAVAILABLE_MESSAGE: {
        code: 25102,
        msg: 'Single group chat roaming service is not open, Please go to the developer to open this service'
      },
      PUSHSETTING_PARAMETER_INVALID: {
        code: 26001,
        msg: 'Invalid push parameter'
      },
      OPERATION_BLOCKED: {
        code: 20605,
        msg: 'Operation is blocked'
      },
      OPERATION_NOT_SUPPORT: {
        code: 20606,
        msg: 'Operation is not supported'
      },
      MSG_BLOCKED_SENSITIVE_WORD: {
        code: 21501,
        msg: 'The sent message contains sensitive words'
      },
      REPLACED_SENSITIVE_WORD: {
        code: 21502,
        msg: 'Sensitive words in the message have been replaced'
      },
      NOT_CONNECTED: {
        code: 30001,
        msg: 'Please connect successfully first'
      },
      NAVI_REQUEST_ERROR: {
        code: 30007,
        msg: 'Navigation http request failed'
      },
      CMP_REQUEST_ERROR: {
        code: 30010,
        msg: 'CMP sniff http request failed'
      },
      CONN_APPKEY_FAKE: {
        code: 31002,
        msg: 'Your appkey is fake'
      },
      CONN_MINI_SERVICE_NOT_OPEN: {
        code: 31003,
        msg: 'Mini program service is not open, Please go to the developer to open this service'
      },
      CONN_ACK_TIMEOUT: {
        code: 31000,
        msg: 'Connection ACK timeout'
      },
      CONN_TOKEN_INCORRECT: {
        code: 31004,
        msg: 'Your token is not valid or expired'
      },
      CONN_NOT_AUTHRORIZED: {
        code: 31005,
        msg: 'AppKey and Token do not match'
      },
      CONN_REDIRECTED: {
        code: 31006,
        msg: 'Connection redirection'
      },
      CONN_APP_BLOCKED_OR_DELETED: {
        code: 31008,
        msg: 'AppKey is banned or deleted'
      },
      CONN_USER_BLOCKED: {
        code: 31009,
        msg: 'User blocked'
      },
      CONN_DOMAIN_INCORRECT: {
        code: 31012,
        msg: 'Connect domain error, Please check the set security domain'
      },
      ROAMING_SERVICE_UNAVAILABLE: {
        code: 33007,
        msg: 'Roaming service cloud is not open, Please go to the developer to open this service'
      },
      RC_CONNECTION_EXIST: {
        code: 34001,
        msg: 'Connection already exists'
      },
      CHATROOM_KV_EXCEED: {
        code: 23423,
        msg: 'ChatRoom KV setting exceeds maximum'
      },
      CHATROOM_KV_OVERWRITE_INVALID: {
        code: 23424,
        msg: 'ChatRoom KV already exists'
      },
      CHATROOM_KV_STORE_NOT_OPEN: {
        code: 23426,
        msg: 'ChatRoom KV storage service is not open, Please go to the developer to open this service'
      },
      CHATROOM_KEY_NOT_EXIST: {
        code: 23427,
        msg: 'ChatRoom key does not exist'
      },
      MSG_KV_NOT_SUPPORT: {
        code: 34008,
        msg: 'The message cannot be extended'
      },
      SEND_MESSAGE_KV_FAIL: {
        code: 34009,
        msg: 'Sending RC expansion message fail'
      },
      EXPANSION_LIMIT_EXCEET: {
        code: 34010,
        msg: 'The message expansion size is beyond the limit'
      },
      ILLGAL_PARAMS: {
        code: 33003,
        msg: 'Incorrect parameters passed in while calling the interface'
      },
      UPLOAD_FILE_FAILED: {
        code: 35020,
        msg: 'File upload failed'
      },
      CHATROOM_KV_STORE_NOT_ALL_SUCCESS: {
        code: 23428,
        msg: 'Chatroom kv store not all success'
      },
      CHATROOM_KV_STORE_OUT_LIMIT: {
        code: 23429,
        msg: 'Chatroom kv\'s length is out of limit'
      },
      TAG_EXISTS: {
        code: 33101,
        msg: 'The tag already exists'
      },
      TAG_NOT_EXIST: {
        code: 33100,
        msg: 'The tag does not exist'
      },
      NOT_SUPPORT: {
        code: ErrorCode$1.NOT_SUPPORT,
        msg: 'The method is not supported in a browser!'
      }
    };
    var ERROR_CODE = {};
    var ERROR_CODE_TO_INFO = {};

    for (var name_1 in ERROR_INFO) {
      var info = ERROR_INFO[name_1];
      var code = info.code;
      ERROR_CODE[code] = name_1;
      ERROR_CODE_TO_INFO[code] = info;
    }

    ({
      1: ERROR_INFO.ROAMING_SERVICE_UNAVAILABLE.code
    });

    var imClient;
    var init$1 = function init(initOption) {
      imClient = imClient || new IMClient(initOption);
    };
    function installPlugin(plugin, options) {
      return imClient === null || imClient === void 0 ? void 0 : imClient.context.install(plugin, options);
    }
    function connect(token, reconnectKickEnable) {
      return __awaiter(this, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('token', token, AssertRules.STRING, true);
              logger.warn("RongIMLib Version: ".concat("5.3.2", ", Commit: ").concat("4e94b06a2cf663996b34f6374c3b84e29b8fb5dd"));
              return [4, imClient.context.connect(token, false, reconnectKickEnable)];

            case 1:
              res = _a.sent();

              if (res.code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: res.code,
                  data: {
                    userId: res.userId
                  }
                }];
              }

              return [2, {
                code: res.code,
                msg: ERROR_CODE[res.code]
              }];
          }
        });
      });
    }
    function disconnect() {
      return imClient.context.disconnect();
    }
    function getConnectionStatus() {
      return imClient.context.getConnectionStatus();
    }
    function getServerTime() {
      return imClient.context.getServerTime();
    }
    function getCurrentUserId() {
      return imClient.context.getCurrentUserId();
    }
    function addEventListener(eventType, listener, target) {
      imClient.on(eventType, listener, target);
    }
    function onceEventListener(eventType, listener, target) {
      imClient.once(eventType, listener, target);
    }
    function removeEventListener(eventType, listener, target) {
      imClient.off(eventType, listener, target);
    }
    function removeEventListeners(eventType) {
      imClient.removeAll(eventType);
    }
    function clearEventListeners() {
      imClient.clear();
    }
    function __addSDKVersion(name, version) {
      VersionManage.add(name, version);
    }

    function getConversationList(options, channelId) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data, list;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              logger.debug('get conversation list ->');
              return [4, IMClient.imClient.context.getConversationList(options === null || options === void 0 ? void 0 : options.count, undefined, options === null || options === void 0 ? void 0 : options.startTime, options === null || options === void 0 ? void 0 : options.order, channelId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS && data) {
                list = data.map(function (item) {
                  return tranReceiveConversation(item);
                });
                return [2, {
                  code: 0,
                  data: list
                }];
              }

              logger.warn('get conversation list fail ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getConversation(options) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, conversation;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.conversationType', options.conversationType, isValidConversationType, true);
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              return [4, IMClient.imClient.context.getConversation(options.conversationType, options.targetId, options.channelId || '')];

            case 1:
              _a = _b.sent(), code = _a.code, conversation = _a.data;

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('getConversation ->code:' + code + ', targetId:' + options.targetId);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code,
                data: conversation ? tranReceiveConversation(conversation) : null
              }];
          }
        });
      });
    }
    function removeConversation(options) {
      return __awaiter(this, void 0, void 0, function () {
        var code, paramsStr;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options.conversationType', options.conversationType, isValidConversationType, true);
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              return [4, IMClient.imClient.context.removeConversation(options.conversationType, options.targetId, options.channelId)];

            case 1:
              code = _a.sent();
              paramsStr = 'conversationType:' + options.conversationType + ',targetId:' + options.targetId;
              logger.debug('destroy conversation ->' + paramsStr);

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('destroy conversation fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function getTextMessageDraft(options) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data, paramsStr;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.conversationType', options.conversationType, isValidConversationType, true);
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              return [4, IMClient.imClient.context.getConversationMessageDraft(options.conversationType, options.targetId, options.channelId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;
              paramsStr = 'conversationType:' + options.conversationType + ',targetId:' + options.targetId;
              logger.debug('get draft ->' + paramsStr);

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data || ''
                }];
              }

              logger.warn('get draft fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function saveTextMessageDraft(options, draft) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options.conversationType', options.conversationType, isValidConversationType, true);
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              assert('draft', draft, AssertRules.STRING, true);
              paramsStr = 'conversationType:' + options.conversationType + ',targetId:' + options.targetId;
              logger.debug('set draft ->' + paramsStr);
              return [4, IMClient.imClient.context.saveConversationMessageDraft(options.conversationType, options.targetId, draft, options.channelId)];

            case 1:
              code = _a.sent();

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('set draft fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function clearTextMessageDraft(options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options.conversationType', options.conversationType, isValidConversationType, true);
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              paramsStr = 'conversationType:' + options.conversationType + ',targetId:' + options.targetId;
              logger.debug('delete draft  ->' + paramsStr);
              return [4, IMClient.imClient.context.clearConversationMessageDraft(options.conversationType, options.targetId, options.channelId)];

            case 1:
              code = _a.sent();

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('delete draft fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getTotalUnreadCount(includeMuted, conversationTypes) {
      return __awaiter(this, void 0, void 0, function () {
        var _i, conversationTypes_1, type, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              logger.debug('get total unread count -> ConversationType:' + JSON.stringify(conversationTypes) + ' includeMuted:' + includeMuted);
              assert('includeMuted', includeMuted, AssertRules.BOOLEAN, false);
              assert('conversationTypes', conversationTypes, AssertRules.ARRAY, false);

              if (conversationTypes) {
                for (_i = 0, conversationTypes_1 = conversationTypes; _i < conversationTypes_1.length; _i++) {
                  type = conversationTypes_1[_i];
                  assert('conversationType', type, isValidConversationType);
                }
              }

              return [4, IMClient.imClient.context.getTotalUnreadCount('', conversationTypes, includeMuted)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              logger.warn('getTotalUnreadCount fail ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getUnreadCount(options) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data, paramsStr;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.conversationType', options.conversationType, isValidConversationType, true);
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              return [4, IMClient.imClient.context.getUnreadCount(options.conversationType, options.targetId, options.channelId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;
              paramsStr = 'conversationType:' + options.conversationType + ',targetId:' + options.targetId;
              logger.debug('get unreadCount ->' + paramsStr);

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              logger.warn('get unreadCount fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function clearMessagesUnreadStatus(options) {
      return __awaiter(this, void 0, void 0, function () {
        var code, paramsStr;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options.conversationType', options.conversationType, isValidConversationType, true);
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              return [4, IMClient.imClient.context.clearUnreadCount(options.conversationType, options.targetId, options.channelId)];

            case 1:
              code = _a.sent();
              paramsStr = 'conversationType:' + options.conversationType + ',targetId:' + options.targetId;
              logger.debug('clear unreadMsgNum ->' + paramsStr);

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('clear unreadMsgNum fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function clearAllMessagesUnreadStatus() {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, IMClient.imClient.context.clearAllUnreadCount()];

            case 1:
              code = _a.sent();
              return [2, {
                code: code
              }];
          }
        });
      });
    }

    var conversationNotificationCommon = function conversationNotificationCommon(options, errType) {
      if (errType === void 0) {
        errType = '';
      }

      assert('options.conversationType', options.conversationType, isValidConversationType, true);
      assert('options.targetId', options.targetId, AssertRules.STRING, true);
      assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
      var paramsStr = 'conversationType:' + options.conversationType + ',targetId:' + options.targetId;
      logger.debug("".concat(errType, " -> ").concat(paramsStr));
      return paramsStr;
    };

    var setConversationNotificationCommon = function setConversationNotificationCommon(options, callback, errType) {
      if (errType === void 0) {
        errType = '';
      }

      return __awaiter(void 0, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              paramsStr = conversationNotificationCommon(options, errType);
              return [4, callback()];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn("".concat(errType, " fail -> ").concat(code, " : ").concat(ERROR_CODE[code], " , ").concat(paramsStr));
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    };

    function setConversationNotificationLevel(options, notificationLevel) {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          assert('notificationLevel', notificationLevel, function (value) {
            if (options.conversationType === ConversationType$1.PRIVATE) {
              var includeLevels = [NotificationLevel$1.ALL_MESSAGE, NotificationLevel$1.NOT_SET, NotificationLevel$1.AT_MESSAGE_NOTIFICATION];
              return includeLevels.includes(value);
            }

            return NotificationLevel$1[value] !== undefined;
          }, true);
          return [2, setConversationNotificationCommon(options, function () {
            return IMClient.imClient.context.setConversationNotificationLevel(options.conversationType, options.targetId, notificationLevel, options.channelId);
          }, 'setConversationNotificationLevel')];
        });
      });
    }
    function setConversationNotificationStatus(options, notificationStatus) {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          assert('notificationStatus', notificationStatus, function (value) {
            return value === 1 || value === 2;
          }, true);
          return [2, setConversationNotificationCommon(options, function () {
            return IMClient.imClient.context.setConversationStatus(options.conversationType, options.targetId, undefined, notificationStatus, options.channelId);
          }, 'setConversationNotificationStatus')];
        });
      });
    }
    function getConversationNotificationLevel(options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              paramsStr = conversationNotificationCommon(options, 'getConversationNotificationLevel');
              return [4, IMClient.imClient.context.getConversationNotificationLevel(options.conversationType, options.targetId, options.channelId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              } else {
                logger.warn("getConversationNotificationLevel fail -> ".concat(code, " : ").concat(ERROR_CODE[code], " , ").concat(paramsStr));
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }
          }
        });
      });
    }
    function getConversationNotificationStatus(options) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.conversationType', options.conversationType, isValidConversationType, true);
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              logger.info('getConversationNotificationStatus ->targetId:' + options.targetId + ',conversationType:' + options.conversationType);
              return [4, IMClient.imClient.context.getConversationNotificationStatus(options.conversationType, options.targetId, options.channelId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              } else {
                logger.warn('getConversationNotificationStatus ->code:' + code + ',targetId:' + options.targetId);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }
          }
        });
      });
    }
    function getBlockedConversationList() {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4, IMClient.imClient.context.getBlockConversationList()];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;
              return [2, {
                code: code,
                data: data
              }];
          }
        });
      });
    }
    function setConversationToTop(options, isTop) {
      if (isTop === void 0) {
        isTop = true;
      }

      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options.type', options.conversationType, isValidConversationType, true);
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              paramsStr = 'conversationType:' + options.conversationType + ',targetId:' + options.targetId;
              logger.debug('set conversation status ->' + paramsStr);
              return [4, IMClient.imClient.context.setConversationStatus(options.conversationType, options.targetId, isTop, undefined, options.channelId)];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('set conversation status fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function getTopConversationList() {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4, IMClient.imClient.context.getTopConversationList()];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;
              return [2, {
                code: code,
                data: data
              }];
          }
        });
      });
    }
    function getUnreadMentionedCount(options) {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          assert('options.targetId', options.targetId, AssertRules.STRING, true);
          assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
          logger.debug('getUnreadMentionedCount' + options.targetId + ',channelId:' + options.channelId);
          return [2, IMClient.imClient.context.getUnreadMentionedCount(options)];
        });
      });
    }
    function getAllUnreadMentionedCount() {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          logger.debug('getAllUnreadMentionedCount');
          return [2, IMClient.imClient.context.getAllUnreadMentionedCount()];
        });
      });
    }
    function getAllConversationState() {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          return [2, IMClient.imClient.context.getAllConversationState()];
        });
      });
    }

    function getUltraGroupList() {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4, IMClient.imClient.context.getUltraGroupList()];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: data
                }];
              }

              logger.warn('get ultragroup  ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getBlockUltraGroupList() {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4, IMClient.imClient.context.getBlockUltraGroupList()];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: data
                }];
              }

              logger.warn('get block ultragroup  ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function sendUltraGroupTypingStatus(options) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              assert('options.conversationType', options.conversationType, isValidConversationType, true);
              return [4, IMClient.imClient.context.sendUltraGroupTypingStatus(options)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: ErrorCode$1.SUCCESS
                }];
              }

              logger.warn('send ultraGroup OperateStatus   ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getUltraGroupMessageListByMessageUId(options, msgs) {
      return __awaiter(this, void 0, void 0, function () {
        var targetId, conversationType, channelId, messages, params, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              assert('options.conversationType', options.conversationType, isValidConversationType, true);
              assert('msgs', msgs, AssertRules.ARRAY, true);
              targetId = options.targetId, conversationType = options.conversationType, channelId = options.channelId;
              messages = [];
              msgs.forEach(function (item) {
                var sendTime = item.sendTime,
                    messageUId = item.messageUId;
                messages.push({
                  sendTime: sendTime,
                  messageUId: messageUId,
                  channelId: channelId
                });
              });
              params = {
                targetId: targetId,
                conversationType: conversationType,
                messages: messages
              };
              return [4, IMClient.imClient.context.getUltraGroupMessageListByMessageUId(params)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: data
                }];
              }

              logger.warn('get UltraGroup MessageList by messageUId   ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function updateExpansionForUltraGroupMessage(expansion, message) {
      return __awaiter(this, void 0, void 0, function () {
        var conversationType, targetId, messageUId, sentTime, canIncludeExpansion, channelId, paramsStr, options, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('expansion', expansion, AssertRules.OBJECT, true);
              assert('message', message, AssertRules.OBJECT, true);
              conversationType = message.conversationType, targetId = message.targetId, messageUId = message.messageUId, sentTime = message.sentTime, canIncludeExpansion = message.canIncludeExpansion, channelId = message.channelId;
              paramsStr = 'conversationType:' + conversationType + ',targetId:' + targetId + ',channelId:' + channelId + ',messageUId:' + messageUId;
              logger.debug('update expansion for ultragroup message  ->' + paramsStr);
              options = {
                targetId: targetId,
                channelId: channelId,
                conversationType: conversationType,
                sendTime: sentTime,
                canIncludeExpansion: canIncludeExpansion,
                messageUId: messageUId,
                expansion: expansion
              };
              return [4, IMClient.imClient.context.expandUltraMessage(options)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: ErrorCode$1.SUCCESS
                }];
              }

              logger.warn('update expansion for ultragroup message   ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function removeExpansionForUltraGroupMessage(expansion, message) {
      return __awaiter(this, void 0, void 0, function () {
        var conversationType, targetId, messageUId, sentTime, canIncludeExpansion, channelId, paramsStr, options, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('expansion', expansion, AssertRules.ARRAY, true);
              assert('message', message, AssertRules.OBJECT, true);
              conversationType = message.conversationType, targetId = message.targetId, messageUId = message.messageUId, sentTime = message.sentTime, canIncludeExpansion = message.canIncludeExpansion, channelId = message.channelId;
              paramsStr = 'conversationType:' + conversationType + ',targetId:' + targetId + ',channelId:' + channelId + ',messageUId:' + messageUId;
              logger.debug('remove expansion for ultragroup message  ->' + paramsStr);
              options = {
                targetId: targetId,
                channelId: channelId,
                conversationType: conversationType,
                sendTime: sentTime,
                canIncludeExpansion: canIncludeExpansion,
                messageUId: messageUId,
                keys: expansion
              };
              return [4, IMClient.imClient.context.expandUltraMessage(options)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: ErrorCode$1.SUCCESS
                }];
              }

              logger.warn('remove expansion for ultraGroup message   ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function removeAllExpansionForUltraGroupMessage(message) {
      return __awaiter(this, void 0, void 0, function () {
        var conversationType, targetId, messageUId, sentTime, canIncludeExpansion, channelId, paramsStr, options, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('message', message, AssertRules.OBJECT, true);
              conversationType = message.conversationType, targetId = message.targetId, messageUId = message.messageUId, sentTime = message.sentTime, canIncludeExpansion = message.canIncludeExpansion, channelId = message.channelId;
              paramsStr = 'conversationType:' + conversationType + ',targetId:' + targetId + ',channelId:' + channelId + ',messageUId:' + messageUId;
              logger.debug('remove all expansion for ultraGroup message ->' + paramsStr);
              options = {
                targetId: targetId,
                channelId: channelId,
                conversationType: conversationType,
                sendTime: sentTime,
                canIncludeExpansion: canIncludeExpansion,
                messageUId: messageUId,
                removeAll: true
              };
              return [4, IMClient.imClient.context.expandUltraMessage(options)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: ErrorCode$1.SUCCESS
                }];
              }

              logger.warn('remove all expansion for ultraGroup message   ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function modifyMessage(content, message) {
      return __awaiter(this, void 0, void 0, function () {
        var conversationType, targetId, messageUId, senderUserId, sentTime, canIncludeExpansion, channelId, paramsStr, options, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('content', content, AssertRules.OBJECT, true);
              assert('message', message, AssertRules.OBJECT, true);
              conversationType = message.conversationType, targetId = message.targetId, messageUId = message.messageUId, senderUserId = message.senderUserId, sentTime = message.sentTime, canIncludeExpansion = message.canIncludeExpansion, channelId = message.channelId;
              paramsStr = 'conversationType:' + conversationType + ',targetId:' + targetId + ',channelId:' + channelId + ',messageUId:' + messageUId;
              logger.debug('update ultragroup message expansion ->' + paramsStr);
              options = {
                targetId: targetId,
                channelId: channelId,
                conversationType: conversationType,
                fromUserId: senderUserId,
                sendTime: sentTime,
                canIncludeExpansion: canIncludeExpansion,
                messageUId: messageUId,
                content: content
              };
              return [4, IMClient.imClient.context.modifyMessage(options)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: ErrorCode$1.SUCCESS
                }];
              }

              logger.warn('modify ultraGroup message   ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getUltraGroupUnreadMentionedCountByTargetId(targetId) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('cotargetIdntent', targetId, AssertRules.STRING, true);
              logger.debug('get UltraGroup unreadMentionedCount by targetId:' + targetId);
              return [4, IMClient.imClient.context.getUltraGroupUnreadMentionedCountByTargetId(targetId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: data
                }];
              }

              logger.warn('get UltraGroup unreadMentionedCount by targetId error ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getUltraGroupDefaultNotificationLevel(options) {
      return __awaiter(this, void 0, void 0, function () {
        var methodName, paramsStr, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              assert('options.channelId', options.channelId, AssertRules.CHANNEL_ID);
              methodName = 'getUltraGroupDefaultNotificationLevel';
              paramsStr = "targetId: ".concat(options.targetId, ", channelId: ").concat(options.channelId);
              logger.debug("".concat(methodName, " -> ").concat(paramsStr));
              return [4, IMClient.imClient.context.getUltraGroupDefaultNotificationLevel(options.targetId, options.channelId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              } else {
                logger.warn("".concat(methodName, " fail -> ").concat(code, " : ").concat(ERROR_CODE[code], " , ").concat(paramsStr));
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }
          }
        });
      });
    }
    function setUltraGroupDefaultNotificationLevel(options, notificationLevel) {
      return __awaiter(this, void 0, void 0, function () {
        var methodName, paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options.targetId', options.targetId, AssertRules.STRING, true);
              options.channelId = options.channelId || '';
              assert('options.channelId', options.channelId, AssertRules.ONLY_STRING, true);
              assert('notificationLevel', notificationLevel, function (value) {
                return NotificationLevel$1[value] !== undefined;
              }, true);
              methodName = 'setUltraGroupDefaultNotificationLevel';
              paramsStr = "targetId: ".concat(options.targetId, ", channelId: ").concat(options.channelId);
              logger.debug("".concat(methodName, " -> ").concat(paramsStr));
              return [4, IMClient.imClient.context.setUltraGroupDefaultNotificationLevel(options.targetId, notificationLevel, options.channelId)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              } else {
                logger.warn("".concat(methodName, " fail -> ").concat(code, " : ").concat(ERROR_CODE[code], " , ").concat(paramsStr));
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }
          }
        });
      });
    }
    function getUltraGroupUnreadCountByTargetId(targetId) {
      return __awaiter(this, void 0, void 0, function () {
        var methodName, _a, code, data, paramsStr;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.targetId', targetId, AssertRules.STRING, true);
              methodName = 'getUltraGroupUnreadCountByTargetId';
              return [4, IMClient.imClient.context.getUltraGroupUnreadCountByTargetId(targetId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;
              paramsStr = "targetId: ".concat(targetId);
              logger.debug("".concat(methodName, " -> ").concat(paramsStr));

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              logger.warn("".concat(methodName, " fail -> ").concat(code, ": ").concat(ERROR_CODE[code], ", ").concat(paramsStr));
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getAllUltraGroupUnreadCount() {
      return __awaiter(this, void 0, void 0, function () {
        var methodName, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              methodName = 'getAllUltraGroupUnreadCount';
              return [4, IMClient.imClient.context.getAllUltraGroupUnreadCount()];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;
              logger.debug(methodName);

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              logger.warn("".concat(methodName, " fail ->").concat(code, ": ").concat(ERROR_CODE[code]));
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getAllUltraGroupUnreadMentionedCount() {
      return __awaiter(this, void 0, void 0, function () {
        var methodName, isMentioned, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              methodName = 'getAllUltraGroupUnreadMentionedCount';
              isMentioned = true;
              return [4, IMClient.imClient.context.getAllUltraGroupUnreadCount(isMentioned)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;
              logger.debug(methodName);

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              logger.warn("".concat(methodName, " fail ->").concat(code, ": ").concat(ERROR_CODE[code]));
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }

    var assertSetChatRoomEntryOption = function assertSetChatRoomEntryOption(options) {
      assert('options.key', options.key, AssertRules.STRING, true);
      assert('options.value', options.value, AssertRules.STRING, true);
      assert('options.isAutoDelete', options.isAutoDelete, AssertRules.BOOLEAN);
      assert('options.isSendNotification', options.isSendNotification, AssertRules.BOOLEAN);
      assert('options.notificationExtra', options.notificationExtra, AssertRules.STRING);
    };

    var assertSetChatRoomEntriesOption = function assertSetChatRoomEntriesOption(options) {
      options.entries.forEach(function (entry) {
        assert('entry.key', entry.key, AssertRules.STRING, true);
        assert('entry.value', entry.value, AssertRules.STRING, true);
      });
      assert('options.isAutoDelete', options.isAutoDelete, AssertRules.BOOLEAN);
      assert('options.notificationExtra', options.notificationExtra, AssertRules.STRING);
    };

    var assertRemoveChatRoomEntryOption = function assertRemoveChatRoomEntryOption(options) {
      assert('options.key', options.key, AssertRules.STRING, true);
      assert('options.isSendNotification', options.isSendNotification, AssertRules.BOOLEAN);
      assert('options.notificationExtra', options.notificationExtra, AssertRules.STRING);
    };

    var assertRemoveChatRoomEntriesOption = function assertRemoveChatRoomEntriesOption(options) {
      options.entries.forEach(function (entry) {
        assert('key', entry, AssertRules.STRING, true);
      });
      assert('options.notificationExtra', options.notificationExtra, AssertRules.STRING);
    };

    function joinChatRoom(targetId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options.count', options.count, AssertRules.NUMBER, true);
              paramsStr = 'id:' + targetId;
              logger.debug('join chatroom ->' + paramsStr);
              return [4, IMClient.imClient.context.joinChatroom(targetId, options.count)];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('join chatroom fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function joinExistChatRoom(targetId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options.count', options.count, AssertRules.NUMBER, true);
              paramsStr = 'id:' + targetId;
              logger.debug('join exist chatroom ->' + paramsStr);
              return [4, IMClient.imClient.context.joinExistChatroom(targetId, options.count)];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('join exist chatroom fail ->code:' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function quitChatRoom(targetId) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              paramsStr = 'id:' + targetId;
              logger.debug('quit chatroom ->' + paramsStr);
              return [4, IMClient.imClient.context.quitChatroom(targetId)];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('quit chatroom fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function getChatRoomInfo(targetId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, _a, code, chatroomInfo;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.count', options.count, AssertRules.NUMBER);
              assert('options.order', options.order, function (value) {
                return [0, 1, 2].includes(value);
              });
              paramsStr = 'id:' + targetId;
              logger.debug('get chatroom info ->' + paramsStr);
              return [4, IMClient.imClient.context.getChatroomInfo(targetId, options.count, options.order)];

            case 1:
              _a = _b.sent(), code = _a.code, chatroomInfo = _a.data;

              if (code === ErrorCode$1.SUCCESS && chatroomInfo) {
                return [2, {
                  code: code,
                  data: chatroomInfo
                }];
              }

              logger.warn('get chatroom info fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function setChatRoomEntry(targetId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('targetId', targetId, AssertRules.STRING, true);
              assertSetChatRoomEntryOption(options);
              paramsStr = 'id:' + targetId;
              logger.debug('set chatroom entry->' + paramsStr);
              return [4, IMClient.imClient.context.setChatroomEntry(targetId, options)];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('set chatroom entry fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function setChatRoomEntries(targetId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('targetId', targetId, AssertRules.STRING, true);
              assertSetChatRoomEntriesOption(options);

              if (options.entries.length > 10) {
                return [2, ERROR_INFO.CHATROOM_KV_STORE_OUT_LIMIT];
              }

              paramsStr = 'id:' + targetId;
              logger.debug('set chatroom entry->' + paramsStr);
              return [4, IMClient.imClient.context.setChatroomEntries(targetId, options)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('set chatroom entry fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code],
                  data: data
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function forceSetChatRoomEntry(targetId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('targetId', targetId, AssertRules.STRING, true);
              assertSetChatRoomEntryOption(options);
              paramsStr = 'id:' + targetId;
              logger.debug('force set chatroom entry ->' + paramsStr);
              return [4, IMClient.imClient.context.forceSetChatroomEntry(targetId, options)];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('force set chatroom entry fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function removeChatRoomEntry(targetId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('targetId', targetId, AssertRules.STRING, true);
              assertRemoveChatRoomEntryOption(options);
              paramsStr = 'id:' + targetId;
              logger.debug('remove chatroom entry->' + paramsStr);
              return [4, IMClient.imClient.context.removeChatroomEntry(targetId, options)];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('remove chatroom entry fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function removeChatRoomEntries(targetId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, newOptions, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('targetId', targetId, AssertRules.STRING, true);
              assertRemoveChatRoomEntriesOption(options);
              paramsStr = 'id:' + targetId;
              logger.debug('remove chatroom entry->' + paramsStr);
              newOptions = Object.assign({}, options);
              newOptions.entries = options.entries.map(function (entry) {
                return {
                  key: entry
                };
              });
              return [4, IMClient.imClient.context.removeChatroomEntries(targetId, newOptions)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('remove chatroom entry fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code],
                  data: data
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function forceRemoveChatRoomEntry(targetId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('targetId', targetId, AssertRules.STRING, true);
              assertRemoveChatRoomEntryOption(options);
              paramsStr = 'id:' + targetId;
              logger.debug('force remove chatroom entry ->' + paramsStr);
              return [4, IMClient.imClient.context.forceRemoveChatroomEntry(targetId, options)];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('force remove chatroom entry fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function getChatRoomEntry(targetId, key) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('key', key, function (value) {
                return isString(value) && /[\w+=-]+/.test(value) && value.length <= 128;
              }, true);
              paramsStr = 'id:' + targetId;
              logger.debug('get chatroom entry->' + paramsStr);
              return [4, IMClient.imClient.context.getChatroomEntry(targetId, key)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS && data) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              logger.warn('get chatroom entry fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getAllChatRoomEntries(targetId) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              paramsStr = 'id:' + targetId;
              logger.debug('get all chatroom entries->' + paramsStr);
              return [4, IMClient.imClient.context.getAllChatroomEntries(targetId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS && data) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              logger.warn('get all chatroom entries fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getChatroomHistoryMessages(targetId, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, _a, code, data, list;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.timestamp', options.timestamp, AssertRules.NUMBER);
              assert('options.count', options.count, AssertRules.NUMBER);
              assert('options.order', options.order, function (value) {
                return value === 0 || value === 1;
              });
              paramsStr = 'id:' + targetId;
              logger.debug('get chatroom history message->' + paramsStr);
              return [4, IMClient.imClient.context.getChatRoomHistoryMessages(targetId, options.count, options.order, options.timestamp)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS && data) {
                list = data.list.map(function (item) {
                  return tranReceivedMessage(item);
                });
                return [2, {
                  code: code,
                  data: {
                    list: list,
                    hasMore: !!data.hasMore
                  }
                }];
              }

              logger.warn('get chatroom history message fail ->code+:' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function bindRTCRoomForChatroom(option) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, IMClient.imClient.context.bindRTCRoomForChatroom(option)];

            case 1:
              code = _a.sent();
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }

    var BaseMessage = function () {
      function BaseMessage(messageType, content, isPersited, isCounted) {
        if (isPersited === void 0) {
          isPersited = true;
        }

        if (isCounted === void 0) {
          isCounted = true;
        }

        this.messageType = messageType;
        this.content = content;
        this.isPersited = isPersited;
        this.isCounted = isCounted;
      }

      return BaseMessage;
    }();
    function regMessage(messageType, isPersited, isCounted) {
      if (isPersited === void 0) {
        isPersited = true;
      }

      if (isCounted === void 0) {
        isCounted = true;
      }

      var defined = function defined(conetnt) {
        return new BaseMessage(messageType, conetnt, isPersited, isCounted);
      };

      return defined;
    }

    var ImageMessage = regMessage('RC:ImgMsg');

    var HQVoiceMessage = regMessage('RC:HQVCMsg');

    var SightMessage = regMessage('RC:SightMsg');

    var TextMessage = regMessage('RC:TxtMsg');

    var CombineMessage = regMessage('RC:CombineMsg');

    var FileMessage = regMessage('RC:FileMsg');

    var GIFMessage = regMessage('RC:GIFMsg');

    var VoiceMessage = regMessage('RC:VcMsg');

    var LocationMessage = regMessage('RC:LBSMsg');

    var ReferenceMessage = regMessage('RC:ReferenceMsg');

    var RichContentMessage = regMessage('RC:ImgTextMsg');

    var uploadFile, uploadOptions;
    var uploadOrderObject = {
      qiniu: uploadQiniu,
      baidu: uploadBos,
      aliyun: uploadAliyun,
      s3: uploadS3,
      stc: uploadStc
    };
    var uploadOrderList = [];
    var Conf = {
      BOS_CHUNCK_SIZE: 5 * 1024 * 1024 * 1024
    };
    var PROTOCOL_HTTP = 'http://';
    var PROTOCOL_HTTPS = 'https://';

    function forEach(m, callback) {
      for (var key in m) {
        callback(key, m[key]);
      }
    }

    function getProtocol() {
      var protocol = PROTOCOL_HTTPS;

      if (location.protocol === 'http:' || location.protocol === 'file:') {
        protocol = PROTOCOL_HTTP;
      }

      return protocol;
    }

    function buildUrl(url, items) {
      var query = '';
      forEach(items, function (name, value) {
        if (name !== 'token') {
          query += (query ? '&' : '') + encodeURIComponent(name) + '=' + encodeURIComponent(value);
        }
      });

      if (query) {
        url += (url.indexOf('?') > 0 ? '&' : '?') + query;
      }

      return url;
    }

    function uploadBos(data, options, callback, file) {
      if (file.size > Conf.BOS_CHUNCK_SIZE) {
        throw new Error('the file size is over 5GB!');
      }

      var params = options || {};
      options = options || uploadOptions;
      var xhr = new XMLHttpRequest();
      var protocol = getProtocol();

      if (!params.uploadHost.bos && !params.bosUploadPath) {
        return;
      }

      var url = protocol + uploadOrderList[0][1] + params.bosUploadPath;
      uploadOrderList.shift();
      var bosHeader = params.bosHeader || {};
      var resData = {
        filename: options.uniqueValue || file.uniqueName,
        name: file.name,
        downloadUrl: url,
        isBosRes: true
      };

      if (xhr.upload && options.support_options) {
        xhr.upload.onprogress = function (event) {
          callback.onProgress(event.loaded, event.total, true);
        };
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          var result = JSON.parse(xhr.responseText || '{}');
          result.filename = options.uniqueValue;

          if (xhr.status === 200) {
            var isBosUploadSuccess = true;
            callback.onCompleted(resData, isBosUploadSuccess);
          } else if (uploadOrderList.length) {
            uploadOrderObject[uploadOrderList[0][0]](data, options, callback, file);
          } else {
            callback.onError('upload fail');
          }
        }
      };

      xhr.open(options.method, url, true);
      xhr.setRequestHeader('authorization', bosHeader.bosToken);
      xhr.setRequestHeader('x-bce-date', bosHeader.bosDate);
      xhr.send(file);
    }

    function uploadQiniu(data, options, callback, file) {
      var issuedQnUploadHost = PROTOCOL_HTTPS + options.uploadHost.qiniu;
      var url;

      {
        url = getProtocol() + uploadOrderList[0][1] || issuedQnUploadHost;
      }

      {
        uploadOrderList.shift();
      }

      var xhr = new XMLHttpRequest();

      if (xhr.upload && options.support_options) {
        xhr.upload.onprogress = function (event) {
          callback.onProgress(event.loaded, event.total);
        };
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          var result = JSON.parse(xhr.responseText || '{}');
          result.filename = options.uniqueValue;
          result.uploadMethod = UploadMethod$1 ? UploadMethod$1.QINIU : '';

          if (xhr.status === 200) {
            callback.onCompleted(result);
          } else if (uploadOrderList.length) {
            uploadOrderObject[uploadOrderList[0][0]](data, options, callback, file);
          } else {
            callback.onError('upload fail');
          }
        }
      };

      if (options.isChunk) {
        url += '/mkblk/' + data.size;
        url = buildUrl(url, options.multi_parmas);
      }

      xhr.open(options.method, url, true);
      callback.onOpen(xhr);

      if (options.stream) {
        xhr.setRequestHeader('authorization', 'UpToken ' + options.multi_parmas.token);
      }

      forEach(options.headers, function (key, value) {
        xhr.setRequestHeader(key, value);
      });
      xhr.send(data);
    }

    function uploadAliyun(data, options, callback, file) {
      if (file.size > Conf.BOS_CHUNCK_SIZE) {
        throw new Error('the file size is over 5GB!');
      }

      var cloneData = new FormData();
      cloneData.set('file', data.get('file'));
      cloneData.set('key', data.get('key'));
      cloneData.set('token', data.get('token'));
      var aliHost = uploadOrderList[0][1];
      uploadOrderList.shift();
      options = options || {};
      data = data || uploadFile;
      options = options || uploadOptions;
      var xhr = new XMLHttpRequest();
      var protocol = getProtocol();
      var url = protocol + options.ossBucketName + '.' + aliHost;

      if (xhr.upload && options.support_options) {
        xhr.upload.onprogress = function (event) {
          callback.onProgress(event.loaded, event.total);
        };
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          var result = JSON.parse(xhr.responseText || '{}');
          result.name = options.uniqueValue;
          result.filename = options.uploadFileName;
          result.uploadMethod = UploadMethod$1 ? UploadMethod$1.ALI : '';

          if (xhr.status === 200) {
            callback.onCompleted(result);
          } else if (uploadOrderList.length) {
            uploadOrderObject[uploadOrderList[0][0]](cloneData, options, callback, file);
          } else {
            callback.onError('upload fail');
          }
        }
      };

      xhr.open(options.method, url, true);
      console.log('ali:url', url);
      var aliHeader = options.aliHeader || {};
      data.set('OSSAccessKeyId', aliHeader.osskeyId);
      data.set('policy', aliHeader.ossPolicy);
      data.set('Signature', aliHeader.ossSign);
      data.set('success_action_status', 200);
      data["delete"]('key');
      data.append('key', options.uploadFileName);
      data["delete"]('file');
      data.append('file', file);
      xhr.send(data);
    }

    function uploadS3(data, options, callback, file) {
      var fromData = new FormData();
      var xhr = new XMLHttpRequest();
      var protocol = getProtocol();
      var contentDisposition = options.contentDisposition;
      var awsHost = uploadOrderList[0][1];
      var url = protocol + options.s3BucketName + '.' + awsHost;
      console.log('uploadS3:url', url);
      uploadOrderList.shift();

      if (xhr.upload && options.support_options) {
        xhr.upload.onprogress = function (event) {
          callback.onProgress(event.loaded, event.total);
        };
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          var result = JSON.parse(xhr.responseText || '{}');
          result.name = options.uniqueValue;
          result.filename = options.uploadFileName;
          result.uploadMethod = UploadMethod$1.AWS;

          if (xhr.status === 200 || xhr.status === 204) {
            callback.onCompleted(result);
          } else if (uploadOrderList.length) {
            var cloneData = new FormData();
            cloneData.set('file', data.get('file'));
            cloneData.set('key', data.get('key'));
            cloneData.set('token', data.get('token'));
            uploadOrderObject[uploadOrderList[0][0]](cloneData, options, callback, file);
          } else {
            callback.onError('upload fail');
          }
        }
      };

      xhr.open(options.method, url, true);
      var s3Header = options ? options.s3Header : {};
      var type = file && file.type;

      if (contentDisposition) {
        fromData.set('Content-Disposition', contentDisposition + ';');
      } else {
        fromData.set('Content-Disposition', type === 'text/html' ? 'inline;' : 'attachment;');
      }

      fromData.set('Content-Type', type);
      fromData.set('x-amz-credential', s3Header.s3Credential);
      fromData.set('x-amz-algorithm', s3Header.s3Algorithm);
      fromData.set('x-amz-date', s3Header.s3Date);
      fromData.set('policy', s3Header.s3Policy);
      fromData.set('x-amz-signature', s3Header.s3Signature);
      fromData.set('key', options.uploadFileName);
      fromData.set('file', file);
      xhr.send(fromData);
    }

    function uploadStc(data, options, callback, file) {
      var xhr = new XMLHttpRequest();
      var contentDisposition = options.contentDisposition;
      var host = uploadOrderList[0][1];
      var url = 'https://' + host + '/' + options.stcBucketName + '/' + options.uploadFileName;
      uploadOrderList.shift();

      if (xhr.upload && options.support_options) {
        xhr.upload.onprogress = function (event) {
          callback.onProgress(event.loaded, event.total);
        };
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          var result = JSON.parse(xhr.responseText || '{}');
          result.name = options.uniqueValue;
          result.filename = options.uploadFileName;
          result.uploadMethod = UploadMethod$1 ? UploadMethod$1.STC : '';

          if (xhr.status === 200 || xhr.status === 204) {
            callback.onCompleted(result);
          } else if (uploadOrderList.length) {
            var cloneData = new FormData();
            cloneData.set('file', data.get('file'));
            cloneData.set('key', data.get('key'));
            cloneData.set('token', data.get('token'));
            uploadOrderObject[uploadOrderList[0][0]](cloneData, options, callback, file);
          } else {
            callback.onError('upload fail');
          }
        }
      };

      xhr.open('PUT', url, true);
      var stcHeader = options ? options.stcHeader : {};
      xhr.setRequestHeader('Content-Type', file.type);

      if (contentDisposition) {
        xhr.setRequestHeader('Content-Disposition', contentDisposition + ';');
      } else {
        xhr.setRequestHeader('Content-Disposition', file.type === 'text/html' ? 'inline;' : 'attachment;');
      }

      xhr.setRequestHeader('Authorization', stcHeader.stcAuthorization);
      xhr.setRequestHeader('x-amz-content-sha256', stcHeader.stcContentSha256);
      xhr.setRequestHeader('x-amz-date', stcHeader.stcDate);
      xhr.send(file);
    }

    function uploadStcMultipart(file, options, callback) {
      var type = file && file.type || 'text/plain';
      var fileType = type.indexOf('image') > -1 ? 1 : 4;
      var contentDisposition = options.contentDisposition;
      var fileName;
      var url;
      var chunks = Math.ceil(file.size / options.stc_chunk_size);
      var osssConfig = options && JSON.parse(options.ossConfig ? options.ossConfig : '');
      if (!Array.isArray(osssConfig)) osssConfig = [];
      var stcConfig = osssConfig.find(function (item) {
        var keys = Object.keys(item);
        return keys.includes('stc');
      });
      var queryString = 'uploads';

      function onSuccess(data) {
        fileName = data.fileName;
        url = 'https://' + stcConfig.stc + '/' + options.stcBucketName + '/' + fileName;
        console.log('uploadStcMultipart:url', url);
        var xhr = new XMLHttpRequest();
        xhr.open('POST', url + '?' + queryString, true);

        if (contentDisposition) {
          xhr.setRequestHeader('Content-Disposition', contentDisposition + ';');
        } else {
          xhr.setRequestHeader('Content-Disposition', file.type === 'text/html' ? 'inline;' : 'attachment;');
        }

        xhr.setRequestHeader('Authorization', data && data.stcAuthorization);
        xhr.setRequestHeader('x-amz-content-sha256', data && data.stcContentSha256);
        xhr.setRequestHeader('x-amz-date', data && data.stcDate);
        xhr.setRequestHeader('Content-Type', type);
        xhr.send();

        xhr.onreadystatechange = function () {
          if (xhr.readyState === 4) {
            var text = xhr.response;
            var reg = /(?:<UploadId>)(\S*?)(?:<\/UploadId>)/;
            var uploadId = text.match(reg);
            console.log('uploadId', uploadId);

            if (xhr.status === 200 || xhr.status === 204) {
              executeResult(Array.isArray(uploadId) && uploadId[1]);
            } else {
              callback.onError('uploadStcMultipart:did not get uploadId');
            }
          }
        };
      }

      function onError(error) {
        callback.onError('uploadStcMultipart:' + error);
      }

      IMClient.imClient.context.getFileToken(fileType, fileName, 'POST', queryString).then(onSuccess, onError);
      var failedPartNumbers = [];
      var successETagMap = new Map();

      function executeResult(uploadId) {
        var promises = [];

        for (var i = 1; i <= chunks; i++) {
          promises.push(getETags(uploadId, i));
        }

        result(uploadId, promises);
      }

      function result(uploadId, promises) {
        if (!promises || !Array.isArray(promises) || promises.length === 0) return;
        Promise.all(promises).then(function () {
          var queryString = 'uploadId=' + uploadId;

          function onSuccess(data) {
            console.log('onSuccess', data);
            console.log('onSuccess:uploadId', uploadId);
            var thirdXhr = new XMLHttpRequest();
            thirdXhr.open('POST', url + '?' + queryString, true);
            thirdXhr.setRequestHeader('Authorization', data && data.stcAuthorization);
            thirdXhr.setRequestHeader('x-amz-content-sha256', data && data.stcContentSha256);
            thirdXhr.setRequestHeader('x-amz-date', data && data.stcDate);
            thirdXhr.setRequestHeader('Content-Type', type);
            var xml = "<CompleteMultipartUpload xmlns='http://s3.amazonaws.com/doc/2006-03-01/'>";
            var newKeys = Array.from(successETagMap.keys() || []).sort(function (a, b) {
              return a - b;
            });
            console.log('keys', newKeys);
            newKeys.forEach(function (key) {
              xml += "<Part><ETag>".concat(successETagMap.get(key), "</ETag><PartNumber>").concat(key, "</PartNumber></Part>");
            });
            xml += '</CompleteMultipartUpload>';
            thirdXhr.send(xml);
            console.log('xml', xml);

            thirdXhr.onreadystatechange = function () {
              if (thirdXhr.readyState === 4) {
                if (thirdXhr.status === 200 || thirdXhr.status === 204) {
                  var result_1 = {
                    name: file.name,
                    filename: options.uploadFileName,
                    uploadMethod: UploadMethod$1.STC
                  };
                  callback.onCompleted(result_1);
                } else {
                  callback.onError('uploadStcMultipart:upload does not end');
                }
              }
            };
          }

          function onError(error) {
            callback.onError('uploadStcMultipart:' + error);
          }

          if (successETagMap.size === chunks) {
            IMClient.imClient.context.getFileToken(fileType, fileName, 'POST', queryString).then(onSuccess, onError);
          } else {
            var promises_1 = [];

            for (var _i = 0, failedPartNumbers_1 = failedPartNumbers; _i < failedPartNumbers_1.length; _i++) {
              var i = failedPartNumbers_1[_i];
              promises_1.push(getETags(uploadId, i));
            }

            result(uploadId, promises_1);
          }
        }, function (error) {
          console.error(error);
          callback.onError('uploadStcMultipart: chunkFiles upload failed and those will reupload');
          var promises = [];

          for (var _i = 0, failedPartNumbers_2 = failedPartNumbers; _i < failedPartNumbers_2.length; _i++) {
            var i = failedPartNumbers_2[_i];
            promises.push(getETags(uploadId, i));
          }

          result(uploadId, promises);
        });
      }

      function getETags(uploadId, i) {
        return new Promise(function (resolve, reject) {
          var queryString = 'partNumber=' + i + '&uploadId=' + uploadId;

          function onSuccess(data) {
            console.log('signature ' + i + ' onSuccess', data);
            var fileChunk = file && file.slice((i - 1) * options.stc_chunk_size, i * options.stc_chunk_size);
            console.log('fileChunk:size', fileChunk.size);
            var secondXhr = new XMLHttpRequest();
            secondXhr.open('PUT', url + '?' + queryString, true);
            secondXhr.setRequestHeader('Authorization', data && data.stcAuthorization);
            secondXhr.setRequestHeader('x-amz-content-sha256', data && data.stcContentSha256);
            secondXhr.setRequestHeader('x-amz-date', data && data.stcDate);
            secondXhr.setRequestHeader('Content-Type', type);
            secondXhr.send(fileChunk);

            secondXhr.onreadystatechange = function () {
              if (secondXhr.readyState === 4) {
                if (secondXhr.status === 200 || secondXhr.status === 204) {
                  var eTag = secondXhr.getResponseHeader('etag');
                  console.log('etag:' + i, eTag);
                  successETagMap.set(i, eTag);
                  resolve(eTag);
                } else {
                  if (!failedPartNumbers.includes(i)) failedPartNumbers.push(i);
                  reject(i);
                }
              }
            };
          }

          function onError(e) {
            console.log('getETags:签名验证失败');
            if (!failedPartNumbers.includes(i)) failedPartNumbers.push(i);
            reject(i);
          }

          IMClient.imClient.context.getFileToken(fileType, fileName, 'PUT', queryString).then(onSuccess, onError);
        });
      }
    }

    function uploadProcess(file, opts, callback) {
      uploadFile = file;
      uploadOptions = opts;
      uploadOrderList = [];

      if (opts.ossConfig) {
        var ossConfig = JSON.parse(opts.ossConfig);
        var aliyunUrl_1 = '';
        var s3Url_1;
        var stcUrl_1;
        var tempArr_1 = [];
        ossConfig.forEach(function (item) {
          var index = Number(item.p) - 1;

          for (var key in item) {
            if (key === 'aliyun') {
              aliyunUrl_1 = item[key];
            }

            if (key === 's3') s3Url_1 = item[key];
            if (key === 'stc') stcUrl_1 = item[key];

            if (key !== 'p') {
              tempArr_1[index] = [key, item[key]];
            }
          }
        });
        tempArr_1.forEach(function (item) {
          if (item) {
            uploadOrderList.push(item);
          }
        });

        if (ossConfig.length !== uploadOrderList.length) {
          uploadOrderList = [['qiniu', opts.domain], ['baidu', opts.uploadHost.bos], ['aliyun', aliyunUrl_1], ['s3', s3Url_1], ['stc', stcUrl_1]];
        }
      } else {
        uploadOrderList = [['qiniu', opts.domain], ['baidu', opts.uploadHost.bos]];
      }

      var stcConfig;

      if (opts.ossConfig) {
        var osssConfig = opts && JSON.parse(opts.ossConfig);
        if (!Array.isArray(osssConfig)) osssConfig = [];
        stcConfig = osssConfig.find(function (item) {
          var keys = Object.keys(item);
          return keys.includes('stc');
        });
      }

      if (stcConfig && parseInt(stcConfig.p) === 1 && file.size >= 4 * 1024 * 1024) {
        uploadStcMultipart(file, opts, callback);
      } else {
        var data = opts.data(file, opts);
        uploadOrderObject[uploadOrderList[0][0]](data, opts, callback, file);
      }
    }

    var dataType = {
      form: getFormData,
      json: getJsonData,
      data: getData
    };

    function genUId() {
      var date = new Date().getTime();
      var uuid = 'xxxxxx4xxxyxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (date + Math.random() * 16) % 16 | 0;
        date = Math.floor(date / 16);
        return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
      });
      return uuid;
    }

    function mergeOption(opts) {
      var options = {
        domain: '',
        method: 'POST',
        file_data_name: 'file',
        unique_key: 'key',
        base64_size: 4 * 1024 * 1024,
        chunk_size: 4 * 1024 * 1024,
        bos_chunk_size: 4 * 1024 * 1024 * 1024,
        stc_chunk_size: 10 * 1024 * 1024,
        headers: {},
        multi_parmas: {},
        query: {},
        support_options: true,
        data: dataType.form,
        genUId: genUId
      };

      if (!opts || !opts.domain) {
        throw new Error('domain is null');
      }

      for (var key in opts) {
        options[key] = opts[key];
      }

      return options;
    }

    function mEach(m, callback) {
      for (var key in m) {
        callback(key, m[key]);
      }
    }

    function getFormData(file, opts) {
      var form = new FormData();

      if (opts.unique_key) {
        var suffix = file.name.substr(file.name.lastIndexOf('.'));
        var uniqueValue = genUId() + suffix;
        form.append(opts.unique_key, uniqueValue);
        opts.uniqueValue = uniqueValue;
      }

      form.append(opts.file_data_name, file);
      mEach(opts.multi_parmas, function (key, value) {
        form.append(key, value);
      });
      return form;
    }

    function getJsonData(file, opts) {
      var data = {};

      if (opts.unique_key) {
        var suffix = file.name.substr(file.name.lastIndexOf('.'));
        var uniqueValue = genUId() + suffix;
        data[opts.unique_key] = uniqueValue;
        opts.uniqueValue = uniqueValue;
      }

      data[opts.file_data_name] = file;
      mEach(opts.multi_parmas, function (key, value) {
        data[key] = value;
      });
      return JSON.stringify(data);
    }

    function getData(file, opts) {
      return file;
    }

    var preLoaded = 0;
    var realLoaded;

    var Upload = function () {
      function Upload(options) {
        this.options = mergeOption(options);
      }

      Upload.prototype.setOptions = function (opts) {
        var me = this;
        mEach(opts, function (key, value) {
          me.options[key] = value;
        });
      };

      Upload.prototype.upload = function (file, callback) {
        if (!file) {
          callback.onError('upload file is null.');
          return;
        }

        var me = this;
        uploadProcess(file, this.options, {
          onProgress: function onProgress(loaded, total, isBosProcess) {
            realLoaded = loaded;

            if (isBosProcess) {
              var realIncrease = loaded / total * (total - preLoaded);
              realLoaded = preLoaded + realIncrease;
            } else {
              preLoaded = realLoaded;
            }

            callback.onProgress(realLoaded, total);
          },
          onCompleted: function onCompleted(data) {
            callback.onCompleted(data);
          },
          onError: function onError(errorCode) {
            callback.onError(errorCode);
          },
          onOpen: function onOpen(xhr) {
            me.xhr = xhr;
          }
        });
      };

      Upload.prototype.cancel = function () {
        this.xhr && this.xhr.abort();
      };

      return Upload;
    }();

    function init(options) {
      return new Upload(options);
    }

    function getResizeRatio(imageInfo, config) {
      var ratio = 1;
      var oWidth = imageInfo.width;
      var maxWidth = config.maxWidth || 0;

      if (maxWidth > 0 && oWidth > maxWidth) {
        ratio = maxWidth / oWidth;
      }

      var oHeight = imageInfo.height;
      var maxHeight = config.maxHeight || 0;

      if (maxHeight > 0 && oHeight > maxHeight) {
        var ratioHeight = maxHeight / oHeight;
        ratio = Math.min(ratio, ratioHeight);
      }

      var maxSize = config.maxSize || 0;
      var oSize = Math.ceil(imageInfo.size / 1000);

      if (oSize > maxSize) {
        var ratioSize = maxSize / oSize;
        ratio = Math.min(ratio, ratioSize);
      }

      return ratio;
    }

    function resize(file, config, callback) {
      file.type;
      var canvas = document.createElement('canvas');
      var reader = new FileReader();
      reader.readAsDataURL(file);

      reader.onload = function (evt) {
        var imageData = evt.target.result;
        var img = new Image();
        img.src = imageData;
        var width = img.width;
        var height = img.height;
        var imageInfo = {
          width: width,
          height: height,
          size: evt.total
        };
        var ratio = getResizeRatio(imageInfo, config);
        var newImageData = imageData;

        if (ratio < 1) {
          newImageData = compress(img, width * ratio, height * ratio);
        }

        callback(newImageData);
      };

      function compress(img, width, height) {
        canvas.width = width;
        canvas.height = height;
        var context = canvas.getContext('2d');
        context.drawImage(img, 0, 0, width, height);
        return canvas.toDataURL('image/jpg');
      }
    }

    var UploadFile = {
      init: init,
      dataType: dataType,
      resize: resize
    };

    var calcPosition = function calcPosition(width, height, opts) {
      var isheight = width < height;
      var scale = isheight ? height / width : width / height;
      var zoom;
      var x = 0;
      var y = 0;
      var w;
      var h;

      var gtScale = function gtScale() {
        if (isheight) {
          zoom = width / 100;
          w = 100;
          h = height / zoom;
          y = (h - opts.maxHeight) / 2;
        } else {
          zoom = height / 100;
          h = 100;
          w = width / zoom;
          x = (w - opts.maxWidth) / 2;
        }

        return {
          w: w,
          h: h,
          x: -x,
          y: -y
        };
      };

      var ltScale = function ltScale() {
        if (isheight) {
          zoom = height / opts.maxHeight;
          h = opts.maxHeight;
          w = width / zoom;
        } else {
          zoom = width / opts.maxWidth;
          w = opts.maxWidth;
          h = height / zoom;
        }

        return {
          w: w,
          h: h,
          x: -x,
          y: -y
        };
      };

      return scale > opts.scale ? gtScale() : ltScale();
    };

    var getBlobUrl = function getBlobUrl(file) {
      var URL = window.URL || window.webkitURL;
      return URL ? URL.createObjectURL(file) : '';
    };

    var getThumbnail = function getThumbnail(file, opts, callback) {
      var canvas = document.createElement('canvas');
      var context = canvas.getContext('2d');
      var img = new Image();
      var isString = typeof file === 'string';

      img.onload = function (evt) {
        var pos = calcPosition(img.width, img.height, opts);
        canvas.width = pos.w > opts.maxWidth ? opts.maxWidth : pos.w;
        canvas.height = pos.h > opts.maxHeight ? opts.maxHeight : pos.h;
        context.drawImage(img, pos.x, pos.y, pos.w, pos.h);
        var base64 = canvas.toDataURL(typeof file === 'string' ? 'image/jpg' : file.type, opts.quality);
        var reg = /data:image\/[^;]+;base64,/;
        base64 = base64.replace(reg, '');
        callback(base64);
      };

      img.src = isString ? 'data:image/jpg;base64,' + file : getBlobUrl(file);
    };

    var _compress = function _compress(data, callback) {
      var file = data.file;
      var opts = data.compress;
      getThumbnail(file, opts, callback);
    };

    var _init = function _init(config, callback) {
      if (config.getToken) {
        config.getToken(function (token, data) {
          data = data || {};
          config.multi_parmas || (config.multi_parmas = {});
          config.multi_parmas.token = token;
          config.uploadHost || (config.uploadHost = {});
          config.uploadHost.bos = data.bos;
          config.ossConfig = data.ossConfig;
          config.bosHeader || (config.bosHeader = {});
          config.bosHeader.bosDate = data.bosDate;
          config.bosHeader.bosToken = data.bosToken;
          config.bosUploadPath = data.path;
          config.aliHeader = {};
          config.aliHeader.osskeyId = data.osskeyId;
          config.aliHeader.ossPolicy = data.ossPolicy;
          config.aliHeader.ossSign = data.ossSign;
          config.ossBucketName = data.ossBucketName;
          config.uploadFileName = data.fileName;
          config.s3Header = {};
          config.s3Header.s3Credential = data.s3Credential;
          config.s3Header.s3Algorithm = data.s3Algorithm;
          config.s3Header.s3Date = data.s3Date;
          config.s3Header.s3Policy = data.s3Policy;
          config.s3Header.s3Signature = data.s3Signature;
          config.s3BucketName = data.s3BucketName;
          config.stcHeader = {};
          config.stcHeader.stcAuthorization = data.stcAuthorization;
          config.stcHeader.stcContentSha256 = data.stcContentSha256;
          config.stcHeader.stcDate = data.stcDate;
          config.stcBucketName = data.stcBucketName;
          config.headers || (config.headers = {});

          if (config.base64) {
            config.headers['Content-type'] = 'application/octet-stream';
            config.headers.Authorization = 'UpToken ' + token;
          }

          console.log('data', data);
          var instance = UploadFile.init(config);
          callback(instance);
        });
      } else {
        config.headers || (config.headers = {});

        if (config.base64) {
          config.headers['Content-type'] = 'application/octet-stream';
        }

        var instance = UploadFile.init(config);
        callback(instance);
      }
    };

    var _upload = function _upload(data, instance, callback) {
      instance.upload(data.file, {
        onError: function onError(errorCode) {
          callback.onError(errorCode);
        },
        onProgress: function onProgress(loaded, total) {
          callback.onProgress(loaded, total);
        },
        onCompleted: function onCompleted(result) {
          result.filename || (result.filename = result.hash);
          var compress = data.compressThumbnail || _compress;

          if (data.compress) {
            compress(data, function (thumbnail) {
              result.thumbnail = thumbnail;
              callback.onCompleted(result);
            });
          } else {
            callback.onCompleted(result);
          }
        }
      });
    };

    var File = function () {
      function File(instance) {
        this.instance = instance;
      }

      File.prototype.upload = function (file, callback) {
        var data = {
          file: file
        };

        _upload(data, this.instance, callback);
      };

      File.prototype.cancel = function () {
        this.instance.cancel();
      };

      return File;
    }();

    var initFile = function initFile(config, callback) {
      _init(config, function (instance) {
        var uploadFile = new File(instance);
        callback(uploadFile);
      });
    };

    var Img = function () {
      function Img(instance, cfg) {
        this.instance = instance;
        this.cfg = cfg;
      }

      Img.prototype.upload = function (file, callback) {
        var data = {
          file: file,
          compress: this.cfg
        };

        _upload(data, this.instance, callback);
      };

      Img.prototype.cancel = function () {
        this.instance.cancel();
      };

      return Img;
    }();

    var initImage = function initImage(config, callback) {
      _init(config, function (instance) {
        var _a, _b, _c, _d;

        var compress = {
          maxHeight: ((_a = config.thumbnailConfig) === null || _a === void 0 ? void 0 : _a.maxHeight) || 160,
          maxWidth: ((_b = config.thumbnailConfig) === null || _b === void 0 ? void 0 : _b.maxWidth) || 160,
          quality: ((_c = config.thumbnailConfig) === null || _c === void 0 ? void 0 : _c.quality) || 0.5,
          scale: ((_d = config.thumbnailConfig) === null || _d === void 0 ? void 0 : _d.scale) || 2.4
        };
        var uploadImage = new Img(instance, compress);
        callback(uploadImage);
      });
    };

    var initImgBase64 = function initImgBase64(config, callback) {
      config.base64 = true;
      initImage(config, callback);
    };

    var uploadClient = {
      initFile: initFile,
      initImage: initImage,
      initImgBase64: initImgBase64,
      dataType: UploadFile.dataType
    };

    var audioCtx;
    var qiniuDomian;

    function upload(file, type, callbacks, uploadOption) {
      var _this = this;

      if (type === void 0) {
        type = FileType$1.FILE;
      }

      var fileType;

      if (type === FileType$1.IMAGE) {
        fileType = FileType$1.IMAGE;
      } else {
        fileType = FileType$1.FILE;
      }

      if (!qiniuDomian) {
        qiniuDomian = 'upload.qiniup.com';
        var naviInfo = IMClient.imClient.context.getInfoFromCache();

        if (naviInfo && naviInfo.ossConfig) {
          try {
            var ossConfig = JSON.parse(naviInfo.ossConfig);
            var qiniuConfig = ossConfig.find(function (one) {
              return one.qiniu !== undefined;
            });

            if (qiniuConfig) {
              qiniuDomian = qiniuConfig.qiniu;
            }
          } catch (e) {}
        }
      }

      var uploadConfig = __assign({
        domain: qiniuDomian,
        getToken: function getToken(callback) {
          IMClient.imClient.context.getFileToken(fileType).then(function (data) {
            callback(data.token, data);
          })["catch"](function (error) {
            callbacks.onFail(error);
          });
        }
      }, uploadOption);

      var action;

      if (fileType === FileType$1.IMAGE) {
        action = uploadClient.initImage;
      } else {
        action = uploadClient.initFile;
      }

      action(uploadConfig, function (uploadFile) {
        uploadFile.upload(file, {
          onProgress: function onProgress(loaded, total) {
            var _a;

            var percent = Math.floor(loaded / total * 100);
            (_a = callbacks.onProgress) === null || _a === void 0 ? void 0 : _a.call(callbacks, percent);
          },
          onCompleted: function onCompleted(data) {
            return __awaiter(_this, void 0, void 0, function () {
              var _this = this;

              return __generator(this, function (_a) {
                getFileUrl(fileType, data.filename, data.name, data, data.uploadMethod).then(function (response) {
                  return __awaiter(_this, void 0, void 0, function () {
                    var result, reader_1;
                    return __generator(this, function (_a) {
                      if (response.code !== 0) {
                        callbacks.onFail(response);
                        return [2];
                      }

                      result = response.data;
                      result.type = file.type;
                      result.name = data.name || data.filename;

                      if (type === FileType$1.AUDIO) {
                        if (typeof file.arrayBuffer === 'function') {
                          file.arrayBuffer().then(getAudioInfo).then(function (audioInfo) {
                            Object.assign(result, audioInfo);
                            callbacks.onSuccess(result);
                          }, function () {
                            callbacks.onSuccess(result);
                          });
                        } else {
                          reader_1 = new FileReader();

                          reader_1.onload = function () {
                            if (reader_1.result) {
                              getAudioInfo(reader_1.result).then(function (audioInfo) {
                                Object.assign(result, audioInfo);
                                callbacks.onSuccess(result);
                              }, function () {
                                callbacks.onSuccess(result);
                              });
                            } else {
                              callbacks.onSuccess(result);
                            }
                          };

                          reader_1.onerror = function () {
                            result.duration = 0;
                            callbacks.onSuccess(result);
                          };

                          reader_1.readAsArrayBuffer(file);
                        }

                        return [2];
                      } else if (fileType === FileType$1.IMAGE) {
                        result.thumbnail = data.thumbnail;
                      }

                      callbacks.onSuccess(result);
                      return [2];
                    });
                  });
                })["catch"](function (error) {
                  callbacks.onFail(error);
                });
                return [2];
              });
            });
          },
          onError: function onError(error) {
            callbacks.onFail(error);
          }
        });
      });
    }

    function getAudioInfo(buffer) {
      audioCtx = audioCtx || new AudioContext();
      return new Promise(function (resolve, reject) {
        audioCtx.decodeAudioData(buffer, function (audioBuffer) {
          resolve({
            duration: audioBuffer.duration,
            length: audioBuffer.length
          });
        }, reject);
      });
    }

    function getFileToken(fileType, fileName, httpMethod, queryString) {
      return new Promise(function (resolve) {
        IMClient.imClient.context.getFileToken(fileType, fileName, httpMethod, queryString).then(function (data) {
          resolve({
            code: ErrorCode$1.SUCCESS,
            data: data
          });
        })["catch"](function (code) {
          resolve({
            code: code,
            msg: ERROR_CODE[code]
          });
        });
      });
    }
    function getFileUrl(fileType, filename, saveName, uploadRes, serverType) {
      assert('fileType', fileType, isValidFileType, true);
      assert('filename', filename, AssertRules.STRING);
      assert('saveName', saveName, AssertRules.STRING);
      assert('serverType', serverType, AssertRules.NUMBER);
      return new Promise(function (resolve) {
        IMClient.imClient.context.getFileUrl(fileType, filename, saveName, uploadRes, serverType).then(function (data) {
          resolve({
            code: ErrorCode$1.SUCCESS,
            data: data
          });
        })["catch"](function (code) {
          resolve({
            code: code
          });
        });
      });
    }

    function sendMessage(conversation, message, options) {
      return __awaiter(this, void 0, void 0, function () {
        var conversationType, targetId, channelId, paramsStr, messageOptions, _a, code, data, receivedMessage, msg;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              options = options || {};

              if (message instanceof BaseMessage === false) {
                logger.warn('send message fail -> message parameter is not an instance of BaseMessage');
                return [2, ERROR_INFO.ILLGAL_PARAMS];
              }

              assert('conversation', conversation, AssertRules.OBJECT, true);
              conversationType = conversation.conversationType, targetId = conversation.targetId, channelId = conversation.channelId;
              assert('conversation.targetId', targetId, AssertRules.STRING, true);
              assert('conversation.conversationType', conversationType, AssertRules.NUMBER);
              assert('conversation.channelId', channelId, AssertRules.CHANNEL_ID);
              assert('options.isStatusMessage', options === null || options === void 0 ? void 0 : options.isStatusMessage, AssertRules.BOOLEAN);
              assert('options.disableNotification', options === null || options === void 0 ? void 0 : options.disableNotification, AssertRules.BOOLEAN);
              assert('options.pushContent', options === null || options === void 0 ? void 0 : options.pushContent, AssertRules.STRING);
              assert('options.pushData', options === null || options === void 0 ? void 0 : options.pushData, AssertRules.STRING);
              assert('options.isMentioned', options === null || options === void 0 ? void 0 : options.isMentioned, AssertRules.BOOLEAN);
              assert('options.mentionedType', options === null || options === void 0 ? void 0 : options.mentionedType, AssertRules.NUMBER);
              assert('options.mentionedUserIdList', options === null || options === void 0 ? void 0 : options.mentionedUserIdList, AssertRules.ARRAY);
              assert('options.directionalUserIdList', options === null || options === void 0 ? void 0 : options.directionalUserIdList, AssertRules.ARRAY);
              assert('options.isVoipPush', options === null || options === void 0 ? void 0 : options.isVoipPush, AssertRules.BOOLEAN);
              assert('options.canIncludeExpansion', options === null || options === void 0 ? void 0 : options.canIncludeExpansion, AssertRules.BOOLEAN);
              assert('options.expansion', options === null || options === void 0 ? void 0 : options.expansion, AssertRules.OBJECT);
              assert('options.pushConfig', options === null || options === void 0 ? void 0 : options.pushConfig, AssertRules.OBJECT);
              paramsStr = 'conversationType:' + conversationType + ',targetId:' + targetId;
              logger.debug('send message  ->' + paramsStr);
              messageOptions = Object.assign(options, message);
              messageOptions.channelId = channelId || '';
              return [4, IMClient.imClient.context.sendMessage(conversationType, targetId, messageOptions)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                receivedMessage = tranReceivedMessage(data);
                return [2, {
                  code: code,
                  data: receivedMessage
                }];
              }

              logger.warn('send message fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
              msg = {
                isMentioned: !!options.isMentioned,
                content: message.content,
                messageType: message.messageType,
                isPersited: message.isPersited || false,
                isCounted: message.isCounted || false,
                disableNotification: !!(options === null || options === void 0 ? void 0 : options.disableNotification),
                canIncludeExpansion: !!(options === null || options === void 0 ? void 0 : options.canIncludeExpansion),
                expansion: (options === null || options === void 0 ? void 0 : options.expansion) || null,
                conversationType: conversation.conversationType,
                targetId: conversation.targetId,
                channelId: conversation.channelId,
                senderUserId: IMClient.imClient.context.getCurrentUserId(),
                messageUId: '',
                messageDirection: MessageDirection$1.SEND,
                sentTime: (data === null || data === void 0 ? void 0 : data.sentTime) || 0,
                receivedTime: 0,
                isStatusMessage: options.isStatusMessage || false,
                receivedStatus: ReceivedStatus$1.UNREAD,
                isOffLineMessage: false
              };
              if (conversationType !== ConversationType$1.ULTRA_GROUP) msg.isOffLineMessage = false;
              return [2, {
                code: code,
                msg: ERROR_CODE[code],
                data: tranReceivedMessage(msg)
              }];
          }
        });
      });
    }
    function sendTextMessage(conversation, messageBody, options) {
      var message = new TextMessage(messageBody);
      return sendMessage(conversation, message, options);
    }

    function createSendFunction(fileType, msgCreator) {
      return function (conversation, msgBody, hooks, sendOptions) {
        assert('sendOptions.contentDisposition', sendOptions === null || sendOptions === void 0 ? void 0 : sendOptions.contentDisposition, function (value) {
          return ['inline', 'attachment'].includes(value);
        });
        var uploadOption = {
          contentDisposition: sendOptions === null || sendOptions === void 0 ? void 0 : sendOptions.contentDisposition
        };

        if (sendOptions && 'thumbnailConfig' in sendOptions) {
          var thumbnailConfig = sendOptions === null || sendOptions === void 0 ? void 0 : sendOptions.thumbnailConfig;
          assert('sendOptions.maxHeight', thumbnailConfig === null || thumbnailConfig === void 0 ? void 0 : thumbnailConfig.maxHeight, AssertRules.NUMBER);
          assert('sendOptions.maxWidth', thumbnailConfig === null || thumbnailConfig === void 0 ? void 0 : thumbnailConfig.maxWidth, AssertRules.NUMBER);
          assert('sendOptions.quality', thumbnailConfig === null || thumbnailConfig === void 0 ? void 0 : thumbnailConfig.quality, AssertRules.NUMBER);
          assert('sendOptions.scale', thumbnailConfig === null || thumbnailConfig === void 0 ? void 0 : thumbnailConfig.scale, AssertRules.NUMBER);
          uploadOption.thumbnailConfig = thumbnailConfig;
        }

        return new Promise(function (resolve) {
          upload(msgBody.file, fileType, {
            onProgress: hooks === null || hooks === void 0 ? void 0 : hooks.onProgress,
            onSuccess: function onSuccess(resp) {
              var _a;

              var msg = ((_a = hooks === null || hooks === void 0 ? void 0 : hooks.onComplete) === null || _a === void 0 ? void 0 : _a.call(hooks, {
                url: resp.downloadUrl
              })) || msgCreator(resp, msgBody);
              sendMessage(conversation, msg, sendOptions).then(resolve);
            },
            onFail: function onFail(e) {
              resolve({
                code: ErrorCode$1.UPLOAD_FILE_FAILED,
                msg: e || ErrorCode$1[ErrorCode$1.UPLOAD_FILE_FAILED]
              });
            }
          }, uploadOption);
        });
      };
    }

    var sendFileMessage = createSendFunction(FileType$1.FILE, function (resp, msgBody) {
      return new FileMessage({
        name: resp.name,
        size: msgBody.file.size,
        type: msgBody.file.type,
        fileUrl: resp.downloadUrl,
        user: msgBody.user,
        extra: msgBody.extra
      });
    });
    var sendImageMessage = createSendFunction(FileType$1.IMAGE, function (resp, msgBody) {
      return new ImageMessage({
        content: resp.thumbnail,
        imageUri: resp.downloadUrl,
        user: msgBody.user,
        extra: msgBody.extra
      });
    });
    var sendHQVoiceMessage = createSendFunction(FileType$1.AUDIO, function (resp, msgBody) {
      return new HQVoiceMessage({
        remoteUrl: resp.downloadUrl,
        duration: resp.duration,
        type: resp.type,
        user: msgBody.user,
        extra: msgBody.extra
      });
    });
    var sendSightMessage = createSendFunction(FileType$1.SIGHT, function (resp, msgBody) {
      return new SightMessage({
        sightUrl: resp.downloadUrl,
        content: msgBody.thumbnail,
        duration: msgBody.duration,
        size: msgBody.file.size || resp.size,
        name: msgBody.name || resp.name,
        user: msgBody.user,
        extra: msgBody.extra
      });
    });
    createSendFunction(FileType$1.COMBINE_HTML, function (resp, msgBody) {
      return new CombineMessage({
        remoteUrl: resp.downloadUrl,
        nameList: msgBody.nameList,
        summaryList: msgBody.summaryList,
        conversationType: msgBody.conversationType,
        user: msgBody.user,
        extra: msgBody.extra
      });
    });
    function getHistoryMessages(conversation, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, _a, code, data, list;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.timestamp', options === null || options === void 0 ? void 0 : options.timestamp, AssertRules.NUMBER);
              assert('options.count', options === null || options === void 0 ? void 0 : options.count, AssertRules.NUMBER);
              assert('options.order', options === null || options === void 0 ? void 0 : options.order, function (value) {
                return value === 0 || value === 1;
              });
              assert('conversation.channelId', conversation === null || conversation === void 0 ? void 0 : conversation.channelId, AssertRules.CHANNEL_ID);
              paramsStr = 'conversationType:' + conversation.conversationType + ',targetId:' + conversation.targetId;
              logger.debug('get history message ->' + paramsStr);
              return [4, IMClient.imClient.context.getHistoryMessage(conversation.conversationType, conversation.targetId, options === null || options === void 0 ? void 0 : options.timestamp, options === null || options === void 0 ? void 0 : options.count, options === null || options === void 0 ? void 0 : options.order, conversation === null || conversation === void 0 ? void 0 : conversation.channelId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS && data) {
                list = data.list.map(function (item) {
                  return tranReceivedMessage(item);
                });
                return [2, {
                  code: code,
                  data: {
                    list: list,
                    hasMore: data.hasMore
                  }
                }];
              }

              logger.warn('get history message fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getRemoteHistoryMessages(conversation, options) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, _a, code, data, list;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.timestamp', options === null || options === void 0 ? void 0 : options.timestamp, AssertRules.NUMBER);
              assert('options.count', options === null || options === void 0 ? void 0 : options.count, AssertRules.NUMBER);
              assert('options.order', options === null || options === void 0 ? void 0 : options.order, function (value) {
                return value === 0 || value === 1;
              });
              assert('conversation.channelId', conversation === null || conversation === void 0 ? void 0 : conversation.channelId, AssertRules.CHANNEL_ID);
              paramsStr = 'conversationType:' + conversation.conversationType + ',targetId:' + conversation.targetId;
              logger.debug('get history message ->' + paramsStr);
              return [4, IMClient.imClient.context.getRemoteHistoryMessages(conversation.conversationType, conversation.targetId, (options === null || options === void 0 ? void 0 : options.timestamp) || 0, (options === null || options === void 0 ? void 0 : options.count) || 20, (options === null || options === void 0 ? void 0 : options.order) || 0, conversation.channelId || '')];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS && data) {
                list = data.list.map(function (item) {
                  return tranReceivedMessage(item);
                });
                return [2, {
                  code: code,
                  data: {
                    list: list,
                    hasMore: data.hasMore
                  }
                }];
              }

              logger.warn('get history message fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function sendReadReceiptMessage(targetId, messageUId, timestamp, channelId) {
      return __awaiter(this, void 0, void 0, function () {
        var conversation, message, _a, code, msg;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              conversation = {
                targetId: targetId,
                conversationType: ConversationType$1.PRIVATE,
                channelId: channelId
              };
              message = new BaseMessage('RC:ReadNtf', {
                messageUId: messageUId,
                lastMessageSendTime: timestamp,
                type: 1
              });
              return [4, sendMessage(conversation, message)];

            case 1:
              _a = _b.sent(), code = _a.code, msg = _a.msg;

              if (code === 0) {
                return [2, {
                  code: code
                }];
              }

              return [2, {
                code: code,
                msg: msg
              }];
          }
        });
      });
    }
    function sendReadReceiptRequest(targetId, messageUId, channelId) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, message, conversation, _a, code, msg;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('messageUId', messageUId, AssertRules.STRING, true);
              assert('channelId', channelId, AssertRules.CHANNEL_ID);
              paramsStr = 'messageUId:' + messageUId + ',targetId:' + targetId;
              logger.debug('send read receipt message ->' + paramsStr);
              message = new BaseMessage('RC:RRReqMsg', {
                messageUId: messageUId
              });
              conversation = {
                targetId: targetId,
                conversationType: ConversationType$1.GROUP,
                channelId: channelId
              };
              return [4, sendMessage(conversation, message)];

            case 1:
              _a = _b.sent(), code = _a.code, msg = _a.msg;

              if (code === 0) {
                return [2, {
                  code: code
                }];
              }

              return [2, {
                code: code,
                msg: msg
              }];
          }
        });
      });
    }
    function sendReadReceiptResponse(targetId, messageUIds, channelId) {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
          throw new Error('This method is deprecated, please use method sendReadReceiptResponseV2.');
        });
      });
    }
    function sendReadReceiptResponseV2(targetId, messageList, channelId) {
      return __awaiter(this, void 0, void 0, function () {
        var conversation, result, naviInfo, grpRRVer, message, messageUIds_1, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('targetId', targetId, AssertRules.STRING, true);
              assert('messageList', messageList, AssertRules.OBJECT, true);
              assert('channelId', channelId, AssertRules.CHANNEL_ID);
              Object.keys(messageList).forEach(function (key) {
                assert(key, messageList[key], AssertRules.ARRAY);
              });
              conversation = {
                targetId: targetId,
                conversationType: ConversationType$1.GROUP,
                channelId: channelId
              };
              naviInfo = IMClient.imClient.context.getInfoFromCache();
              grpRRVer = (naviInfo === null || naviInfo === void 0 ? void 0 : naviInfo.grpRRVer) || 0;
              if (!(grpRRVer === 0)) return [3, 2];
              message = new BaseMessage('RC:RRRspMsg', {
                receiptMessageDic: messageList
              });
              return [4, sendMessage(conversation, message)];

            case 1:
              result = _a.sent();
              return [3, 4];

            case 2:
              if (!(grpRRVer === 1)) return [3, 4];
              messageUIds_1 = [];
              Object.keys(messageList).forEach(function (key) {
                messageList[key].forEach(function (messageUId) {
                  if (messageUIds_1.indexOf(messageUId) === -1) {
                    messageUIds_1.push(messageUId);
                  }
                });
              });

              if (!messageUIds_1.length) {
                logger.warn('Error in parameter messageList.');
                return [2, {
                  code: ErrorCode$1.PARAMETER_ERROR
                }];
              }

              return [4, IMClient.imClient.context.sendReadReceiptMessage(targetId, messageUIds_1, channelId)];

            case 3:
              result = _a.sent();
              _a.label = 4;

            case 4:
              code = result.code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('send read receipt message fail ->' + code + ':' + ERROR_CODE[code]);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function sendSyncReadStatusMessage(conversation, lastMessageSendTime) {
      return __awaiter(this, void 0, void 0, function () {
        var message, _a, code, msg;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('conversation.type', conversation.conversationType, AssertRules.NUMBER, true);
              assert('conversation.targetId', conversation.targetId, AssertRules.STRING, true);
              assert('lastMessageSendTime', lastMessageSendTime, AssertRules.NUMBER, true);
              assert('conversation.channelId', conversation === null || conversation === void 0 ? void 0 : conversation.channelId, AssertRules.CHANNEL_ID);
              message = new BaseMessage('RC:SRSMsg', {
                lastMessageSendTime: lastMessageSendTime
              });
              return [4, sendMessage(conversation, message)];

            case 1:
              _a = _b.sent(), code = _a.code, msg = _a.msg;

              if (code === 0) {
                return [2, {
                  code: code
                }];
              }

              return [2, {
                code: code,
                msg: msg
              }];
          }
        });
      });
    }
    function recallMessage(conversation, options) {
      return __awaiter(this, void 0, void 0, function () {
        var recallOptions, paramsStr, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('options.messageUId', options.messageUId, AssertRules.STRING, true);
              assert('options.sentTime', options.sentTime, AssertRules.NUMBER, true);
              assert('options.disableNotification', options === null || options === void 0 ? void 0 : options.disableNotification, AssertRules.BOOLEAN);
              assert('options.pushConfig', options === null || options === void 0 ? void 0 : options.pushConfig, AssertRules.OBJECT);
              assert('conversation.channelId', conversation === null || conversation === void 0 ? void 0 : conversation.channelId, AssertRules.CHANNEL_ID);
              recallOptions = {
                user: options.user,
                channelId: conversation.channelId || '',
                disableNotification: options === null || options === void 0 ? void 0 : options.disableNotification,
                pushConfig: options === null || options === void 0 ? void 0 : options.pushConfig,
                extra: options.extra,
                isDelete: options.isDelete
              };
              paramsStr = 'conversationType:' + conversation.conversationType + ',targetId:' + conversation.targetId + ',messageUId:' + options.messageUId;
              logger.debug('recall message ->' + paramsStr);
              return [4, IMClient.imClient.context.recallMessage(conversation.conversationType, conversation.targetId, options.messageUId, options.sentTime, recallOptions)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS && data) {
                return [2, {
                  code: code,
                  data: tranReceivedMessage(data)
                }];
              } else if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('recall message fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function deleteMessages(conversation, messages) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options', messages, function (value) {
                return isArray(value) && value.length;
              }, true);
              messages.forEach(function (item) {
                assert('options.messageUId', item.messageUId, AssertRules.STRING, true);
                assert('options.sentTime', item.sentTime, AssertRules.NUMBER, true);
                assert('options.messageDirection', item.messageDirection, function (value) {
                  return value === 1 || value === 2;
                }, true);
              });
              assert('conversation.channelId', conversation === null || conversation === void 0 ? void 0 : conversation.channelId, AssertRules.CHANNEL_ID);
              paramsStr = 'conversationType:' + conversation.conversationType + ',targetId:' + conversation.targetId;
              logger.debug('delete messages ->' + paramsStr);
              return [4, IMClient.imClient.context.deleteRemoteMessage(conversation.conversationType, conversation.targetId, messages, conversation.channelId)];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('delete message fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: ErrorCode$1.SUCCESS
              }];
          }
        });
      });
    }
    function clearHistoryMessages(conversation, timestamp) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('options.timestamp', timestamp, AssertRules.NUMBER, true);
              assert('conversation.channelId', conversation === null || conversation === void 0 ? void 0 : conversation.channelId, AssertRules.CHANNEL_ID);
              paramsStr = 'conversationType:' + conversation.conversationType + ',targetId:' + conversation.targetId;
              logger.debug('clear message ->' + paramsStr);
              return [4, IMClient.imClient.context.deleteRemoteMessageByTimestamp(conversation.conversationType, conversation.targetId, timestamp, conversation.channelId)];

            case 1:
              code = _a.sent();

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('clear message ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: ErrorCode$1.SUCCESS
              }];
          }
        });
      });
    }
    function updateMessageExpansion(expansion, message) {
      return __awaiter(this, void 0, void 0, function () {
        var conversationType, targetId, messageUId, canIncludeExpansion, originExpansion, channelId, paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('expansion', expansion, AssertRules.OBJECT, true);
              assert('message', message, AssertRules.OBJECT, true);
              conversationType = message.conversationType, targetId = message.targetId, messageUId = message.messageUId, canIncludeExpansion = message.canIncludeExpansion, originExpansion = message.expansion, channelId = message.channelId;
              paramsStr = 'conversationType:' + conversationType + ',targetId:' + targetId + ',messageUId:' + messageUId;
              logger.debug('update message expansion ->' + paramsStr);
              return [4, IMClient.imClient.context.sendExpansionMessage({
                conversationType: conversationType,
                targetId: targetId,
                messageUId: messageUId,
                expansion: expansion,
                canIncludeExpansion: canIncludeExpansion,
                originExpansion: originExpansion,
                channelId: channelId
              })];

            case 1:
              code = _a.sent().code;

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('update message expansion fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function removeMessageExpansionForKey(keys, message) {
      return __awaiter(this, void 0, void 0, function () {
        var conversationType, targetId, messageUId, canIncludeExpansion, channelId, paramsStr, code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('keys', keys, AssertRules.ARRAY, true);
              assert('message', message, AssertRules.OBJECT, true);
              conversationType = message.conversationType, targetId = message.targetId, messageUId = message.messageUId, canIncludeExpansion = message.canIncludeExpansion, channelId = message.channelId;
              paramsStr = 'conversationType:' + conversationType + ',targetId:' + targetId + ',messageUId:' + messageUId;
              logger.debug('remove message expansion ->' + paramsStr);
              return [4, IMClient.imClient.context.sendExpansionMessage({
                conversationType: conversationType,
                targetId: targetId,
                messageUId: messageUId,
                canIncludeExpansion: canIncludeExpansion,
                keys: keys,
                channelId: channelId
              })];

            case 1:
              code = _a.sent().code;

              if (code !== ErrorCode$1.SUCCESS) {
                logger.warn('remove message expansion fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }

              return [2, {
                code: code
              }];
          }
        });
      });
    }
    function sendTypingStatusMessage(conversation, typingContentType) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, sendOptions, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('typingContentType', typingContentType, AssertRules.STRING, true);
              paramsStr = 'conversationType:' + conversation.conversationType + ',targetId:' + conversation.targetId;
              logger.debug('send typing status message ->' + paramsStr);
              sendOptions = {
                messageType: 'RC:TypSts',
                content: {
                  typingContentType: typingContentType
                },
                isStatusMessage: true,
                channelId: conversation.channelId
              };
              return [4, IMClient.imClient.context.sendMessage(conversation.conversationType, conversation.targetId, sendOptions)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: tranReceivedMessage(data)
                }];
              }

              logger.warn('send typing status message fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getMessageReader(targetId, messageUId, channelId) {
      return __awaiter(this, void 0, void 0, function () {
        var paramsStr, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('messageUId', messageUId, AssertRules.STRING, true);
              paramsStr = 'messageUId:' + messageUId + ',targetId:' + targetId;
              logger.debug('get message reader ->' + paramsStr);
              return [4, IMClient.imClient.context.getMessageReader(targetId, messageUId, channelId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              logger.warn('get message reader fail ->' + code + ':' + ERROR_CODE[code] + ',' + paramsStr);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function registerMessageType(messageType, isPersited, isCounted, prototypes, isStatusMessage) {
      assert('messageType', messageType, AssertRules.STRING, true);
      assert('isPersited', isPersited, AssertRules.BOOLEAN, true);
      assert('isCounted', isCounted, AssertRules.BOOLEAN, true);
      assert('isStatusMessage', isStatusMessage, AssertRules.BOOLEAN, false);
      IMClient.imClient.context.registerMessageType(messageType, isPersited, isCounted, prototypes, isStatusMessage);
      return regMessage(messageType, isPersited, isCounted);
    }
    function getFirstUnreadMessage(conversation) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              if (!usingCppEngine()) {
                return [2, {
                  code: ErrorCode$1.NOT_SUPPORT,
                  msg: ERROR_CODE[ErrorCode$1.NOT_SUPPORT]
                }];
              }

              assert('conversation.conversationType', conversation.conversationType, AssertRules.NUMBER, true);
              assert('conversation.targetId', conversation.targetId, AssertRules.STRING, true);
              assert('conversation.channelId', conversation === null || conversation === void 0 ? void 0 : conversation.channelId, AssertRules.CHANNEL_ID);
              return [4, IMClient.imClient.context.getFirstUnreadMessage(conversation.conversationType, conversation.targetId, conversation.channelId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              logger.warn('insertMessage ->code:' + code + ',targetId:' + conversation.targetId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function insertMessage(conversation, content, options) {
      if (options === void 0) {
        options = {};
      }

      return __awaiter(this, void 0, void 0, function () {
        var senderUserId, messageType, msgContent, messageDirection, messageUId, canIncludeExpansion, expansion, disableNotification, sentTime, sentStatus, isUnread, searchContent, insertOptions, _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              if (!usingCppEngine()) {
                return [2, {
                  code: ErrorCode$1.NOT_SUPPORT,
                  msg: ERROR_CODE[ErrorCode$1.NOT_SUPPORT]
                }];
              }

              senderUserId = content.senderUserId, messageType = content.messageType, msgContent = content.content, messageDirection = content.messageDirection, messageUId = content.messageUId, canIncludeExpansion = content.canIncludeExpansion, expansion = content.expansion, disableNotification = content.disableNotification, sentTime = content.sentTime, sentStatus = content.sentStatus;
              logger.info('insertMessage ->targetId:' + conversation.targetId + ',conversationType:' + conversation.conversationType);
              isUnread = options.isUnread, searchContent = options.searchContent;
              insertOptions = {
                senderUserId: senderUserId,
                messageType: messageType,
                content: msgContent,
                messageDirection: messageDirection,
                sentTime: sentTime,
                sentStatus: sentStatus,
                searchContent: searchContent,
                isUnread: isUnread,
                messageUId: messageUId,
                disableNotification: disableNotification,
                canIncludeExpansion: canIncludeExpansion,
                expansionMsg: JSON.stringify(expansion),
                channelId: conversation.channelId || ''
              };
              return [4, IMClient.imClient.context.insertMessage(conversation.conversationType, conversation.targetId, insertOptions)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: tranReceivedMessage(data)
                }];
              }

              logger.warn('insertMessage ->code:' + code + ',targetId:' + conversation.targetId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getMessage(messageId) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              if (!usingCppEngine()) {
                return [2, {
                  code: ErrorCode$1.NOT_SUPPORT,
                  msg: ERROR_CODE[ErrorCode$1.NOT_SUPPORT]
                }];
              }

              return [4, IMClient.imClient.context.getMessage(messageId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: tranReceivedMessage(data)
                }];
              }

              logger.warn('getMessage ->code:' + code + ',messageId:' + messageId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getUnreadMentionedMessages(conversation) {
      if (!usingCppEngine()) {
        return {
          code: ErrorCode$1.NOT_SUPPORT,
          msg: ERROR_CODE[ErrorCode$1.NOT_SUPPORT]
        };
      }

      assert('conversationType', conversation.conversationType, AssertRules.NUMBER, true);
      assert('targetId', conversation.targetId, AssertRules.STRING, true);
      var messages = IMClient.imClient.context.getUnreadMentionedMessages(conversation.conversationType, conversation.targetId);
      var data = [];

      if (messages && messages.length) {
        messages.forEach(function (one) {
          return data.push(tranReceivedMessage(one));
        });
      }

      return {
        code: ErrorCode$1.SUCCESS,
        data: data
      };
    }
    function searchMessages(conversation, keyword, timestamp, count) {
      return __awaiter(this, void 0, void 0, function () {
        var total, _a, code, data, messages_1;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              if (!usingCppEngine()) {
                return [2, {
                  code: ErrorCode$1.NOT_SUPPORT,
                  msg: ERROR_CODE[ErrorCode$1.NOT_SUPPORT]
                }];
              }

              assert('conversationType', conversation.conversationType, AssertRules.NUMBER, true);
              assert('targetId', conversation.targetId, AssertRules.STRING, true);
              assert('keyword', keyword, AssertRules.STRING, true);
              assert('timestamp', timestamp, AssertRules.NUMBER);
              assert('count', count, AssertRules.NUMBER);
              total = 1;
              return [4, IMClient.imClient.context.searchMessageByContent(conversation.conversationType, conversation.targetId, keyword, timestamp, count, total, conversation.channelId)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                messages_1 = [];

                if ((data === null || data === void 0 ? void 0 : data.messages) && data.messages.length) {
                  data.messages.forEach(function (one) {
                    return messages_1.push(tranReceivedMessage(one));
                  });
                }

                return [2, {
                  code: code,
                  data: {
                    messages: messages_1,
                    count: data === null || data === void 0 ? void 0 : data.count
                  }
                }];
              }

              logger.warn('searchMessages ->code:' + code + ',targetId:' + conversation.targetId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function deleteLocalMessagesByTimestamp(conversation, timestamp, cleanSpace) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!usingCppEngine()) {
                return [2, {
                  code: ErrorCode$1.NOT_SUPPORT,
                  msg: ERROR_CODE[ErrorCode$1.NOT_SUPPORT]
                }];
              }

              assert('conversationType', conversation.conversationType, AssertRules.NUMBER, true);
              assert('targetId', conversation.targetId, AssertRules.STRING, true);
              assert('timestamp', timestamp, AssertRules.NUMBER, true);
              assert('cleanSpace', cleanSpace, AssertRules.BOOLEAN);
              return [4, IMClient.imClient.context.deleteMessagesByTimestamp(conversation.conversationType, conversation.targetId, timestamp, cleanSpace, conversation.channelId)];

            case 1:
              code = _a.sent();

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('deleteLocalMessagesByTimestamp ->code:' + code + ',targetId:' + conversation.targetId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function clearMessages(conversation) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!usingCppEngine()) {
                return [2, {
                  code: ErrorCode$1.NOT_SUPPORT,
                  msg: ERROR_CODE[ErrorCode$1.NOT_SUPPORT]
                }];
              }

              logger.info('clearMessages ->targetId:' + conversation.targetId + ',conversationType:' + conversation.conversationType);
              return [4, IMClient.imClient.context.clearMessages(conversation.conversationType, conversation.targetId, conversation.channelId)];

            case 1:
              code = _a.sent();

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('clearMessages ->code:' + code + ',targetId:' + conversation.targetId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function searchConversationByContent(keyword, conversationTypes, customMessageType, channelId) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              if (!usingCppEngine()) {
                return [2, {
                  code: ErrorCode$1.NOT_SUPPORT,
                  msg: ERROR_CODE[ErrorCode$1.NOT_SUPPORT]
                }];
              }

              logger.info('searchConversationByContent ->keyword:' + keyword);
              return [4, IMClient.imClient.context.searchConversationByContent(keyword, customMessageType, channelId, conversationTypes)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              } else {
                logger.warn('searchConversationByContent ->code:' + code + ',keyword:' + keyword);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }
          }
        });
      });
    }
    function clearUnreadCountByTimestamp(conversation, timestamp) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!usingCppEngine()) {
                return [2, {
                  code: ErrorCode$1.NOT_SUPPORT,
                  msg: ERROR_CODE[ErrorCode$1.NOT_SUPPORT]
                }];
              }

              logger.info('clearUnreadCountByTimestamp ->targetId:' + conversation.targetId + ',conversationType:' + conversation.conversationType);
              return [4, IMClient.imClient.context.clearUnreadCountByTimestamp(conversation.conversationType, conversation.targetId, timestamp, conversation.channelId)];

            case 1:
              code = _a.sent();

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('clearUnreadCountByTimestamp ->code:' + code + ',targetId:' + conversation.targetId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function setMessageReceivedStatus(messageId, receivedStatus) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!usingCppEngine()) {
                return [2, {
                  code: ErrorCode$1.NOT_SUPPORT,
                  msg: ERROR_CODE[ErrorCode$1.NOT_SUPPORT]
                }];
              }

              assert('messageId', messageId, AssertRules.NUMBER, true);
              assert('receivedStatus', receivedStatus, AssertRules.NUMBER, true);
              logger.info('setMessageReceivedStatus ->messageId:' + messageId + ',receivedStatus:' + receivedStatus);
              return [4, IMClient.imClient.context.setMessageReceivedStatus(messageId, receivedStatus)];

            case 1:
              code = _a.sent();

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              } else {
                logger.warn('setMessageReceivedStatus ->code:' + code + ',messageId:' + messageId);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }
          }
        });
      });
    }

    function addTag(tag) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('tag.tagId', tag.tagId, AssertRules.STRING, true);
              assert('tag.tagId', tag.tagId, function (val) {
                return val.length <= 10;
              });
              assert('tag.tagName', tag.tagName, function (val) {
                return val.length <= 15;
              });
              assert('tag.tagName', tag.tagName, AssertRules.STRING, true);
              logger.info('createTag ->tagId:' + tag.tagId + ',tagName:' + tag.tagName);
              return [4, IMClient.imClient.context.createTag(tag)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('createTag ->code:' + code + ',tagId:' + tag.tagId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function removeTag(tagId) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('tagId', tagId, AssertRules.STRING, true);
              logger.info('removeTag ->tagId:' + tagId);
              return [4, IMClient.imClient.context.removeTag(tagId)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('removeTag ->code:' + code + ',tagId:' + tagId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function updateTag(tag) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('tag.tagId', tag.tagId, AssertRules.STRING, true);
              assert('tag.tagName', tag.tagName, AssertRules.STRING, true);
              assert('tag.tagName', tag.tagName, function (val) {
                return val.length <= 15;
              });
              logger.info('updateTag ->tagId:' + tag.tagId + ',tagName:' + tag.tagName);
              return [4, IMClient.imClient.context.updateTag(tag)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('updateTag ->code:' + code + ',tagId:' + tag.tagId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getTags() {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4, IMClient.imClient.context.getTagList()];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: ErrorCode$1.SUCCESS,
                  data: data
                }];
              }

              logger.warn('getTagList ->code:' + code);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getTagsFromConversation(conversation) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('conversationType', conversation.conversationType, AssertRules.NUMBER);
              assert('targetId', conversation.targetId, AssertRules.STRING);
              assert('channelId', conversation.channelId, AssertRules.CHANNEL_ID);
              logger.info('getTagsForConversation ->targetId:' + conversation.targetId + ',conversationType:' + conversation.conversationType);
              return [4, IMClient.imClient.context.getTagsForConversation(conversation)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function addConversationsToTag(tagId, conversations) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('tagId', tagId, AssertRules.STRING, true);
              assert('conversations', conversations, AssertRules.ARRAY, true);
              conversations.forEach(function (item) {
                assert('conversation.conversationType', item.conversationType, AssertRules.NUMBER, true);
                assert('conversation.targetId', item.targetId, AssertRules.STRING, true);
                assert('conversation.channelId', item.channelId, AssertRules.CHANNEL_ID);
              });
              logger.info('addTagForConversations ->tagId:' + tagId);
              return [4, IMClient.imClient.context.addTagForConversations(tagId, conversations)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('addTagForConversations ->code:' + code + ',tagId:' + tagId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function removeConversationsFromTag(tagId, conversations) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('tagId', tagId, AssertRules.STRING, true);
              assert('conversations', conversations, AssertRules.ARRAY, true);
              conversations.forEach(function (item) {
                assert('conversation.conversationType', item.conversationType, AssertRules.NUMBER, true);
                assert('conversation.targetId', item.targetId, AssertRules.STRING, true);
                assert('conversation.channelId', item.channelId, AssertRules.CHANNEL_ID);
              });
              logger.info('removeTagForConversations ->tagId:' + tagId);
              return [4, IMClient.imClient.context.removeTagForConversations(tagId, conversations)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('removeTagForConversations ->code:' + code + ',tagId:' + tagId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function removeTagsFromConversation(conversation, tagIds) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('conversation.conversationType', conversation.conversationType, AssertRules.NUMBER, true);
              assert('conversation.targetId', conversation.targetId, AssertRules.STRING, true);
              assert('conversation.channelId', conversation.channelId, AssertRules.CHANNEL_ID);
              assert('tagIds', tagIds, AssertRules.ARRAY, true);
              tagIds.forEach(function (item) {
                assert('tagId', item, AssertRules.STRING, true);
              });
              logger.info('removeTagsForConversation ->tagIds:' + tagIds + ',targetId:' + conversation.targetId + ',conversationType:' + conversation.conversationType);
              return [4, IMClient.imClient.context.removeTagsForConversation(conversation, tagIds)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('removeTagsForConversation ->code:' + code + ',tagIds:' + tagIds);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function removeTagFromConversations(tagId, conversations) {
      return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              assert('tagId', tagId, AssertRules.STRING, true);
              assert('conversations', conversations, AssertRules.ARRAY, true);
              conversations.forEach(function (item) {
                assert('conversation.conversationType', item.conversationType, AssertRules.NUMBER, true);
                assert('conversation.targetId', item.targetId, AssertRules.STRING, true);
                assert('conversation.channelId', item.channelId, AssertRules.CHANNEL_ID);
              });
              logger.info('removeTagForConversations ->tagId:' + tagId);
              return [4, IMClient.imClient.context.removeTagForConversations(tagId, conversations)];

            case 1:
              code = _a.sent().code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('removeTagForConversations ->code:' + code + ',tagId:' + tagId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getConversationsFromTagByPage(tagId, count, startTime) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('tagId', tagId, AssertRules.STRING, true);
              assert('count', count, AssertRules.NUMBER, true);
              assert('startTime', startTime, AssertRules.NUMBER, true);
              logger.info('getConversationListByTag ->tagId:' + tagId);
              return [4, IMClient.imClient.context.getConversationListByTag(tagId, startTime, count)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              }

              logger.warn('getConversationListByTag ->code:' + code + ',tagId:' + tagId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }
    function getUnreadCountByTag(tagId, containMuted) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code, data;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('tagId', tagId, AssertRules.STRING, true);
              assert('containMuted', containMuted, AssertRules.BOOLEAN, true);
              logger.info('getUnreadCountByTag ->tagId:' + tagId);
              return [4, IMClient.imClient.context.getUnreadCountByTag(tagId, containMuted)];

            case 1:
              _a = _b.sent(), code = _a.code, data = _a.data;
              logger.info(code, data);

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code,
                  data: data
                }];
              } else {
                logger.warn('getUnreadCountByTag ->code:' + code + ',tagId:' + tagId);
                return [2, {
                  code: code,
                  msg: ERROR_CODE[code]
                }];
              }
          }
        });
      });
    }
    function setConversationToTopInTag(tagId, conversation, isTop) {
      return __awaiter(this, void 0, void 0, function () {
        var _a, code;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              assert('tagId', tagId, AssertRules.STRING, true);
              assert('conversation.targetId', conversation.targetId, AssertRules.STRING, true);
              assert('conversation.conversationType', conversation.conversationType, AssertRules.NUMBER, true);
              assert('conversation.channelId', conversation.channelId, AssertRules.CHANNEL_ID);
              assert('status.isTop', isTop, AssertRules.BOOLEAN, true);
              logger.info('setConversationStatusInTag ->tagId:' + tagId + ',targetId:' + conversation.targetId + ',conversationType' + conversation.conversationType);
              return [4, IMClient.imClient.context.setConversationStatusInTag(tagId, conversation, {
                isTop: isTop
              })];

            case 1:
              _a = _b.sent(), code = _a.code;

              if (code === ErrorCode$1.SUCCESS) {
                return [2, {
                  code: code
                }];
              }

              logger.warn('setConversationStatusInTag ->code:' + code + ',tagId:' + tagId);
              return [2, {
                code: code,
                msg: ERROR_CODE[code]
              }];
          }
        });
      });
    }

    var ConnectType = {
      COMET: 'comet',
      WEBSOCKET: 'websocket'
    };
    var MessageType = {
      TEXT: 'RC:TxtMsg',
      VOICE: 'RC:VcMsg',
      HQ_VOICE: 'RC:HQVCMsg',
      IMAGE: 'RC:ImgMsg',
      GIF: 'RC:GIFMsg',
      RICH_CONTENT: 'RC:ImgTextMsg',
      LOCATION: 'RC:LBSMsg',
      FILE: 'RC:FileMsg',
      SIGHT: 'RC:SightMsg',
      COMBINE: 'RC:CombineMsg',
      CHRM_KV_NOTIFY: 'RC:chrmKVNotiMsg',
      LOG_COMMAND: 'RC:LogCmdMsg',
      EXPANSION_NOTIFY: 'RC:MsgExMsg',
      REFERENCE: 'RC:ReferenceMsg',
      RECALL_MESSAGE_TYPE: 'RC:RcCmd'
    };

    VersionManage.add('imlib-next', "5.3.2");

    exports.BaseMessage = BaseMessage;
    exports.CombineMessage = CombineMessage;
    exports.ConnectType = ConnectType;
    exports.ConnectionStatus = ConnectionStatus$1;
    exports.ConversationType = ConversationType$1;
    exports.ErrorCode = ErrorCode$1;
    exports.FileMessage = FileMessage;
    exports.GIFMessage = GIFMessage;
    exports.HQVoiceMessage = HQVoiceMessage;
    exports.ImageMessage = ImageMessage;
    exports.LocationMessage = LocationMessage;
    exports.MentionedType = MentionedType$1;
    exports.MessageBlockType = MessageBlockType$1;
    exports.MessageDirection = MessageDirection$1;
    exports.MessageType = MessageType;
    exports.NotificationLevel = NotificationLevel$1;
    exports.NotificationStatus = NotificationStatus$1;
    exports.ReceivedStatus = ReceivedStatus$1;
    exports.ReferenceMessage = ReferenceMessage;
    exports.RichContentMessage = RichContentMessage;
    exports.SightMessage = SightMessage;
    exports.TextMessage = TextMessage;
    exports.UploadMethod = UploadMethod$1;
    exports.VoiceMessage = VoiceMessage;
    exports.__addSDKVersion = __addSDKVersion;
    exports.addConversationsToTag = addConversationsToTag;
    exports.addEventListener = addEventListener;
    exports.addTag = addTag;
    exports.bindRTCRoomForChatroom = bindRTCRoomForChatroom;
    exports.clearAllMessagesUnreadStatus = clearAllMessagesUnreadStatus;
    exports.clearEventListeners = clearEventListeners;
    exports.clearHistoryMessages = clearHistoryMessages;
    exports.clearMessages = clearMessages;
    exports.clearMessagesUnreadStatus = clearMessagesUnreadStatus;
    exports.clearTextMessageDraft = clearTextMessageDraft;
    exports.clearUnreadCountByTimestamp = clearUnreadCountByTimestamp;
    exports.connect = connect;
    exports.deleteLocalMessagesByTimestamp = deleteLocalMessagesByTimestamp;
    exports.deleteMessages = deleteMessages;
    exports.disconnect = disconnect;
    exports.forceRemoveChatRoomEntry = forceRemoveChatRoomEntry;
    exports.forceSetChatRoomEntry = forceSetChatRoomEntry;
    exports.getAllChatRoomEntries = getAllChatRoomEntries;
    exports.getAllConversationState = getAllConversationState;
    exports.getAllUltraGroupUnreadCount = getAllUltraGroupUnreadCount;
    exports.getAllUltraGroupUnreadMentionedCount = getAllUltraGroupUnreadMentionedCount;
    exports.getAllUnreadMentionedCount = getAllUnreadMentionedCount;
    exports.getBlockUltraGroupList = getBlockUltraGroupList;
    exports.getBlockedConversationList = getBlockedConversationList;
    exports.getChatRoomEntry = getChatRoomEntry;
    exports.getChatRoomInfo = getChatRoomInfo;
    exports.getChatroomHistoryMessages = getChatroomHistoryMessages;
    exports.getConnectionStatus = getConnectionStatus;
    exports.getConversation = getConversation;
    exports.getConversationList = getConversationList;
    exports.getConversationNotificationLevel = getConversationNotificationLevel;
    exports.getConversationNotificationStatus = getConversationNotificationStatus;
    exports.getConversationsFromTagByPage = getConversationsFromTagByPage;
    exports.getCurrentUserId = getCurrentUserId;
    exports.getFileToken = getFileToken;
    exports.getFileUrl = getFileUrl;
    exports.getFirstUnreadMessage = getFirstUnreadMessage;
    exports.getHistoryMessages = getHistoryMessages;
    exports.getMessage = getMessage;
    exports.getMessageReader = getMessageReader;
    exports.getRemoteHistoryMessages = getRemoteHistoryMessages;
    exports.getServerTime = getServerTime;
    exports.getTags = getTags;
    exports.getTagsFromConversation = getTagsFromConversation;
    exports.getTextMessageDraft = getTextMessageDraft;
    exports.getTopConversationList = getTopConversationList;
    exports.getTotalUnreadCount = getTotalUnreadCount;
    exports.getUltraGroupDefaultNotificationLevel = getUltraGroupDefaultNotificationLevel;
    exports.getUltraGroupList = getUltraGroupList;
    exports.getUltraGroupMessageListByMessageUId = getUltraGroupMessageListByMessageUId;
    exports.getUltraGroupUnreadCountByTargetId = getUltraGroupUnreadCountByTargetId;
    exports.getUltraGroupUnreadMentionedCountByTargetId = getUltraGroupUnreadMentionedCountByTargetId;
    exports.getUnreadCount = getUnreadCount;
    exports.getUnreadCountByTag = getUnreadCountByTag;
    exports.getUnreadMentionedCount = getUnreadMentionedCount;
    exports.getUnreadMentionedMessages = getUnreadMentionedMessages;
    exports.init = init$1;
    exports.insertMessage = insertMessage;
    exports.installPlugin = installPlugin;
    exports.joinChatRoom = joinChatRoom;
    exports.joinExistChatRoom = joinExistChatRoom;
    exports.modifyMessage = modifyMessage;
    exports.onceEventListener = onceEventListener;
    exports.quitChatRoom = quitChatRoom;
    exports.recallMessage = recallMessage;
    exports.registerMessageType = registerMessageType;
    exports.removeAllExpansionForUltraGroupMessage = removeAllExpansionForUltraGroupMessage;
    exports.removeChatRoomEntries = removeChatRoomEntries;
    exports.removeChatRoomEntry = removeChatRoomEntry;
    exports.removeConversation = removeConversation;
    exports.removeConversationsFromTag = removeConversationsFromTag;
    exports.removeEventListener = removeEventListener;
    exports.removeEventListeners = removeEventListeners;
    exports.removeExpansionForUltraGroupMessage = removeExpansionForUltraGroupMessage;
    exports.removeMessageExpansionForKey = removeMessageExpansionForKey;
    exports.removeTag = removeTag;
    exports.removeTagFromConversations = removeTagFromConversations;
    exports.removeTagsFromConversation = removeTagsFromConversation;
    exports.saveTextMessageDraft = saveTextMessageDraft;
    exports.searchConversationByContent = searchConversationByContent;
    exports.searchMessages = searchMessages;
    exports.sendFileMessage = sendFileMessage;
    exports.sendHQVoiceMessage = sendHQVoiceMessage;
    exports.sendImageMessage = sendImageMessage;
    exports.sendMessage = sendMessage;
    exports.sendReadReceiptMessage = sendReadReceiptMessage;
    exports.sendReadReceiptRequest = sendReadReceiptRequest;
    exports.sendReadReceiptResponse = sendReadReceiptResponse;
    exports.sendReadReceiptResponseV2 = sendReadReceiptResponseV2;
    exports.sendSightMessage = sendSightMessage;
    exports.sendSyncReadStatusMessage = sendSyncReadStatusMessage;
    exports.sendTextMessage = sendTextMessage;
    exports.sendTypingStatusMessage = sendTypingStatusMessage;
    exports.sendUltraGroupTypingStatus = sendUltraGroupTypingStatus;
    exports.setChatRoomEntries = setChatRoomEntries;
    exports.setChatRoomEntry = setChatRoomEntry;
    exports.setConversationNotificationLevel = setConversationNotificationLevel;
    exports.setConversationNotificationStatus = setConversationNotificationStatus;
    exports.setConversationToTop = setConversationToTop;
    exports.setConversationToTopInTag = setConversationToTopInTag;
    exports.setMessageReceivedStatus = setMessageReceivedStatus;
    exports.setUltraGroupDefaultNotificationLevel = setUltraGroupDefaultNotificationLevel;
    exports.updateExpansionForUltraGroupMessage = updateExpansionForUltraGroupMessage;
    exports.updateMessageExpansion = updateMessageExpansion;
    exports.updateTag = updateTag;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
